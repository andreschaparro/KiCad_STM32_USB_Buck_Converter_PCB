
KiCad_STM32_USB_Buck_Converter_PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007440  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080075c8  080075c8  000085c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007628  08007628  000090fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007628  08007628  00008628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007630  08007630  000090fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007630  08007630  00008630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007634  08007634  00008634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08007638  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000090fc  2**0
                  CONTENTS
 10 .bss          00001ca0  200000fc  200000fc  000090fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001d9c  20001d9c  000090fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000090fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001389a  00000000  00000000  0000912c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003052  00000000  00000000  0001c9c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001030  00000000  00000000  0001fa18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c72  00000000  00000000  00020a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000215f0  00000000  00000000  000216ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015aad  00000000  00000000  00042caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be1ae  00000000  00000000  00058757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00116905  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000436c  00000000  00000000  00116948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000092  00000000  00000000  0011acb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080075b0 	.word	0x080075b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	080075b0 	.word	0x080075b0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fa50 	bl	800099c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f80a 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f8c8 	bl	8000694 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000504:	f000 f86e 	bl	80005e4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000508:	f000 f89a 	bl	8000640 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 800050c:	f006 fb30 	bl	8006b70 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000510:	bf00      	nop
 8000512:	e7fd      	b.n	8000510 <main+0x1c>

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b094      	sub	sp, #80	@ 0x50
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0320 	add.w	r3, r7, #32
 800051e:	2230      	movs	r2, #48	@ 0x30
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f007 f818 	bl	8007558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 030c 	add.w	r3, r7, #12
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000538:	2300      	movs	r3, #0
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	4b27      	ldr	r3, [pc, #156]	@ (80005dc <SystemClock_Config+0xc8>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000540:	4a26      	ldr	r2, [pc, #152]	@ (80005dc <SystemClock_Config+0xc8>)
 8000542:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000546:	6413      	str	r3, [r2, #64]	@ 0x40
 8000548:	4b24      	ldr	r3, [pc, #144]	@ (80005dc <SystemClock_Config+0xc8>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800054c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000554:	2300      	movs	r3, #0
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	4b21      	ldr	r3, [pc, #132]	@ (80005e0 <SystemClock_Config+0xcc>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a20      	ldr	r2, [pc, #128]	@ (80005e0 <SystemClock_Config+0xcc>)
 800055e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000562:	6013      	str	r3, [r2, #0]
 8000564:	4b1e      	ldr	r3, [pc, #120]	@ (80005e0 <SystemClock_Config+0xcc>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000570:	2302      	movs	r3, #2
 8000572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000574:	2301      	movs	r3, #1
 8000576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000578:	2310      	movs	r3, #16
 800057a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057c:	2302      	movs	r3, #2
 800057e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000580:	2300      	movs	r3, #0
 8000582:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000584:	2310      	movs	r3, #16
 8000586:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000588:	23c0      	movs	r3, #192	@ 0xc0
 800058a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800058c:	2302      	movs	r3, #2
 800058e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000590:	2304      	movs	r3, #4
 8000592:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0320 	add.w	r3, r7, #32
 8000598:	4618      	mov	r0, r3
 800059a:	f002 f8f3 	bl	8002784 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005a4:	f000 f8c6 	bl	8000734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 fb56 	bl	8002c74 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005ce:	f000 f8b1 	bl	8000734 <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	3750      	adds	r7, #80	@ 0x50
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40007000 	.word	0x40007000

080005e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e8:	4b12      	ldr	r3, [pc, #72]	@ (8000634 <MX_I2C1_Init+0x50>)
 80005ea:	4a13      	ldr	r2, [pc, #76]	@ (8000638 <MX_I2C1_Init+0x54>)
 80005ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ee:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <MX_I2C1_Init+0x50>)
 80005f0:	4a12      	ldr	r2, [pc, #72]	@ (800063c <MX_I2C1_Init+0x58>)
 80005f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <MX_I2C1_Init+0x50>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000634 <MX_I2C1_Init+0x50>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000600:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <MX_I2C1_Init+0x50>)
 8000602:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000606:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000608:	4b0a      	ldr	r3, [pc, #40]	@ (8000634 <MX_I2C1_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800060e:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <MX_I2C1_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000614:	4b07      	ldr	r3, [pc, #28]	@ (8000634 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800061a:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000620:	4804      	ldr	r0, [pc, #16]	@ (8000634 <MX_I2C1_Init+0x50>)
 8000622:	f000 fd19 	bl	8001058 <HAL_I2C_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800062c:	f000 f882 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000118 	.word	0x20000118
 8000638:	40005400 	.word	0x40005400
 800063c:	000186a0 	.word	0x000186a0

08000640 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000644:	4b11      	ldr	r3, [pc, #68]	@ (800068c <MX_USART3_UART_Init+0x4c>)
 8000646:	4a12      	ldr	r2, [pc, #72]	@ (8000690 <MX_USART3_UART_Init+0x50>)
 8000648:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800064a:	4b10      	ldr	r3, [pc, #64]	@ (800068c <MX_USART3_UART_Init+0x4c>)
 800064c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000650:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000652:	4b0e      	ldr	r3, [pc, #56]	@ (800068c <MX_USART3_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000658:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <MX_USART3_UART_Init+0x4c>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800065e:	4b0b      	ldr	r3, [pc, #44]	@ (800068c <MX_USART3_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000664:	4b09      	ldr	r3, [pc, #36]	@ (800068c <MX_USART3_UART_Init+0x4c>)
 8000666:	220c      	movs	r2, #12
 8000668:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066a:	4b08      	ldr	r3, [pc, #32]	@ (800068c <MX_USART3_UART_Init+0x4c>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000670:	4b06      	ldr	r3, [pc, #24]	@ (800068c <MX_USART3_UART_Init+0x4c>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000676:	4805      	ldr	r0, [pc, #20]	@ (800068c <MX_USART3_UART_Init+0x4c>)
 8000678:	f002 fcdc 	bl	8003034 <HAL_UART_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000682:	f000 f857 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	2000016c 	.word	0x2000016c
 8000690:	40004800 	.word	0x40004800

08000694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <MX_GPIO_Init+0x98>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4a1e      	ldr	r2, [pc, #120]	@ (800072c <MX_GPIO_Init+0x98>)
 80006b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ba:	4b1c      	ldr	r3, [pc, #112]	@ (800072c <MX_GPIO_Init+0x98>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	4b18      	ldr	r3, [pc, #96]	@ (800072c <MX_GPIO_Init+0x98>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	4a17      	ldr	r2, [pc, #92]	@ (800072c <MX_GPIO_Init+0x98>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d6:	4b15      	ldr	r3, [pc, #84]	@ (800072c <MX_GPIO_Init+0x98>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	603b      	str	r3, [r7, #0]
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_GPIO_Init+0x98>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a10      	ldr	r2, [pc, #64]	@ (800072c <MX_GPIO_Init+0x98>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <MX_GPIO_Init+0x98>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2104      	movs	r1, #4
 8000702:	480b      	ldr	r0, [pc, #44]	@ (8000730 <MX_GPIO_Init+0x9c>)
 8000704:	f000 fc8e 	bl	8001024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_STATUS_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin;
 8000708:	2304      	movs	r3, #4
 800070a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	2301      	movs	r3, #1
 800070e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	4619      	mov	r1, r3
 800071e:	4804      	ldr	r0, [pc, #16]	@ (8000730 <MX_GPIO_Init+0x9c>)
 8000720:	f000 fae4 	bl	8000cec <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000724:	bf00      	nop
 8000726:	3720      	adds	r7, #32
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40023800 	.word	0x40023800
 8000730:	40020000 	.word	0x40020000

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <Error_Handler+0x8>

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b10      	ldr	r3, [pc, #64]	@ (800078c <HAL_MspInit+0x4c>)
 800074c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800074e:	4a0f      	ldr	r2, [pc, #60]	@ (800078c <HAL_MspInit+0x4c>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6453      	str	r3, [r2, #68]	@ 0x44
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <HAL_MspInit+0x4c>)
 8000758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800075a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <HAL_MspInit+0x4c>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076a:	4a08      	ldr	r2, [pc, #32]	@ (800078c <HAL_MspInit+0x4c>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000770:	6413      	str	r3, [r2, #64]	@ 0x40
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <HAL_MspInit+0x4c>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800

08000790 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	@ 0x28
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a19      	ldr	r2, [pc, #100]	@ (8000814 <HAL_I2C_MspInit+0x84>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d12b      	bne.n	800080a <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	4b18      	ldr	r3, [pc, #96]	@ (8000818 <HAL_I2C_MspInit+0x88>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a17      	ldr	r2, [pc, #92]	@ (8000818 <HAL_I2C_MspInit+0x88>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <HAL_I2C_MspInit+0x88>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007ce:	23c0      	movs	r3, #192	@ 0xc0
 80007d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007d2:	2312      	movs	r3, #18
 80007d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007da:	2303      	movs	r3, #3
 80007dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007de:	2304      	movs	r3, #4
 80007e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4619      	mov	r1, r3
 80007e8:	480c      	ldr	r0, [pc, #48]	@ (800081c <HAL_I2C_MspInit+0x8c>)
 80007ea:	f000 fa7f 	bl	8000cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <HAL_I2C_MspInit+0x88>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f6:	4a08      	ldr	r2, [pc, #32]	@ (8000818 <HAL_I2C_MspInit+0x88>)
 80007f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80007fe:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <HAL_I2C_MspInit+0x88>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000802:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800080a:	bf00      	nop
 800080c:	3728      	adds	r7, #40	@ 0x28
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40005400 	.word	0x40005400
 8000818:	40023800 	.word	0x40023800
 800081c:	40020400 	.word	0x40020400

08000820 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	@ 0x28
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a19      	ldr	r2, [pc, #100]	@ (80008a4 <HAL_UART_MspInit+0x84>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d12c      	bne.n	800089c <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	4b18      	ldr	r3, [pc, #96]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084a:	4a17      	ldr	r2, [pc, #92]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 800084c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000850:	6413      	str	r3, [r2, #64]	@ 0x40
 8000852:	4b15      	ldr	r3, [pc, #84]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000856:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a10      	ldr	r2, [pc, #64]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800087a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800087e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000888:	2303      	movs	r3, #3
 800088a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800088c:	2307      	movs	r3, #7
 800088e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4619      	mov	r1, r3
 8000896:	4805      	ldr	r0, [pc, #20]	@ (80008ac <HAL_UART_MspInit+0x8c>)
 8000898:	f000 fa28 	bl	8000cec <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	@ 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40004800 	.word	0x40004800
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40020400 	.word	0x40020400

080008b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <NMI_Handler+0x4>

080008b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <HardFault_Handler+0x4>

080008c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <MemManage_Handler+0x4>

080008c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <BusFault_Handler+0x4>

080008d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <UsageFault_Handler+0x4>

080008d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000906:	f000 f89b 	bl	8000a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000914:	4802      	ldr	r0, [pc, #8]	@ (8000920 <OTG_FS_IRQHandler+0x10>)
 8000916:	f000 fe27 	bl	8001568 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20001698 	.word	0x20001698

08000924 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <SystemInit+0x20>)
 800092a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800092e:	4a05      	ldr	r2, [pc, #20]	@ (8000944 <SystemInit+0x20>)
 8000930:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000934:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000948:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000980 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800094c:	f7ff ffea 	bl	8000924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000950:	480c      	ldr	r0, [pc, #48]	@ (8000984 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000952:	490d      	ldr	r1, [pc, #52]	@ (8000988 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000954:	4a0d      	ldr	r2, [pc, #52]	@ (800098c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000958:	e002      	b.n	8000960 <LoopCopyDataInit>

0800095a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800095c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095e:	3304      	adds	r3, #4

08000960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000964:	d3f9      	bcc.n	800095a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000966:	4a0a      	ldr	r2, [pc, #40]	@ (8000990 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000968:	4c0a      	ldr	r4, [pc, #40]	@ (8000994 <LoopFillZerobss+0x22>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800096c:	e001      	b.n	8000972 <LoopFillZerobss>

0800096e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000970:	3204      	adds	r2, #4

08000972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000974:	d3fb      	bcc.n	800096e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000976:	f006 fdf7 	bl	8007568 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800097a:	f7ff fdbb 	bl	80004f4 <main>
  bx  lr    
 800097e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000980:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000988:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 800098c:	08007638 	.word	0x08007638
  ldr r2, =_sbss
 8000990:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000994:	20001d9c 	.word	0x20001d9c

08000998 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000998:	e7fe      	b.n	8000998 <ADC_IRQHandler>
	...

0800099c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009a0:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <HAL_Init+0x40>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a0d      	ldr	r2, [pc, #52]	@ (80009dc <HAL_Init+0x40>)
 80009a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009ac:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <HAL_Init+0x40>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a0a      	ldr	r2, [pc, #40]	@ (80009dc <HAL_Init+0x40>)
 80009b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b8:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <HAL_Init+0x40>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a07      	ldr	r2, [pc, #28]	@ (80009dc <HAL_Init+0x40>)
 80009be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c4:	2003      	movs	r0, #3
 80009c6:	f000 f94f 	bl	8000c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ca:	200f      	movs	r0, #15
 80009cc:	f000 f808 	bl	80009e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d0:	f7ff feb6 	bl	8000740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023c00 	.word	0x40023c00

080009e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e8:	4b12      	ldr	r3, [pc, #72]	@ (8000a34 <HAL_InitTick+0x54>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <HAL_InitTick+0x58>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	4619      	mov	r1, r3
 80009f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 f967 	bl	8000cd2 <HAL_SYSTICK_Config>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e00e      	b.n	8000a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2b0f      	cmp	r3, #15
 8000a12:	d80a      	bhi.n	8000a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a14:	2200      	movs	r2, #0
 8000a16:	6879      	ldr	r1, [r7, #4]
 8000a18:	f04f 30ff 	mov.w	r0, #4294967295
 8000a1c:	f000 f92f 	bl	8000c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a20:	4a06      	ldr	r2, [pc, #24]	@ (8000a3c <HAL_InitTick+0x5c>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a26:	2300      	movs	r3, #0
 8000a28:	e000      	b.n	8000a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000000 	.word	0x20000000
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	20000004 	.word	0x20000004

08000a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <HAL_IncTick+0x20>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <HAL_IncTick+0x24>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4413      	add	r3, r2
 8000a50:	4a04      	ldr	r2, [pc, #16]	@ (8000a64 <HAL_IncTick+0x24>)
 8000a52:	6013      	str	r3, [r2, #0]
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	20000008 	.word	0x20000008
 8000a64:	200001b4 	.word	0x200001b4

08000a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a6c:	4b03      	ldr	r3, [pc, #12]	@ (8000a7c <HAL_GetTick+0x14>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	200001b4 	.word	0x200001b4

08000a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a88:	f7ff ffee 	bl	8000a68 <HAL_GetTick>
 8000a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a98:	d005      	beq.n	8000aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac4 <HAL_Delay+0x44>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000aa6:	bf00      	nop
 8000aa8:	f7ff ffde 	bl	8000a68 <HAL_GetTick>
 8000aac:	4602      	mov	r2, r0
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d8f7      	bhi.n	8000aa8 <HAL_Delay+0x28>
  {
  }
}
 8000ab8:	bf00      	nop
 8000aba:	bf00      	nop
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000008 	.word	0x20000008

08000ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000afa:	4a04      	ldr	r2, [pc, #16]	@ (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	60d3      	str	r3, [r2, #12]
}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b14:	4b04      	ldr	r3, [pc, #16]	@ (8000b28 <__NVIC_GetPriorityGrouping+0x18>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	0a1b      	lsrs	r3, r3, #8
 8000b1a:	f003 0307 	and.w	r3, r3, #7
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	db0b      	blt.n	8000b56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	f003 021f 	and.w	r2, r3, #31
 8000b44:	4907      	ldr	r1, [pc, #28]	@ (8000b64 <__NVIC_EnableIRQ+0x38>)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	095b      	lsrs	r3, r3, #5
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000e100 	.word	0xe000e100

08000b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	db0a      	blt.n	8000b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	490c      	ldr	r1, [pc, #48]	@ (8000bb4 <__NVIC_SetPriority+0x4c>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	0112      	lsls	r2, r2, #4
 8000b88:	b2d2      	uxtb	r2, r2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b90:	e00a      	b.n	8000ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4908      	ldr	r1, [pc, #32]	@ (8000bb8 <__NVIC_SetPriority+0x50>)
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	f003 030f 	and.w	r3, r3, #15
 8000b9e:	3b04      	subs	r3, #4
 8000ba0:	0112      	lsls	r2, r2, #4
 8000ba2:	b2d2      	uxtb	r2, r2
 8000ba4:	440b      	add	r3, r1
 8000ba6:	761a      	strb	r2, [r3, #24]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000e100 	.word	0xe000e100
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b089      	sub	sp, #36	@ 0x24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	f1c3 0307 	rsb	r3, r3, #7
 8000bd6:	2b04      	cmp	r3, #4
 8000bd8:	bf28      	it	cs
 8000bda:	2304      	movcs	r3, #4
 8000bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3304      	adds	r3, #4
 8000be2:	2b06      	cmp	r3, #6
 8000be4:	d902      	bls.n	8000bec <NVIC_EncodePriority+0x30>
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3b03      	subs	r3, #3
 8000bea:	e000      	b.n	8000bee <NVIC_EncodePriority+0x32>
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43da      	mvns	r2, r3
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	401a      	ands	r2, r3
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c04:	f04f 31ff 	mov.w	r1, #4294967295
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0e:	43d9      	mvns	r1, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	4313      	orrs	r3, r2
         );
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3724      	adds	r7, #36	@ 0x24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c34:	d301      	bcc.n	8000c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00f      	b.n	8000c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c64 <SysTick_Config+0x40>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c42:	210f      	movs	r1, #15
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f7ff ff8e 	bl	8000b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c4c:	4b05      	ldr	r3, [pc, #20]	@ (8000c64 <SysTick_Config+0x40>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c52:	4b04      	ldr	r3, [pc, #16]	@ (8000c64 <SysTick_Config+0x40>)
 8000c54:	2207      	movs	r2, #7
 8000c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	e000e010 	.word	0xe000e010

08000c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff ff29 	bl	8000ac8 <__NVIC_SetPriorityGrouping>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b086      	sub	sp, #24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
 8000c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c90:	f7ff ff3e 	bl	8000b10 <__NVIC_GetPriorityGrouping>
 8000c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	68b9      	ldr	r1, [r7, #8]
 8000c9a:	6978      	ldr	r0, [r7, #20]
 8000c9c:	f7ff ff8e 	bl	8000bbc <NVIC_EncodePriority>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff5d 	bl	8000b68 <__NVIC_SetPriority>
}
 8000cae:	bf00      	nop
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff31 	bl	8000b2c <__NVIC_EnableIRQ>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ffa2 	bl	8000c24 <SysTick_Config>
 8000ce0:	4603      	mov	r3, r0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b089      	sub	sp, #36	@ 0x24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
 8000d06:	e16b      	b.n	8000fe0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d08:	2201      	movs	r2, #1
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	697a      	ldr	r2, [r7, #20]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	f040 815a 	bne.w	8000fda <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f003 0303 	and.w	r3, r3, #3
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d005      	beq.n	8000d3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d130      	bne.n	8000da0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	2203      	movs	r2, #3
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4013      	ands	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	68da      	ldr	r2, [r3, #12]
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d74:	2201      	movs	r2, #1
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	091b      	lsrs	r3, r3, #4
 8000d8a:	f003 0201 	and.w	r2, r3, #1
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 0303 	and.w	r3, r3, #3
 8000da8:	2b03      	cmp	r3, #3
 8000daa:	d017      	beq.n	8000ddc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	2203      	movs	r2, #3
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	689a      	ldr	r2, [r3, #8]
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 0303 	and.w	r3, r3, #3
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d123      	bne.n	8000e30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	08da      	lsrs	r2, r3, #3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3208      	adds	r2, #8
 8000df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	f003 0307 	and.w	r3, r3, #7
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	220f      	movs	r2, #15
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	691a      	ldr	r2, [r3, #16]
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	08da      	lsrs	r2, r3, #3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3208      	adds	r2, #8
 8000e2a:	69b9      	ldr	r1, [r7, #24]
 8000e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0203 	and.w	r2, r3, #3
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f000 80b4 	beq.w	8000fda <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b60      	ldr	r3, [pc, #384]	@ (8000ff8 <HAL_GPIO_Init+0x30c>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7a:	4a5f      	ldr	r2, [pc, #380]	@ (8000ff8 <HAL_GPIO_Init+0x30c>)
 8000e7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e82:	4b5d      	ldr	r3, [pc, #372]	@ (8000ff8 <HAL_GPIO_Init+0x30c>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e8e:	4a5b      	ldr	r2, [pc, #364]	@ (8000ffc <HAL_GPIO_Init+0x310>)
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	089b      	lsrs	r3, r3, #2
 8000e94:	3302      	adds	r3, #2
 8000e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	220f      	movs	r2, #15
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a52      	ldr	r2, [pc, #328]	@ (8001000 <HAL_GPIO_Init+0x314>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d02b      	beq.n	8000f12 <HAL_GPIO_Init+0x226>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a51      	ldr	r2, [pc, #324]	@ (8001004 <HAL_GPIO_Init+0x318>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d025      	beq.n	8000f0e <HAL_GPIO_Init+0x222>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a50      	ldr	r2, [pc, #320]	@ (8001008 <HAL_GPIO_Init+0x31c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d01f      	beq.n	8000f0a <HAL_GPIO_Init+0x21e>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a4f      	ldr	r2, [pc, #316]	@ (800100c <HAL_GPIO_Init+0x320>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d019      	beq.n	8000f06 <HAL_GPIO_Init+0x21a>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a4e      	ldr	r2, [pc, #312]	@ (8001010 <HAL_GPIO_Init+0x324>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d013      	beq.n	8000f02 <HAL_GPIO_Init+0x216>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a4d      	ldr	r2, [pc, #308]	@ (8001014 <HAL_GPIO_Init+0x328>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d00d      	beq.n	8000efe <HAL_GPIO_Init+0x212>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a4c      	ldr	r2, [pc, #304]	@ (8001018 <HAL_GPIO_Init+0x32c>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d007      	beq.n	8000efa <HAL_GPIO_Init+0x20e>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4b      	ldr	r2, [pc, #300]	@ (800101c <HAL_GPIO_Init+0x330>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d101      	bne.n	8000ef6 <HAL_GPIO_Init+0x20a>
 8000ef2:	2307      	movs	r3, #7
 8000ef4:	e00e      	b.n	8000f14 <HAL_GPIO_Init+0x228>
 8000ef6:	2308      	movs	r3, #8
 8000ef8:	e00c      	b.n	8000f14 <HAL_GPIO_Init+0x228>
 8000efa:	2306      	movs	r3, #6
 8000efc:	e00a      	b.n	8000f14 <HAL_GPIO_Init+0x228>
 8000efe:	2305      	movs	r3, #5
 8000f00:	e008      	b.n	8000f14 <HAL_GPIO_Init+0x228>
 8000f02:	2304      	movs	r3, #4
 8000f04:	e006      	b.n	8000f14 <HAL_GPIO_Init+0x228>
 8000f06:	2303      	movs	r3, #3
 8000f08:	e004      	b.n	8000f14 <HAL_GPIO_Init+0x228>
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	e002      	b.n	8000f14 <HAL_GPIO_Init+0x228>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e000      	b.n	8000f14 <HAL_GPIO_Init+0x228>
 8000f12:	2300      	movs	r3, #0
 8000f14:	69fa      	ldr	r2, [r7, #28]
 8000f16:	f002 0203 	and.w	r2, r2, #3
 8000f1a:	0092      	lsls	r2, r2, #2
 8000f1c:	4093      	lsls	r3, r2
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f24:	4935      	ldr	r1, [pc, #212]	@ (8000ffc <HAL_GPIO_Init+0x310>)
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	089b      	lsrs	r3, r3, #2
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f32:	4b3b      	ldr	r3, [pc, #236]	@ (8001020 <HAL_GPIO_Init+0x334>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f56:	4a32      	ldr	r2, [pc, #200]	@ (8001020 <HAL_GPIO_Init+0x334>)
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f5c:	4b30      	ldr	r3, [pc, #192]	@ (8001020 <HAL_GPIO_Init+0x334>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f80:	4a27      	ldr	r2, [pc, #156]	@ (8001020 <HAL_GPIO_Init+0x334>)
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f86:	4b26      	ldr	r3, [pc, #152]	@ (8001020 <HAL_GPIO_Init+0x334>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4013      	ands	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000faa:	4a1d      	ldr	r2, [pc, #116]	@ (8001020 <HAL_GPIO_Init+0x334>)
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001020 <HAL_GPIO_Init+0x334>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fd4:	4a12      	ldr	r2, [pc, #72]	@ (8001020 <HAL_GPIO_Init+0x334>)
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	61fb      	str	r3, [r7, #28]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	2b0f      	cmp	r3, #15
 8000fe4:	f67f ae90 	bls.w	8000d08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	3724      	adds	r7, #36	@ 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40013800 	.word	0x40013800
 8001000:	40020000 	.word	0x40020000
 8001004:	40020400 	.word	0x40020400
 8001008:	40020800 	.word	0x40020800
 800100c:	40020c00 	.word	0x40020c00
 8001010:	40021000 	.word	0x40021000
 8001014:	40021400 	.word	0x40021400
 8001018:	40021800 	.word	0x40021800
 800101c:	40021c00 	.word	0x40021c00
 8001020:	40013c00 	.word	0x40013c00

08001024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	807b      	strh	r3, [r7, #2]
 8001030:	4613      	mov	r3, r2
 8001032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001034:	787b      	ldrb	r3, [r7, #1]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800103a:	887a      	ldrh	r2, [r7, #2]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001040:	e003      	b.n	800104a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001042:	887b      	ldrh	r3, [r7, #2]
 8001044:	041a      	lsls	r2, r3, #16
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	619a      	str	r2, [r3, #24]
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e12b      	b.n	80012c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d106      	bne.n	8001084 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff fb86 	bl	8000790 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2224      	movs	r2, #36	@ 0x24
 8001088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f022 0201 	bic.w	r2, r2, #1
 800109a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80010aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010bc:	f001 ff92 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 80010c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	4a81      	ldr	r2, [pc, #516]	@ (80012cc <HAL_I2C_Init+0x274>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d807      	bhi.n	80010dc <HAL_I2C_Init+0x84>
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4a80      	ldr	r2, [pc, #512]	@ (80012d0 <HAL_I2C_Init+0x278>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	bf94      	ite	ls
 80010d4:	2301      	movls	r3, #1
 80010d6:	2300      	movhi	r3, #0
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	e006      	b.n	80010ea <HAL_I2C_Init+0x92>
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4a7d      	ldr	r2, [pc, #500]	@ (80012d4 <HAL_I2C_Init+0x27c>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	bf94      	ite	ls
 80010e4:	2301      	movls	r3, #1
 80010e6:	2300      	movhi	r3, #0
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e0e7      	b.n	80012c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	4a78      	ldr	r2, [pc, #480]	@ (80012d8 <HAL_I2C_Init+0x280>)
 80010f6:	fba2 2303 	umull	r2, r3, r2, r3
 80010fa:	0c9b      	lsrs	r3, r3, #18
 80010fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68ba      	ldr	r2, [r7, #8]
 800110e:	430a      	orrs	r2, r1
 8001110:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	4a6a      	ldr	r2, [pc, #424]	@ (80012cc <HAL_I2C_Init+0x274>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d802      	bhi.n	800112c <HAL_I2C_Init+0xd4>
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	3301      	adds	r3, #1
 800112a:	e009      	b.n	8001140 <HAL_I2C_Init+0xe8>
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001132:	fb02 f303 	mul.w	r3, r2, r3
 8001136:	4a69      	ldr	r2, [pc, #420]	@ (80012dc <HAL_I2C_Init+0x284>)
 8001138:	fba2 2303 	umull	r2, r3, r2, r3
 800113c:	099b      	lsrs	r3, r3, #6
 800113e:	3301      	adds	r3, #1
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	6812      	ldr	r2, [r2, #0]
 8001144:	430b      	orrs	r3, r1
 8001146:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001152:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	495c      	ldr	r1, [pc, #368]	@ (80012cc <HAL_I2C_Init+0x274>)
 800115c:	428b      	cmp	r3, r1
 800115e:	d819      	bhi.n	8001194 <HAL_I2C_Init+0x13c>
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	1e59      	subs	r1, r3, #1
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	fbb1 f3f3 	udiv	r3, r1, r3
 800116e:	1c59      	adds	r1, r3, #1
 8001170:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001174:	400b      	ands	r3, r1
 8001176:	2b00      	cmp	r3, #0
 8001178:	d00a      	beq.n	8001190 <HAL_I2C_Init+0x138>
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	1e59      	subs	r1, r3, #1
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	fbb1 f3f3 	udiv	r3, r1, r3
 8001188:	3301      	adds	r3, #1
 800118a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800118e:	e051      	b.n	8001234 <HAL_I2C_Init+0x1dc>
 8001190:	2304      	movs	r3, #4
 8001192:	e04f      	b.n	8001234 <HAL_I2C_Init+0x1dc>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d111      	bne.n	80011c0 <HAL_I2C_Init+0x168>
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	1e58      	subs	r0, r3, #1
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6859      	ldr	r1, [r3, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	440b      	add	r3, r1
 80011aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80011ae:	3301      	adds	r3, #1
 80011b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	bf0c      	ite	eq
 80011b8:	2301      	moveq	r3, #1
 80011ba:	2300      	movne	r3, #0
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	e012      	b.n	80011e6 <HAL_I2C_Init+0x18e>
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	1e58      	subs	r0, r3, #1
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6859      	ldr	r1, [r3, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	440b      	add	r3, r1
 80011ce:	0099      	lsls	r1, r3, #2
 80011d0:	440b      	add	r3, r1
 80011d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80011d6:	3301      	adds	r3, #1
 80011d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011dc:	2b00      	cmp	r3, #0
 80011de:	bf0c      	ite	eq
 80011e0:	2301      	moveq	r3, #1
 80011e2:	2300      	movne	r3, #0
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_I2C_Init+0x196>
 80011ea:	2301      	movs	r3, #1
 80011ec:	e022      	b.n	8001234 <HAL_I2C_Init+0x1dc>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10e      	bne.n	8001214 <HAL_I2C_Init+0x1bc>
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	1e58      	subs	r0, r3, #1
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6859      	ldr	r1, [r3, #4]
 80011fe:	460b      	mov	r3, r1
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	440b      	add	r3, r1
 8001204:	fbb0 f3f3 	udiv	r3, r0, r3
 8001208:	3301      	adds	r3, #1
 800120a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800120e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001212:	e00f      	b.n	8001234 <HAL_I2C_Init+0x1dc>
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	1e58      	subs	r0, r3, #1
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6859      	ldr	r1, [r3, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	440b      	add	r3, r1
 8001222:	0099      	lsls	r1, r3, #2
 8001224:	440b      	add	r3, r1
 8001226:	fbb0 f3f3 	udiv	r3, r0, r3
 800122a:	3301      	adds	r3, #1
 800122c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001230:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001234:	6879      	ldr	r1, [r7, #4]
 8001236:	6809      	ldr	r1, [r1, #0]
 8001238:	4313      	orrs	r3, r2
 800123a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69da      	ldr	r2, [r3, #28]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a1b      	ldr	r3, [r3, #32]
 800124e:	431a      	orrs	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	430a      	orrs	r2, r1
 8001256:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001262:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	6911      	ldr	r1, [r2, #16]
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	68d2      	ldr	r2, [r2, #12]
 800126e:	4311      	orrs	r1, r2
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	6812      	ldr	r2, [r2, #0]
 8001274:	430b      	orrs	r3, r1
 8001276:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695a      	ldr	r2, [r3, #20]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	431a      	orrs	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	430a      	orrs	r2, r1
 8001292:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 0201 	orr.w	r2, r2, #1
 80012a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2220      	movs	r2, #32
 80012ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	000186a0 	.word	0x000186a0
 80012d0:	001e847f 	.word	0x001e847f
 80012d4:	003d08ff 	.word	0x003d08ff
 80012d8:	431bde83 	.word	0x431bde83
 80012dc:	10624dd3 	.word	0x10624dd3

080012e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af02      	add	r7, sp, #8
 80012e6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e101      	b.n	80014f6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b00      	cmp	r3, #0
 8001302:	d106      	bne.n	8001312 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f005 fe0f 	bl	8006f30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2203      	movs	r2, #3
 8001316:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001320:	d102      	bne.n	8001328 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f002 fa5c 	bl	80037ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6818      	ldr	r0, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	7c1a      	ldrb	r2, [r3, #16]
 800133a:	f88d 2000 	strb.w	r2, [sp]
 800133e:	3304      	adds	r3, #4
 8001340:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001342:	f002 f93b 	bl	80035bc <USB_CoreInit>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d005      	beq.n	8001358 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2202      	movs	r2, #2
 8001350:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e0ce      	b.n	80014f6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f002 fa54 	bl	800380c <USB_SetCurrentMode>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d005      	beq.n	8001376 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2202      	movs	r2, #2
 800136e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e0bf      	b.n	80014f6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001376:	2300      	movs	r3, #0
 8001378:	73fb      	strb	r3, [r7, #15]
 800137a:	e04a      	b.n	8001412 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800137c:	7bfa      	ldrb	r2, [r7, #15]
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	4613      	mov	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	4413      	add	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	3315      	adds	r3, #21
 800138c:	2201      	movs	r2, #1
 800138e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4413      	add	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	440b      	add	r3, r1
 800139e:	3314      	adds	r3, #20
 80013a0:	7bfa      	ldrb	r2, [r7, #15]
 80013a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013a4:	7bfa      	ldrb	r2, [r7, #15]
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	b298      	uxth	r0, r3
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	4413      	add	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	440b      	add	r3, r1
 80013b6:	332e      	adds	r3, #46	@ 0x2e
 80013b8:	4602      	mov	r2, r0
 80013ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013bc:	7bfa      	ldrb	r2, [r7, #15]
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	4613      	mov	r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	4413      	add	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	440b      	add	r3, r1
 80013ca:	3318      	adds	r3, #24
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013d0:	7bfa      	ldrb	r2, [r7, #15]
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	4613      	mov	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	4413      	add	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	440b      	add	r3, r1
 80013de:	331c      	adds	r3, #28
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013e4:	7bfa      	ldrb	r2, [r7, #15]
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	4413      	add	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	440b      	add	r3, r1
 80013f2:	3320      	adds	r3, #32
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013f8:	7bfa      	ldrb	r2, [r7, #15]
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	4413      	add	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	3324      	adds	r3, #36	@ 0x24
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	3301      	adds	r3, #1
 8001410:	73fb      	strb	r3, [r7, #15]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	791b      	ldrb	r3, [r3, #4]
 8001416:	7bfa      	ldrb	r2, [r7, #15]
 8001418:	429a      	cmp	r2, r3
 800141a:	d3af      	bcc.n	800137c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800141c:	2300      	movs	r3, #0
 800141e:	73fb      	strb	r3, [r7, #15]
 8001420:	e044      	b.n	80014ac <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001422:	7bfa      	ldrb	r2, [r7, #15]
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4413      	add	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001438:	7bfa      	ldrb	r2, [r7, #15]
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	4413      	add	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	440b      	add	r3, r1
 8001446:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800144a:	7bfa      	ldrb	r2, [r7, #15]
 800144c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800144e:	7bfa      	ldrb	r2, [r7, #15]
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	4413      	add	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	440b      	add	r3, r1
 800145c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001464:	7bfa      	ldrb	r2, [r7, #15]
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	4413      	add	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	440b      	add	r3, r1
 8001472:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800147a:	7bfa      	ldrb	r2, [r7, #15]
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	4613      	mov	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	4413      	add	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	440b      	add	r3, r1
 8001488:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001490:	7bfa      	ldrb	r2, [r7, #15]
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	4413      	add	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	3301      	adds	r3, #1
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	791b      	ldrb	r3, [r3, #4]
 80014b0:	7bfa      	ldrb	r2, [r7, #15]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d3b5      	bcc.n	8001422 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6818      	ldr	r0, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	7c1a      	ldrb	r2, [r3, #16]
 80014be:	f88d 2000 	strb.w	r2, [sp]
 80014c2:	3304      	adds	r3, #4
 80014c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014c6:	f002 f9ed 	bl	80038a4 <USB_DevInit>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2202      	movs	r2, #2
 80014d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e00c      	b.n	80014f6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f003 fa37 	bl	8004962 <USB_DevDisconnect>

  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b084      	sub	sp, #16
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001512:	2b01      	cmp	r3, #1
 8001514:	d101      	bne.n	800151a <HAL_PCD_Start+0x1c>
 8001516:	2302      	movs	r3, #2
 8001518:	e022      	b.n	8001560 <HAL_PCD_Start+0x62>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800152a:	2b00      	cmp	r3, #0
 800152c:	d009      	beq.n	8001542 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001532:	2b01      	cmp	r3, #1
 8001534:	d105      	bne.n	8001542 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800153a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f002 f93e 	bl	80037c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f003 f9e5 	bl	8004920 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b08d      	sub	sp, #52	@ 0x34
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001576:	6a3b      	ldr	r3, [r7, #32]
 8001578:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f003 faa3 	bl	8004aca <USB_GetMode>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	f040 848c 	bne.w	8001ea4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f003 fa07 	bl	80049a4 <USB_ReadInterrupts>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 8482 	beq.w	8001ea2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	0a1b      	lsrs	r3, r3, #8
 80015a8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f003 f9f4 	bl	80049a4 <USB_ReadInterrupts>
 80015bc:	4603      	mov	r3, r0
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d107      	bne.n	80015d6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	695a      	ldr	r2, [r3, #20]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f002 0202 	and.w	r2, r2, #2
 80015d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f003 f9e2 	bl	80049a4 <USB_ReadInterrupts>
 80015e0:	4603      	mov	r3, r0
 80015e2:	f003 0310 	and.w	r3, r3, #16
 80015e6:	2b10      	cmp	r3, #16
 80015e8:	d161      	bne.n	80016ae <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	699a      	ldr	r2, [r3, #24]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0210 	bic.w	r2, r2, #16
 80015f8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	f003 020f 	and.w	r2, r3, #15
 8001606:	4613      	mov	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	4413      	add	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	3304      	adds	r3, #4
 8001618:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001620:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001624:	d124      	bne.n	8001670 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800162c:	4013      	ands	r3, r2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d035      	beq.n	800169e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	091b      	lsrs	r3, r3, #4
 800163a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800163c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001640:	b29b      	uxth	r3, r3
 8001642:	461a      	mov	r2, r3
 8001644:	6a38      	ldr	r0, [r7, #32]
 8001646:	f003 f819 	bl	800467c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	68da      	ldr	r2, [r3, #12]
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	091b      	lsrs	r3, r3, #4
 8001652:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001656:	441a      	add	r2, r3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	695a      	ldr	r2, [r3, #20]
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001668:	441a      	add	r2, r3
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	615a      	str	r2, [r3, #20]
 800166e:	e016      	b.n	800169e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001676:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800167a:	d110      	bne.n	800169e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001682:	2208      	movs	r2, #8
 8001684:	4619      	mov	r1, r3
 8001686:	6a38      	ldr	r0, [r7, #32]
 8001688:	f002 fff8 	bl	800467c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	695a      	ldr	r2, [r3, #20]
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	091b      	lsrs	r3, r3, #4
 8001694:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001698:	441a      	add	r2, r3
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	699a      	ldr	r2, [r3, #24]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f042 0210 	orr.w	r2, r2, #16
 80016ac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f003 f976 	bl	80049a4 <USB_ReadInterrupts>
 80016b8:	4603      	mov	r3, r0
 80016ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016be:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80016c2:	f040 80a7 	bne.w	8001814 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f003 f97b 	bl	80049ca <USB_ReadDevAllOutEpInterrupt>
 80016d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80016d6:	e099      	b.n	800180c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80016d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 808e 	beq.w	8001800 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	4611      	mov	r1, r2
 80016ee:	4618      	mov	r0, r3
 80016f0:	f003 f99f 	bl	8004a32 <USB_ReadDevOutEPInterrupt>
 80016f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00c      	beq.n	800171a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001702:	015a      	lsls	r2, r3, #5
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	4413      	add	r3, r2
 8001708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800170c:	461a      	mov	r2, r3
 800170e:	2301      	movs	r3, #1
 8001710:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001712:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 fea3 	bl	8002460 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00c      	beq.n	800173e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001726:	015a      	lsls	r2, r3, #5
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	4413      	add	r3, r2
 800172c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001730:	461a      	mov	r2, r3
 8001732:	2308      	movs	r3, #8
 8001734:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001736:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 ff79 	bl	8002630 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	f003 0310 	and.w	r3, r3, #16
 8001744:	2b00      	cmp	r3, #0
 8001746:	d008      	beq.n	800175a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174a:	015a      	lsls	r2, r3, #5
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	4413      	add	r3, r2
 8001750:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001754:	461a      	mov	r2, r3
 8001756:	2310      	movs	r3, #16
 8001758:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d030      	beq.n	80017c6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001764:	6a3b      	ldr	r3, [r7, #32]
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800176c:	2b80      	cmp	r3, #128	@ 0x80
 800176e:	d109      	bne.n	8001784 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	69fa      	ldr	r2, [r7, #28]
 800177a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800177e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001782:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001784:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001786:	4613      	mov	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	4413      	add	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	3304      	adds	r3, #4
 8001798:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	78db      	ldrb	r3, [r3, #3]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d108      	bne.n	80017b4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	2200      	movs	r2, #0
 80017a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80017a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	4619      	mov	r1, r3
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f005 fcc4 	bl	800713c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80017b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b6:	015a      	lsls	r2, r3, #5
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	4413      	add	r3, r2
 80017bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017c0:	461a      	mov	r2, r3
 80017c2:	2302      	movs	r3, #2
 80017c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	f003 0320 	and.w	r3, r3, #32
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80017d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d2:	015a      	lsls	r2, r3, #5
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	4413      	add	r3, r2
 80017d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017dc:	461a      	mov	r2, r3
 80017de:	2320      	movs	r3, #32
 80017e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d009      	beq.n	8001800 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80017ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ee:	015a      	lsls	r2, r3, #5
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	4413      	add	r3, r2
 80017f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017f8:	461a      	mov	r2, r3
 80017fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017fe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001802:	3301      	adds	r3, #1
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001808:	085b      	lsrs	r3, r3, #1
 800180a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800180c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800180e:	2b00      	cmp	r3, #0
 8001810:	f47f af62 	bne.w	80016d8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f003 f8c3 	bl	80049a4 <USB_ReadInterrupts>
 800181e:	4603      	mov	r3, r0
 8001820:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001824:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001828:	f040 80db 	bne.w	80019e2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f003 f8e4 	bl	80049fe <USB_ReadDevAllInEpInterrupt>
 8001836:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800183c:	e0cd      	b.n	80019da <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800183e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 80c2 	beq.w	80019ce <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f003 f90a 	bl	8004a6e <USB_ReadDevInEPInterrupt>
 800185a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d057      	beq.n	8001916 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001868:	f003 030f 	and.w	r3, r3, #15
 800186c:	2201      	movs	r2, #1
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800187a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	43db      	mvns	r3, r3
 8001880:	69f9      	ldr	r1, [r7, #28]
 8001882:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001886:	4013      	ands	r3, r2
 8001888:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800188a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188c:	015a      	lsls	r2, r3, #5
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	4413      	add	r3, r2
 8001892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001896:	461a      	mov	r2, r3
 8001898:	2301      	movs	r3, #1
 800189a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	799b      	ldrb	r3, [r3, #6]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d132      	bne.n	800190a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018a8:	4613      	mov	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	4413      	add	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	3320      	adds	r3, #32
 80018b4:	6819      	ldr	r1, [r3, #0]
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018ba:	4613      	mov	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	4413      	add	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4403      	add	r3, r0
 80018c4:	331c      	adds	r3, #28
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4419      	add	r1, r3
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018ce:	4613      	mov	r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4403      	add	r3, r0
 80018d8:	3320      	adds	r3, #32
 80018da:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80018dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d113      	bne.n	800190a <HAL_PCD_IRQHandler+0x3a2>
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018e6:	4613      	mov	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	4413      	add	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	3324      	adds	r3, #36	@ 0x24
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d108      	bne.n	800190a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001902:	461a      	mov	r2, r3
 8001904:	2101      	movs	r1, #1
 8001906:	f003 f911 	bl	8004b2c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800190a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190c:	b2db      	uxtb	r3, r3
 800190e:	4619      	mov	r1, r3
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f005 fb8e 	bl	8007032 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	2b00      	cmp	r3, #0
 800191e:	d008      	beq.n	8001932 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001922:	015a      	lsls	r2, r3, #5
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	4413      	add	r3, r2
 8001928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800192c:	461a      	mov	r2, r3
 800192e:	2308      	movs	r3, #8
 8001930:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	f003 0310 	and.w	r3, r3, #16
 8001938:	2b00      	cmp	r3, #0
 800193a:	d008      	beq.n	800194e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800193c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193e:	015a      	lsls	r2, r3, #5
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	4413      	add	r3, r2
 8001944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001948:	461a      	mov	r2, r3
 800194a:	2310      	movs	r3, #16
 800194c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001954:	2b00      	cmp	r3, #0
 8001956:	d008      	beq.n	800196a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195a:	015a      	lsls	r2, r3, #5
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	4413      	add	r3, r2
 8001960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001964:	461a      	mov	r2, r3
 8001966:	2340      	movs	r3, #64	@ 0x40
 8001968:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d023      	beq.n	80019bc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001974:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001976:	6a38      	ldr	r0, [r7, #32]
 8001978:	f002 f8f8 	bl	8003b6c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800197c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800197e:	4613      	mov	r3, r2
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	4413      	add	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	3310      	adds	r3, #16
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	4413      	add	r3, r2
 800198c:	3304      	adds	r3, #4
 800198e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	78db      	ldrb	r3, [r3, #3]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d108      	bne.n	80019aa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	2200      	movs	r2, #0
 800199c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800199e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	4619      	mov	r1, r3
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f005 fbdb 	bl	8007160 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80019aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ac:	015a      	lsls	r2, r3, #5
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	4413      	add	r3, r2
 80019b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019b6:	461a      	mov	r2, r3
 80019b8:	2302      	movs	r3, #2
 80019ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80019c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 fcbd 	bl	8002348 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80019ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d0:	3301      	adds	r3, #1
 80019d2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80019d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019d6:	085b      	lsrs	r3, r3, #1
 80019d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80019da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f47f af2e 	bne.w	800183e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f002 ffdc 	bl	80049a4 <USB_ReadInterrupts>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80019f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80019f6:	d122      	bne.n	8001a3e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a06:	f023 0301 	bic.w	r3, r3, #1
 8001a0a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d108      	bne.n	8001a28 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a1e:	2100      	movs	r1, #0
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 fea3 	bl	800276c <HAL_PCDEx_LPM_Callback>
 8001a26:	e002      	b.n	8001a2e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f005 fb79 	bl	8007120 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	695a      	ldr	r2, [r3, #20]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001a3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f002 ffae 	bl	80049a4 <USB_ReadInterrupts>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a52:	d112      	bne.n	8001a7a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d102      	bne.n	8001a6a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f005 fb35 	bl	80070d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	695a      	ldr	r2, [r3, #20]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001a78:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f002 ff90 	bl	80049a4 <USB_ReadInterrupts>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a8e:	f040 80b7 	bne.w	8001c00 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	69fa      	ldr	r2, [r7, #28]
 8001a9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001aa0:	f023 0301 	bic.w	r3, r3, #1
 8001aa4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2110      	movs	r1, #16
 8001aac:	4618      	mov	r0, r3
 8001aae:	f002 f85d 	bl	8003b6c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ab6:	e046      	b.n	8001b46 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aba:	015a      	lsls	r2, r3, #5
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	4413      	add	r3, r2
 8001ac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001aca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ace:	015a      	lsls	r2, r3, #5
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001adc:	0151      	lsls	r1, r2, #5
 8001ade:	69fa      	ldr	r2, [r7, #28]
 8001ae0:	440a      	add	r2, r1
 8001ae2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001ae6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001aea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aee:	015a      	lsls	r2, r3, #5
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	4413      	add	r3, r2
 8001af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001af8:	461a      	mov	r2, r3
 8001afa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001afe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b02:	015a      	lsls	r2, r3, #5
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	4413      	add	r3, r2
 8001b08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b10:	0151      	lsls	r1, r2, #5
 8001b12:	69fa      	ldr	r2, [r7, #28]
 8001b14:	440a      	add	r2, r1
 8001b16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001b1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001b1e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b22:	015a      	lsls	r2, r3, #5
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	4413      	add	r3, r2
 8001b28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b30:	0151      	lsls	r1, r2, #5
 8001b32:	69fa      	ldr	r2, [r7, #28]
 8001b34:	440a      	add	r2, r1
 8001b36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001b3a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001b3e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b42:	3301      	adds	r3, #1
 8001b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	791b      	ldrb	r3, [r3, #4]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d3b2      	bcc.n	8001ab8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	69fa      	ldr	r2, [r7, #28]
 8001b5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b60:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001b64:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	7bdb      	ldrb	r3, [r3, #15]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d016      	beq.n	8001b9c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b78:	69fa      	ldr	r2, [r7, #28]
 8001b7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b7e:	f043 030b 	orr.w	r3, r3, #11
 8001b82:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b94:	f043 030b 	orr.w	r3, r3, #11
 8001b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b9a:	e015      	b.n	8001bc8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	69fa      	ldr	r2, [r7, #28]
 8001ba6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001baa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001bae:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001bb2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	69fa      	ldr	r2, [r7, #28]
 8001bbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bc2:	f043 030b 	orr.w	r3, r3, #11
 8001bc6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	69fa      	ldr	r2, [r7, #28]
 8001bd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bd6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001bda:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001bea:	461a      	mov	r2, r3
 8001bec:	f002 ff9e 	bl	8004b2c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	695a      	ldr	r2, [r3, #20]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001bfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f002 fecd 	bl	80049a4 <USB_ReadInterrupts>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c14:	d123      	bne.n	8001c5e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f002 ff63 	bl	8004ae6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f002 f81a 	bl	8003c5e <USB_GetDevSpeed>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681c      	ldr	r4, [r3, #0]
 8001c36:	f001 f9c9 	bl	8002fcc <HAL_RCC_GetHCLKFreq>
 8001c3a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c40:	461a      	mov	r2, r3
 8001c42:	4620      	mov	r0, r4
 8001c44:	f001 fd1e 	bl	8003684 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f005 fa1a 	bl	8007082 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	695a      	ldr	r2, [r3, #20]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001c5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f002 fe9e 	bl	80049a4 <USB_ReadInterrupts>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d10a      	bne.n	8001c88 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f005 f9f7 	bl	8007066 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	695a      	ldr	r2, [r3, #20]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f002 0208 	and.w	r2, r2, #8
 8001c86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f002 fe89 	bl	80049a4 <USB_ReadInterrupts>
 8001c92:	4603      	mov	r3, r0
 8001c94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c98:	2b80      	cmp	r3, #128	@ 0x80
 8001c9a:	d123      	bne.n	8001ce4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ca8:	2301      	movs	r3, #1
 8001caa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cac:	e014      	b.n	8001cd8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	440b      	add	r3, r1
 8001cbc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d105      	bne.n	8001cd2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	4619      	mov	r1, r3
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 fb0a 	bl	80022e6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	791b      	ldrb	r3, [r3, #4]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d3e4      	bcc.n	8001cae <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f002 fe5b 	bl	80049a4 <USB_ReadInterrupts>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cf4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001cf8:	d13c      	bne.n	8001d74 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cfe:	e02b      	b.n	8001d58 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d02:	015a      	lsls	r2, r3, #5
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	4413      	add	r3, r2
 8001d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d14:	4613      	mov	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4413      	add	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	3318      	adds	r3, #24
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d115      	bne.n	8001d52 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001d26:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	da12      	bge.n	8001d52 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d30:	4613      	mov	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4413      	add	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	3317      	adds	r3, #23
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 faca 	bl	80022e6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d54:	3301      	adds	r3, #1
 8001d56:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	791b      	ldrb	r3, [r3, #4]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d3cd      	bcc.n	8001d00 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695a      	ldr	r2, [r3, #20]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001d72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f002 fe13 	bl	80049a4 <USB_ReadInterrupts>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001d88:	d156      	bne.n	8001e38 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d8e:	e045      	b.n	8001e1c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d92:	015a      	lsls	r2, r3, #5
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	4413      	add	r3, r2
 8001d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001da4:	4613      	mov	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4413      	add	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	440b      	add	r3, r1
 8001dae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d12e      	bne.n	8001e16 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001db8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	da2b      	bge.n	8001e16 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001dca:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d121      	bne.n	8001e16 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	4413      	add	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	440b      	add	r3, r1
 8001de0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001de4:	2201      	movs	r2, #1
 8001de6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001de8:	6a3b      	ldr	r3, [r7, #32]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10a      	bne.n	8001e16 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	69fa      	ldr	r2, [r7, #28]
 8001e0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e12:	6053      	str	r3, [r2, #4]
            break;
 8001e14:	e008      	b.n	8001e28 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e18:	3301      	adds	r3, #1
 8001e1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	791b      	ldrb	r3, [r3, #4]
 8001e20:	461a      	mov	r2, r3
 8001e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d3b3      	bcc.n	8001d90 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695a      	ldr	r2, [r3, #20]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001e36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f002 fdb1 	bl	80049a4 <USB_ReadInterrupts>
 8001e42:	4603      	mov	r3, r0
 8001e44:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001e48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e4c:	d10a      	bne.n	8001e64 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f005 f998 	bl	8007184 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695a      	ldr	r2, [r3, #20]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001e62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f002 fd9b 	bl	80049a4 <USB_ReadInterrupts>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d115      	bne.n	8001ea4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f005 f988 	bl	80071a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6859      	ldr	r1, [r3, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	e000      	b.n	8001ea4 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001ea2:	bf00      	nop
    }
  }
}
 8001ea4:	3734      	adds	r7, #52	@ 0x34
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd90      	pop	{r4, r7, pc}

08001eaa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d101      	bne.n	8001ec4 <HAL_PCD_SetAddress+0x1a>
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e012      	b.n	8001eea <HAL_PCD_SetAddress+0x40>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	78fa      	ldrb	r2, [r7, #3]
 8001ed0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	78fa      	ldrb	r2, [r7, #3]
 8001ed8:	4611      	mov	r1, r2
 8001eda:	4618      	mov	r0, r3
 8001edc:	f002 fcfa 	bl	80048d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b084      	sub	sp, #16
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	4608      	mov	r0, r1
 8001efc:	4611      	mov	r1, r2
 8001efe:	461a      	mov	r2, r3
 8001f00:	4603      	mov	r3, r0
 8001f02:	70fb      	strb	r3, [r7, #3]
 8001f04:	460b      	mov	r3, r1
 8001f06:	803b      	strh	r3, [r7, #0]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	da0f      	bge.n	8001f38 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	f003 020f 	and.w	r2, r3, #15
 8001f1e:	4613      	mov	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	4413      	add	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	3310      	adds	r3, #16
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2201      	movs	r2, #1
 8001f34:	705a      	strb	r2, [r3, #1]
 8001f36:	e00f      	b.n	8001f58 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	f003 020f 	and.w	r2, r3, #15
 8001f3e:	4613      	mov	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	4413      	add	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3304      	adds	r3, #4
 8001f50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001f64:	883b      	ldrh	r3, [r7, #0]
 8001f66:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	78ba      	ldrb	r2, [r7, #2]
 8001f72:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	785b      	ldrb	r3, [r3, #1]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d004      	beq.n	8001f86 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	461a      	mov	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f86:	78bb      	ldrb	r3, [r7, #2]
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d102      	bne.n	8001f92 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_PCD_EP_Open+0xae>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e00e      	b.n	8001fbe <HAL_PCD_EP_Open+0xcc>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68f9      	ldr	r1, [r7, #12]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f001 fe7a 	bl	8003ca8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001fbc:	7afb      	ldrb	r3, [r7, #11]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b084      	sub	sp, #16
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	460b      	mov	r3, r1
 8001fd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	da0f      	bge.n	8001ffa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	f003 020f 	and.w	r2, r3, #15
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	3310      	adds	r3, #16
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	3304      	adds	r3, #4
 8001ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	705a      	strb	r2, [r3, #1]
 8001ff8:	e00f      	b.n	800201a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ffa:	78fb      	ldrb	r3, [r7, #3]
 8001ffc:	f003 020f 	and.w	r2, r3, #15
 8002000:	4613      	mov	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4413      	add	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	4413      	add	r3, r2
 8002010:	3304      	adds	r3, #4
 8002012:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800201a:	78fb      	ldrb	r3, [r7, #3]
 800201c:	f003 030f 	and.w	r3, r3, #15
 8002020:	b2da      	uxtb	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <HAL_PCD_EP_Close+0x6e>
 8002030:	2302      	movs	r3, #2
 8002032:	e00e      	b.n	8002052 <HAL_PCD_EP_Close+0x8c>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68f9      	ldr	r1, [r7, #12]
 8002042:	4618      	mov	r0, r3
 8002044:	f001 feb8 	bl	8003db8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b086      	sub	sp, #24
 800205e:	af00      	add	r7, sp, #0
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	603b      	str	r3, [r7, #0]
 8002066:	460b      	mov	r3, r1
 8002068:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800206a:	7afb      	ldrb	r3, [r7, #11]
 800206c:	f003 020f 	and.w	r2, r3, #15
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	4413      	add	r3, r2
 8002080:	3304      	adds	r3, #4
 8002082:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	2200      	movs	r2, #0
 8002094:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	2200      	movs	r2, #0
 800209a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800209c:	7afb      	ldrb	r3, [r7, #11]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	799b      	ldrb	r3, [r3, #6]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d102      	bne.n	80020b6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6818      	ldr	r0, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	799b      	ldrb	r3, [r3, #6]
 80020be:	461a      	mov	r2, r3
 80020c0:	6979      	ldr	r1, [r7, #20]
 80020c2:	f001 ff55 	bl	8003f70 <USB_EPStartXfer>

  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	f003 020f 	and.w	r2, r3, #15
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	607a      	str	r2, [r7, #4]
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	460b      	mov	r3, r1
 800210e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002110:	7afb      	ldrb	r3, [r7, #11]
 8002112:	f003 020f 	and.w	r2, r3, #15
 8002116:	4613      	mov	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4413      	add	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	3310      	adds	r3, #16
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4413      	add	r3, r2
 8002124:	3304      	adds	r3, #4
 8002126:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2200      	movs	r2, #0
 8002138:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2201      	movs	r2, #1
 800213e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002140:	7afb      	ldrb	r3, [r7, #11]
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	b2da      	uxtb	r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	799b      	ldrb	r3, [r3, #6]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d102      	bne.n	800215a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	799b      	ldrb	r3, [r3, #6]
 8002162:	461a      	mov	r2, r3
 8002164:	6979      	ldr	r1, [r7, #20]
 8002166:	f001 ff03 	bl	8003f70 <USB_EPStartXfer>

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	7912      	ldrb	r2, [r2, #4]
 800218a:	4293      	cmp	r3, r2
 800218c:	d901      	bls.n	8002192 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e04f      	b.n	8002232 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002192:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002196:	2b00      	cmp	r3, #0
 8002198:	da0f      	bge.n	80021ba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800219a:	78fb      	ldrb	r3, [r7, #3]
 800219c:	f003 020f 	and.w	r2, r3, #15
 80021a0:	4613      	mov	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	3310      	adds	r3, #16
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	3304      	adds	r3, #4
 80021b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2201      	movs	r2, #1
 80021b6:	705a      	strb	r2, [r3, #1]
 80021b8:	e00d      	b.n	80021d6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021ba:	78fa      	ldrb	r2, [r7, #3]
 80021bc:	4613      	mov	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	4413      	add	r3, r2
 80021cc:	3304      	adds	r3, #4
 80021ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2201      	movs	r2, #1
 80021da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d101      	bne.n	80021f6 <HAL_PCD_EP_SetStall+0x82>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e01d      	b.n	8002232 <HAL_PCD_EP_SetStall+0xbe>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68f9      	ldr	r1, [r7, #12]
 8002204:	4618      	mov	r0, r3
 8002206:	f002 fa91 	bl	800472c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	2b00      	cmp	r3, #0
 8002212:	d109      	bne.n	8002228 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	7999      	ldrb	r1, [r3, #6]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002222:	461a      	mov	r2, r3
 8002224:	f002 fc82 	bl	8004b2c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b084      	sub	sp, #16
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	460b      	mov	r3, r1
 8002244:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002246:	78fb      	ldrb	r3, [r7, #3]
 8002248:	f003 030f 	and.w	r3, r3, #15
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	7912      	ldrb	r2, [r2, #4]
 8002250:	4293      	cmp	r3, r2
 8002252:	d901      	bls.n	8002258 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e042      	b.n	80022de <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002258:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800225c:	2b00      	cmp	r3, #0
 800225e:	da0f      	bge.n	8002280 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	f003 020f 	and.w	r2, r3, #15
 8002266:	4613      	mov	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	4413      	add	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	3310      	adds	r3, #16
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	4413      	add	r3, r2
 8002274:	3304      	adds	r3, #4
 8002276:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2201      	movs	r2, #1
 800227c:	705a      	strb	r2, [r3, #1]
 800227e:	e00f      	b.n	80022a0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	f003 020f 	and.w	r2, r3, #15
 8002286:	4613      	mov	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4413      	add	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	4413      	add	r3, r2
 8002296:	3304      	adds	r3, #4
 8002298:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022a6:	78fb      	ldrb	r3, [r7, #3]
 80022a8:	f003 030f 	and.w	r3, r3, #15
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <HAL_PCD_EP_ClrStall+0x86>
 80022bc:	2302      	movs	r3, #2
 80022be:	e00e      	b.n	80022de <HAL_PCD_EP_ClrStall+0xa4>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68f9      	ldr	r1, [r7, #12]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f002 fa9a 	bl	8004808 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b084      	sub	sp, #16
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	460b      	mov	r3, r1
 80022f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80022f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	da0c      	bge.n	8002314 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022fa:	78fb      	ldrb	r3, [r7, #3]
 80022fc:	f003 020f 	and.w	r2, r3, #15
 8002300:	4613      	mov	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	4413      	add	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	3310      	adds	r3, #16
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	3304      	adds	r3, #4
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	e00c      	b.n	800232e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002314:	78fb      	ldrb	r3, [r7, #3]
 8002316:	f003 020f 	and.w	r2, r3, #15
 800231a:	4613      	mov	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	4413      	add	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	4413      	add	r3, r2
 800232a:	3304      	adds	r3, #4
 800232c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68f9      	ldr	r1, [r7, #12]
 8002334:	4618      	mov	r0, r3
 8002336:	f002 f8b9 	bl	80044ac <USB_EPStopXfer>
 800233a:	4603      	mov	r3, r0
 800233c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800233e:	7afb      	ldrb	r3, [r7, #11]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	@ 0x28
 800234c:	af02      	add	r7, sp, #8
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	4613      	mov	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4413      	add	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	3310      	adds	r3, #16
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	4413      	add	r3, r2
 800236c:	3304      	adds	r3, #4
 800236e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	695a      	ldr	r2, [r3, #20]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	429a      	cmp	r2, r3
 800237a:	d901      	bls.n	8002380 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e06b      	b.n	8002458 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	69fa      	ldr	r2, [r7, #28]
 8002392:	429a      	cmp	r2, r3
 8002394:	d902      	bls.n	800239c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	3303      	adds	r3, #3
 80023a0:	089b      	lsrs	r3, r3, #2
 80023a2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023a4:	e02a      	b.n	80023fc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	691a      	ldr	r2, [r3, #16]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	69fa      	ldr	r2, [r7, #28]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d902      	bls.n	80023c2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3303      	adds	r3, #3
 80023c6:	089b      	lsrs	r3, r3, #2
 80023c8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	68d9      	ldr	r1, [r3, #12]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	4603      	mov	r3, r0
 80023de:	6978      	ldr	r0, [r7, #20]
 80023e0:	f002 f90e 	bl	8004600 <USB_WritePacket>

    ep->xfer_buff  += len;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	68da      	ldr	r2, [r3, #12]
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	441a      	add	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	695a      	ldr	r2, [r3, #20]
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	441a      	add	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	015a      	lsls	r2, r3, #5
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4413      	add	r3, r2
 8002404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	429a      	cmp	r2, r3
 8002410:	d809      	bhi.n	8002426 <PCD_WriteEmptyTxFifo+0xde>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	695a      	ldr	r2, [r3, #20]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800241a:	429a      	cmp	r2, r3
 800241c:	d203      	bcs.n	8002426 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1bf      	bne.n	80023a6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	691a      	ldr	r2, [r3, #16]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	429a      	cmp	r2, r3
 8002430:	d811      	bhi.n	8002456 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	2201      	movs	r2, #1
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002446:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	43db      	mvns	r3, r3
 800244c:	6939      	ldr	r1, [r7, #16]
 800244e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002452:	4013      	ands	r3, r2
 8002454:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3720      	adds	r7, #32
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	333c      	adds	r3, #60	@ 0x3c
 8002478:	3304      	adds	r3, #4
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	015a      	lsls	r2, r3, #5
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	4413      	add	r3, r2
 8002486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	799b      	ldrb	r3, [r3, #6]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d17b      	bne.n	800258e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	2b00      	cmp	r3, #0
 800249e:	d015      	beq.n	80024cc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	4a61      	ldr	r2, [pc, #388]	@ (8002628 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	f240 80b9 	bls.w	800261c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 80b3 	beq.w	800261c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024c2:	461a      	mov	r2, r3
 80024c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024c8:	6093      	str	r3, [r2, #8]
 80024ca:	e0a7      	b.n	800261c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	f003 0320 	and.w	r3, r3, #32
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d009      	beq.n	80024ea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024e2:	461a      	mov	r2, r3
 80024e4:	2320      	movs	r3, #32
 80024e6:	6093      	str	r3, [r2, #8]
 80024e8:	e098      	b.n	800261c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f040 8093 	bne.w	800261c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002628 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d90f      	bls.n	800251e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00a      	beq.n	800251e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	4413      	add	r3, r2
 8002510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002514:	461a      	mov	r2, r3
 8002516:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800251a:	6093      	str	r3, [r2, #8]
 800251c:	e07e      	b.n	800261c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	4613      	mov	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	4413      	add	r3, r2
 8002530:	3304      	adds	r3, #4
 8002532:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a1a      	ldr	r2, [r3, #32]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	0159      	lsls	r1, r3, #5
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	440b      	add	r3, r1
 8002540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254a:	1ad2      	subs	r2, r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d114      	bne.n	8002580 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d109      	bne.n	8002572 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002568:	461a      	mov	r2, r3
 800256a:	2101      	movs	r1, #1
 800256c:	f002 fade 	bl	8004b2c <USB_EP0_OutStart>
 8002570:	e006      	b.n	8002580 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	441a      	add	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	b2db      	uxtb	r3, r3
 8002584:	4619      	mov	r1, r3
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f004 fd38 	bl	8006ffc <HAL_PCD_DataOutStageCallback>
 800258c:	e046      	b.n	800261c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	4a26      	ldr	r2, [pc, #152]	@ (800262c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d124      	bne.n	80025e0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00a      	beq.n	80025b6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025ac:	461a      	mov	r2, r3
 80025ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025b2:	6093      	str	r3, [r2, #8]
 80025b4:	e032      	b.n	800261c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	015a      	lsls	r2, r3, #5
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	4413      	add	r3, r2
 80025c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025cc:	461a      	mov	r2, r3
 80025ce:	2320      	movs	r3, #32
 80025d0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	4619      	mov	r1, r3
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f004 fd0f 	bl	8006ffc <HAL_PCD_DataOutStageCallback>
 80025de:	e01d      	b.n	800261c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d114      	bne.n	8002610 <PCD_EP_OutXfrComplete_int+0x1b0>
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	4613      	mov	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d108      	bne.n	8002610 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002608:	461a      	mov	r2, r3
 800260a:	2100      	movs	r1, #0
 800260c:	f002 fa8e 	bl	8004b2c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	b2db      	uxtb	r3, r3
 8002614:	4619      	mov	r1, r3
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f004 fcf0 	bl	8006ffc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3720      	adds	r7, #32
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	4f54300a 	.word	0x4f54300a
 800262c:	4f54310a 	.word	0x4f54310a

08002630 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	333c      	adds	r3, #60	@ 0x3c
 8002648:	3304      	adds	r3, #4
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4413      	add	r3, r2
 8002656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4a15      	ldr	r2, [pc, #84]	@ (80026b8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d90e      	bls.n	8002684 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800266c:	2b00      	cmp	r3, #0
 800266e:	d009      	beq.n	8002684 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4413      	add	r3, r2
 8002678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800267c:	461a      	mov	r2, r3
 800267e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002682:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f004 fca7 	bl	8006fd8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4a0a      	ldr	r2, [pc, #40]	@ (80026b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d90c      	bls.n	80026ac <PCD_EP_OutSetupPacket_int+0x7c>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	799b      	ldrb	r3, [r3, #6]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d108      	bne.n	80026ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026a4:	461a      	mov	r2, r3
 80026a6:	2101      	movs	r1, #1
 80026a8:	f002 fa40 	bl	8004b2c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	4f54300a 	.word	0x4f54300a

080026bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	70fb      	strb	r3, [r7, #3]
 80026c8:	4613      	mov	r3, r2
 80026ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80026d4:	78fb      	ldrb	r3, [r7, #3]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d107      	bne.n	80026ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80026da:	883b      	ldrh	r3, [r7, #0]
 80026dc:	0419      	lsls	r1, r3, #16
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80026e8:	e028      	b.n	800273c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f0:	0c1b      	lsrs	r3, r3, #16
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	4413      	add	r3, r2
 80026f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026f8:	2300      	movs	r3, #0
 80026fa:	73fb      	strb	r3, [r7, #15]
 80026fc:	e00d      	b.n	800271a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	3340      	adds	r3, #64	@ 0x40
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	0c1b      	lsrs	r3, r3, #16
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	4413      	add	r3, r2
 8002712:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	3301      	adds	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
 800271a:	7bfa      	ldrb	r2, [r7, #15]
 800271c:	78fb      	ldrb	r3, [r7, #3]
 800271e:	3b01      	subs	r3, #1
 8002720:	429a      	cmp	r2, r3
 8002722:	d3ec      	bcc.n	80026fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002724:	883b      	ldrh	r3, [r7, #0]
 8002726:	0418      	lsls	r0, r3, #16
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6819      	ldr	r1, [r3, #0]
 800272c:	78fb      	ldrb	r3, [r7, #3]
 800272e:	3b01      	subs	r3, #1
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	4302      	orrs	r2, r0
 8002734:	3340      	adds	r3, #64	@ 0x40
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	460b      	mov	r3, r1
 8002754:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	887a      	ldrh	r2, [r7, #2]
 800275c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e267      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d075      	beq.n	800288e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027a2:	4b88      	ldr	r3, [pc, #544]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d00c      	beq.n	80027c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ae:	4b85      	ldr	r3, [pc, #532]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d112      	bne.n	80027e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ba:	4b82      	ldr	r3, [pc, #520]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027c6:	d10b      	bne.n	80027e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c8:	4b7e      	ldr	r3, [pc, #504]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d05b      	beq.n	800288c <HAL_RCC_OscConfig+0x108>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d157      	bne.n	800288c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e242      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027e8:	d106      	bne.n	80027f8 <HAL_RCC_OscConfig+0x74>
 80027ea:	4b76      	ldr	r3, [pc, #472]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a75      	ldr	r2, [pc, #468]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	e01d      	b.n	8002834 <HAL_RCC_OscConfig+0xb0>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002800:	d10c      	bne.n	800281c <HAL_RCC_OscConfig+0x98>
 8002802:	4b70      	ldr	r3, [pc, #448]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a6f      	ldr	r2, [pc, #444]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002808:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	4b6d      	ldr	r3, [pc, #436]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a6c      	ldr	r2, [pc, #432]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002814:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e00b      	b.n	8002834 <HAL_RCC_OscConfig+0xb0>
 800281c:	4b69      	ldr	r3, [pc, #420]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a68      	ldr	r2, [pc, #416]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002822:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	4b66      	ldr	r3, [pc, #408]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a65      	ldr	r2, [pc, #404]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 800282e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d013      	beq.n	8002864 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7fe f914 	bl	8000a68 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002844:	f7fe f910 	bl	8000a68 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b64      	cmp	r3, #100	@ 0x64
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e207      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002856:	4b5b      	ldr	r3, [pc, #364]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f0      	beq.n	8002844 <HAL_RCC_OscConfig+0xc0>
 8002862:	e014      	b.n	800288e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002864:	f7fe f900 	bl	8000a68 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800286c:	f7fe f8fc 	bl	8000a68 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b64      	cmp	r3, #100	@ 0x64
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e1f3      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287e:	4b51      	ldr	r3, [pc, #324]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0xe8>
 800288a:	e000      	b.n	800288e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d063      	beq.n	8002962 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800289a:	4b4a      	ldr	r3, [pc, #296]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00b      	beq.n	80028be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028a6:	4b47      	ldr	r3, [pc, #284]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d11c      	bne.n	80028ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028b2:	4b44      	ldr	r3, [pc, #272]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d116      	bne.n	80028ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028be:	4b41      	ldr	r3, [pc, #260]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d005      	beq.n	80028d6 <HAL_RCC_OscConfig+0x152>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d001      	beq.n	80028d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e1c7      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d6:	4b3b      	ldr	r3, [pc, #236]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	4937      	ldr	r1, [pc, #220]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ea:	e03a      	b.n	8002962 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d020      	beq.n	8002936 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028f4:	4b34      	ldr	r3, [pc, #208]	@ (80029c8 <HAL_RCC_OscConfig+0x244>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fa:	f7fe f8b5 	bl	8000a68 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002902:	f7fe f8b1 	bl	8000a68 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e1a8      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002914:	4b2b      	ldr	r3, [pc, #172]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0f0      	beq.n	8002902 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002920:	4b28      	ldr	r3, [pc, #160]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	4925      	ldr	r1, [pc, #148]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002930:	4313      	orrs	r3, r2
 8002932:	600b      	str	r3, [r1, #0]
 8002934:	e015      	b.n	8002962 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002936:	4b24      	ldr	r3, [pc, #144]	@ (80029c8 <HAL_RCC_OscConfig+0x244>)
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7fe f894 	bl	8000a68 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002944:	f7fe f890 	bl	8000a68 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e187      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002956:	4b1b      	ldr	r3, [pc, #108]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b00      	cmp	r3, #0
 800296c:	d036      	beq.n	80029dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d016      	beq.n	80029a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002976:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <HAL_RCC_OscConfig+0x248>)
 8002978:	2201      	movs	r2, #1
 800297a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297c:	f7fe f874 	bl	8000a68 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002984:	f7fe f870 	bl	8000a68 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e167      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002996:	4b0b      	ldr	r3, [pc, #44]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002998:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0x200>
 80029a2:	e01b      	b.n	80029dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029a4:	4b09      	ldr	r3, [pc, #36]	@ (80029cc <HAL_RCC_OscConfig+0x248>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029aa:	f7fe f85d 	bl	8000a68 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b0:	e00e      	b.n	80029d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b2:	f7fe f859 	bl	8000a68 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d907      	bls.n	80029d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e150      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
 80029c4:	40023800 	.word	0x40023800
 80029c8:	42470000 	.word	0x42470000
 80029cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d0:	4b88      	ldr	r3, [pc, #544]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 80029d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1ea      	bne.n	80029b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 8097 	beq.w	8002b18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ea:	2300      	movs	r3, #0
 80029ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ee:	4b81      	ldr	r3, [pc, #516]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10f      	bne.n	8002a1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	4b7d      	ldr	r3, [pc, #500]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a02:	4a7c      	ldr	r2, [pc, #496]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a08:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a0a:	4b7a      	ldr	r3, [pc, #488]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a16:	2301      	movs	r3, #1
 8002a18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1a:	4b77      	ldr	r3, [pc, #476]	@ (8002bf8 <HAL_RCC_OscConfig+0x474>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d118      	bne.n	8002a58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a26:	4b74      	ldr	r3, [pc, #464]	@ (8002bf8 <HAL_RCC_OscConfig+0x474>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a73      	ldr	r2, [pc, #460]	@ (8002bf8 <HAL_RCC_OscConfig+0x474>)
 8002a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a32:	f7fe f819 	bl	8000a68 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a3a:	f7fe f815 	bl	8000a68 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e10c      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4c:	4b6a      	ldr	r3, [pc, #424]	@ (8002bf8 <HAL_RCC_OscConfig+0x474>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f0      	beq.n	8002a3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d106      	bne.n	8002a6e <HAL_RCC_OscConfig+0x2ea>
 8002a60:	4b64      	ldr	r3, [pc, #400]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a64:	4a63      	ldr	r2, [pc, #396]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a6c:	e01c      	b.n	8002aa8 <HAL_RCC_OscConfig+0x324>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b05      	cmp	r3, #5
 8002a74:	d10c      	bne.n	8002a90 <HAL_RCC_OscConfig+0x30c>
 8002a76:	4b5f      	ldr	r3, [pc, #380]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a7a:	4a5e      	ldr	r2, [pc, #376]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a7c:	f043 0304 	orr.w	r3, r3, #4
 8002a80:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a82:	4b5c      	ldr	r3, [pc, #368]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a86:	4a5b      	ldr	r2, [pc, #364]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a8e:	e00b      	b.n	8002aa8 <HAL_RCC_OscConfig+0x324>
 8002a90:	4b58      	ldr	r3, [pc, #352]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a94:	4a57      	ldr	r2, [pc, #348]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a96:	f023 0301 	bic.w	r3, r3, #1
 8002a9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a9c:	4b55      	ldr	r3, [pc, #340]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa0:	4a54      	ldr	r2, [pc, #336]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002aa2:	f023 0304 	bic.w	r3, r3, #4
 8002aa6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d015      	beq.n	8002adc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab0:	f7fd ffda 	bl	8000a68 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab6:	e00a      	b.n	8002ace <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab8:	f7fd ffd6 	bl	8000a68 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e0cb      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ace:	4b49      	ldr	r3, [pc, #292]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0ee      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x334>
 8002ada:	e014      	b.n	8002b06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002adc:	f7fd ffc4 	bl	8000a68 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae2:	e00a      	b.n	8002afa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae4:	f7fd ffc0 	bl	8000a68 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e0b5      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002afa:	4b3e      	ldr	r3, [pc, #248]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1ee      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b06:	7dfb      	ldrb	r3, [r7, #23]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d105      	bne.n	8002b18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b0c:	4b39      	ldr	r3, [pc, #228]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b10:	4a38      	ldr	r2, [pc, #224]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002b12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 80a1 	beq.w	8002c64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b22:	4b34      	ldr	r3, [pc, #208]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d05c      	beq.n	8002be8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d141      	bne.n	8002bba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b36:	4b31      	ldr	r3, [pc, #196]	@ (8002bfc <HAL_RCC_OscConfig+0x478>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7fd ff94 	bl	8000a68 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b44:	f7fd ff90 	bl	8000a68 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e087      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b56:	4b27      	ldr	r3, [pc, #156]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69da      	ldr	r2, [r3, #28]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b70:	019b      	lsls	r3, r3, #6
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b78:	085b      	lsrs	r3, r3, #1
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	041b      	lsls	r3, r3, #16
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b84:	061b      	lsls	r3, r3, #24
 8002b86:	491b      	ldr	r1, [pc, #108]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bfc <HAL_RCC_OscConfig+0x478>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b92:	f7fd ff69 	bl	8000a68 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9a:	f7fd ff65 	bl	8000a68 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e05c      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bac:	4b11      	ldr	r3, [pc, #68]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f0      	beq.n	8002b9a <HAL_RCC_OscConfig+0x416>
 8002bb8:	e054      	b.n	8002c64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bba:	4b10      	ldr	r3, [pc, #64]	@ (8002bfc <HAL_RCC_OscConfig+0x478>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc0:	f7fd ff52 	bl	8000a68 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc8:	f7fd ff4e 	bl	8000a68 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e045      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bda:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f0      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x444>
 8002be6:	e03d      	b.n	8002c64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d107      	bne.n	8002c00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e038      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40007000 	.word	0x40007000
 8002bfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c00:	4b1b      	ldr	r3, [pc, #108]	@ (8002c70 <HAL_RCC_OscConfig+0x4ec>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d028      	beq.n	8002c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d121      	bne.n	8002c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d11a      	bne.n	8002c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c30:	4013      	ands	r3, r2
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d111      	bne.n	8002c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c46:	085b      	lsrs	r3, r3, #1
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d107      	bne.n	8002c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800

08002c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e0cc      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c88:	4b68      	ldr	r3, [pc, #416]	@ (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d90c      	bls.n	8002cb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c96:	4b65      	ldr	r3, [pc, #404]	@ (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9e:	4b63      	ldr	r3, [pc, #396]	@ (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d001      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0b8      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d020      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc8:	4b59      	ldr	r3, [pc, #356]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	4a58      	ldr	r2, [pc, #352]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ce0:	4b53      	ldr	r3, [pc, #332]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	4a52      	ldr	r2, [pc, #328]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cec:	4b50      	ldr	r3, [pc, #320]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	494d      	ldr	r1, [pc, #308]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d044      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d107      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d12:	4b47      	ldr	r3, [pc, #284]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d119      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e07f      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d003      	beq.n	8002d32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d107      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d32:	4b3f      	ldr	r3, [pc, #252]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d109      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e06f      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d42:	4b3b      	ldr	r3, [pc, #236]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e067      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d52:	4b37      	ldr	r3, [pc, #220]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f023 0203 	bic.w	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	4934      	ldr	r1, [pc, #208]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d64:	f7fd fe80 	bl	8000a68 <HAL_GetTick>
 8002d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6a:	e00a      	b.n	8002d82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d6c:	f7fd fe7c 	bl	8000a68 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e04f      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d82:	4b2b      	ldr	r3, [pc, #172]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 020c 	and.w	r2, r3, #12
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d1eb      	bne.n	8002d6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d94:	4b25      	ldr	r3, [pc, #148]	@ (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d20c      	bcs.n	8002dbc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da2:	4b22      	ldr	r3, [pc, #136]	@ (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002daa:	4b20      	ldr	r3, [pc, #128]	@ (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e032      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d008      	beq.n	8002dda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc8:	4b19      	ldr	r3, [pc, #100]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	4916      	ldr	r1, [pc, #88]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d009      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002de6:	4b12      	ldr	r3, [pc, #72]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	490e      	ldr	r1, [pc, #56]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dfa:	f000 f821 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	4b0b      	ldr	r3, [pc, #44]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	490a      	ldr	r1, [pc, #40]	@ (8002e34 <HAL_RCC_ClockConfig+0x1c0>)
 8002e0c:	5ccb      	ldrb	r3, [r1, r3]
 8002e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e12:	4a09      	ldr	r2, [pc, #36]	@ (8002e38 <HAL_RCC_ClockConfig+0x1c4>)
 8002e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e16:	4b09      	ldr	r3, [pc, #36]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fd fde0 	bl	80009e0 <HAL_InitTick>

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023c00 	.word	0x40023c00
 8002e30:	40023800 	.word	0x40023800
 8002e34:	08007610 	.word	0x08007610
 8002e38:	20000000 	.word	0x20000000
 8002e3c:	20000004 	.word	0x20000004

08002e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e44:	b090      	sub	sp, #64	@ 0x40
 8002e46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e58:	4b59      	ldr	r3, [pc, #356]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 030c 	and.w	r3, r3, #12
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d00d      	beq.n	8002e80 <HAL_RCC_GetSysClockFreq+0x40>
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	f200 80a1 	bhi.w	8002fac <HAL_RCC_GetSysClockFreq+0x16c>
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <HAL_RCC_GetSysClockFreq+0x34>
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d003      	beq.n	8002e7a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e72:	e09b      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e74:	4b53      	ldr	r3, [pc, #332]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e76:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e78:	e09b      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e7a:	4b53      	ldr	r3, [pc, #332]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e7e:	e098      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e80:	4b4f      	ldr	r3, [pc, #316]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e88:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e8a:	4b4d      	ldr	r3, [pc, #308]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d028      	beq.n	8002ee8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e96:	4b4a      	ldr	r3, [pc, #296]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	099b      	lsrs	r3, r3, #6
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	623b      	str	r3, [r7, #32]
 8002ea0:	627a      	str	r2, [r7, #36]	@ 0x24
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	4b47      	ldr	r3, [pc, #284]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002eac:	fb03 f201 	mul.w	r2, r3, r1
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	fb00 f303 	mul.w	r3, r0, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	4a43      	ldr	r2, [pc, #268]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002eba:	fba0 1202 	umull	r1, r2, r0, r2
 8002ebe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ec0:	460a      	mov	r2, r1
 8002ec2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002ec4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ec6:	4413      	add	r3, r2
 8002ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ecc:	2200      	movs	r2, #0
 8002ece:	61bb      	str	r3, [r7, #24]
 8002ed0:	61fa      	str	r2, [r7, #28]
 8002ed2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ed6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002eda:	f7fd f975 	bl	80001c8 <__aeabi_uldivmod>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ee6:	e053      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee8:	4b35      	ldr	r3, [pc, #212]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	099b      	lsrs	r3, r3, #6
 8002eee:	2200      	movs	r2, #0
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	617a      	str	r2, [r7, #20]
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002efa:	f04f 0b00 	mov.w	fp, #0
 8002efe:	4652      	mov	r2, sl
 8002f00:	465b      	mov	r3, fp
 8002f02:	f04f 0000 	mov.w	r0, #0
 8002f06:	f04f 0100 	mov.w	r1, #0
 8002f0a:	0159      	lsls	r1, r3, #5
 8002f0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f10:	0150      	lsls	r0, r2, #5
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	ebb2 080a 	subs.w	r8, r2, sl
 8002f1a:	eb63 090b 	sbc.w	r9, r3, fp
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f32:	ebb2 0408 	subs.w	r4, r2, r8
 8002f36:	eb63 0509 	sbc.w	r5, r3, r9
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	00eb      	lsls	r3, r5, #3
 8002f44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f48:	00e2      	lsls	r2, r4, #3
 8002f4a:	4614      	mov	r4, r2
 8002f4c:	461d      	mov	r5, r3
 8002f4e:	eb14 030a 	adds.w	r3, r4, sl
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	eb45 030b 	adc.w	r3, r5, fp
 8002f58:	607b      	str	r3, [r7, #4]
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f66:	4629      	mov	r1, r5
 8002f68:	028b      	lsls	r3, r1, #10
 8002f6a:	4621      	mov	r1, r4
 8002f6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f70:	4621      	mov	r1, r4
 8002f72:	028a      	lsls	r2, r1, #10
 8002f74:	4610      	mov	r0, r2
 8002f76:	4619      	mov	r1, r3
 8002f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	60fa      	str	r2, [r7, #12]
 8002f80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f84:	f7fd f920 	bl	80001c8 <__aeabi_uldivmod>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f90:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002fa0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002faa:	e002      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fac:	4b05      	ldr	r3, [pc, #20]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002fae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3740      	adds	r7, #64	@ 0x40
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	00f42400 	.word	0x00f42400
 8002fc8:	017d7840 	.word	0x017d7840

08002fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd0:	4b03      	ldr	r3, [pc, #12]	@ (8002fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	20000000 	.word	0x20000000

08002fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fe8:	f7ff fff0 	bl	8002fcc <HAL_RCC_GetHCLKFreq>
 8002fec:	4602      	mov	r2, r0
 8002fee:	4b05      	ldr	r3, [pc, #20]	@ (8003004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	0a9b      	lsrs	r3, r3, #10
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	4903      	ldr	r1, [pc, #12]	@ (8003008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ffa:	5ccb      	ldrb	r3, [r1, r3]
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003000:	4618      	mov	r0, r3
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40023800 	.word	0x40023800
 8003008:	08007620 	.word	0x08007620

0800300c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003010:	f7ff ffdc 	bl	8002fcc <HAL_RCC_GetHCLKFreq>
 8003014:	4602      	mov	r2, r0
 8003016:	4b05      	ldr	r3, [pc, #20]	@ (800302c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	0b5b      	lsrs	r3, r3, #13
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	4903      	ldr	r1, [pc, #12]	@ (8003030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003022:	5ccb      	ldrb	r3, [r1, r3]
 8003024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003028:	4618      	mov	r0, r3
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40023800 	.word	0x40023800
 8003030:	08007620 	.word	0x08007620

08003034 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e042      	b.n	80030cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d106      	bne.n	8003060 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7fd fbe0 	bl	8000820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2224      	movs	r2, #36	@ 0x24
 8003064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003076:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f82b 	bl	80030d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800308c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695a      	ldr	r2, [r3, #20]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800309c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030d8:	b0c0      	sub	sp, #256	@ 0x100
 80030da:	af00      	add	r7, sp, #0
 80030dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80030ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f0:	68d9      	ldr	r1, [r3, #12]
 80030f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	ea40 0301 	orr.w	r3, r0, r1
 80030fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	431a      	orrs	r2, r3
 800310c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	431a      	orrs	r2, r3
 8003114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	4313      	orrs	r3, r2
 800311c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800312c:	f021 010c 	bic.w	r1, r1, #12
 8003130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800313a:	430b      	orrs	r3, r1
 800313c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800313e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800314a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800314e:	6999      	ldr	r1, [r3, #24]
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	ea40 0301 	orr.w	r3, r0, r1
 800315a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800315c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	4b8f      	ldr	r3, [pc, #572]	@ (80033a0 <UART_SetConfig+0x2cc>)
 8003164:	429a      	cmp	r2, r3
 8003166:	d005      	beq.n	8003174 <UART_SetConfig+0xa0>
 8003168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	4b8d      	ldr	r3, [pc, #564]	@ (80033a4 <UART_SetConfig+0x2d0>)
 8003170:	429a      	cmp	r2, r3
 8003172:	d104      	bne.n	800317e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003174:	f7ff ff4a 	bl	800300c <HAL_RCC_GetPCLK2Freq>
 8003178:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800317c:	e003      	b.n	8003186 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800317e:	f7ff ff31 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 8003182:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003190:	f040 810c 	bne.w	80033ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003198:	2200      	movs	r2, #0
 800319a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800319e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80031a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80031a6:	4622      	mov	r2, r4
 80031a8:	462b      	mov	r3, r5
 80031aa:	1891      	adds	r1, r2, r2
 80031ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 80031ae:	415b      	adcs	r3, r3
 80031b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80031b6:	4621      	mov	r1, r4
 80031b8:	eb12 0801 	adds.w	r8, r2, r1
 80031bc:	4629      	mov	r1, r5
 80031be:	eb43 0901 	adc.w	r9, r3, r1
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031d6:	4690      	mov	r8, r2
 80031d8:	4699      	mov	r9, r3
 80031da:	4623      	mov	r3, r4
 80031dc:	eb18 0303 	adds.w	r3, r8, r3
 80031e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80031e4:	462b      	mov	r3, r5
 80031e6:	eb49 0303 	adc.w	r3, r9, r3
 80031ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80031ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80031fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80031fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003202:	460b      	mov	r3, r1
 8003204:	18db      	adds	r3, r3, r3
 8003206:	653b      	str	r3, [r7, #80]	@ 0x50
 8003208:	4613      	mov	r3, r2
 800320a:	eb42 0303 	adc.w	r3, r2, r3
 800320e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003210:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003214:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003218:	f7fc ffd6 	bl	80001c8 <__aeabi_uldivmod>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4b61      	ldr	r3, [pc, #388]	@ (80033a8 <UART_SetConfig+0x2d4>)
 8003222:	fba3 2302 	umull	r2, r3, r3, r2
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	011c      	lsls	r4, r3, #4
 800322a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800322e:	2200      	movs	r2, #0
 8003230:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003234:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003238:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800323c:	4642      	mov	r2, r8
 800323e:	464b      	mov	r3, r9
 8003240:	1891      	adds	r1, r2, r2
 8003242:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003244:	415b      	adcs	r3, r3
 8003246:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003248:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800324c:	4641      	mov	r1, r8
 800324e:	eb12 0a01 	adds.w	sl, r2, r1
 8003252:	4649      	mov	r1, r9
 8003254:	eb43 0b01 	adc.w	fp, r3, r1
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003264:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003268:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800326c:	4692      	mov	sl, r2
 800326e:	469b      	mov	fp, r3
 8003270:	4643      	mov	r3, r8
 8003272:	eb1a 0303 	adds.w	r3, sl, r3
 8003276:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800327a:	464b      	mov	r3, r9
 800327c:	eb4b 0303 	adc.w	r3, fp, r3
 8003280:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003290:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003294:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003298:	460b      	mov	r3, r1
 800329a:	18db      	adds	r3, r3, r3
 800329c:	643b      	str	r3, [r7, #64]	@ 0x40
 800329e:	4613      	mov	r3, r2
 80032a0:	eb42 0303 	adc.w	r3, r2, r3
 80032a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80032a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80032aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80032ae:	f7fc ff8b 	bl	80001c8 <__aeabi_uldivmod>
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	4611      	mov	r1, r2
 80032b8:	4b3b      	ldr	r3, [pc, #236]	@ (80033a8 <UART_SetConfig+0x2d4>)
 80032ba:	fba3 2301 	umull	r2, r3, r3, r1
 80032be:	095b      	lsrs	r3, r3, #5
 80032c0:	2264      	movs	r2, #100	@ 0x64
 80032c2:	fb02 f303 	mul.w	r3, r2, r3
 80032c6:	1acb      	subs	r3, r1, r3
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80032ce:	4b36      	ldr	r3, [pc, #216]	@ (80033a8 <UART_SetConfig+0x2d4>)
 80032d0:	fba3 2302 	umull	r2, r3, r3, r2
 80032d4:	095b      	lsrs	r3, r3, #5
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80032dc:	441c      	add	r4, r3
 80032de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032e2:	2200      	movs	r2, #0
 80032e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80032ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80032f0:	4642      	mov	r2, r8
 80032f2:	464b      	mov	r3, r9
 80032f4:	1891      	adds	r1, r2, r2
 80032f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80032f8:	415b      	adcs	r3, r3
 80032fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003300:	4641      	mov	r1, r8
 8003302:	1851      	adds	r1, r2, r1
 8003304:	6339      	str	r1, [r7, #48]	@ 0x30
 8003306:	4649      	mov	r1, r9
 8003308:	414b      	adcs	r3, r1
 800330a:	637b      	str	r3, [r7, #52]	@ 0x34
 800330c:	f04f 0200 	mov.w	r2, #0
 8003310:	f04f 0300 	mov.w	r3, #0
 8003314:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003318:	4659      	mov	r1, fp
 800331a:	00cb      	lsls	r3, r1, #3
 800331c:	4651      	mov	r1, sl
 800331e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003322:	4651      	mov	r1, sl
 8003324:	00ca      	lsls	r2, r1, #3
 8003326:	4610      	mov	r0, r2
 8003328:	4619      	mov	r1, r3
 800332a:	4603      	mov	r3, r0
 800332c:	4642      	mov	r2, r8
 800332e:	189b      	adds	r3, r3, r2
 8003330:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003334:	464b      	mov	r3, r9
 8003336:	460a      	mov	r2, r1
 8003338:	eb42 0303 	adc.w	r3, r2, r3
 800333c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800334c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003350:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003354:	460b      	mov	r3, r1
 8003356:	18db      	adds	r3, r3, r3
 8003358:	62bb      	str	r3, [r7, #40]	@ 0x28
 800335a:	4613      	mov	r3, r2
 800335c:	eb42 0303 	adc.w	r3, r2, r3
 8003360:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003362:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003366:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800336a:	f7fc ff2d 	bl	80001c8 <__aeabi_uldivmod>
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	4b0d      	ldr	r3, [pc, #52]	@ (80033a8 <UART_SetConfig+0x2d4>)
 8003374:	fba3 1302 	umull	r1, r3, r3, r2
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	2164      	movs	r1, #100	@ 0x64
 800337c:	fb01 f303 	mul.w	r3, r1, r3
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	3332      	adds	r3, #50	@ 0x32
 8003386:	4a08      	ldr	r2, [pc, #32]	@ (80033a8 <UART_SetConfig+0x2d4>)
 8003388:	fba2 2303 	umull	r2, r3, r2, r3
 800338c:	095b      	lsrs	r3, r3, #5
 800338e:	f003 0207 	and.w	r2, r3, #7
 8003392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4422      	add	r2, r4
 800339a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800339c:	e106      	b.n	80035ac <UART_SetConfig+0x4d8>
 800339e:	bf00      	nop
 80033a0:	40011000 	.word	0x40011000
 80033a4:	40011400 	.word	0x40011400
 80033a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033b0:	2200      	movs	r2, #0
 80033b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80033b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80033ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80033be:	4642      	mov	r2, r8
 80033c0:	464b      	mov	r3, r9
 80033c2:	1891      	adds	r1, r2, r2
 80033c4:	6239      	str	r1, [r7, #32]
 80033c6:	415b      	adcs	r3, r3
 80033c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033ce:	4641      	mov	r1, r8
 80033d0:	1854      	adds	r4, r2, r1
 80033d2:	4649      	mov	r1, r9
 80033d4:	eb43 0501 	adc.w	r5, r3, r1
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	00eb      	lsls	r3, r5, #3
 80033e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033e6:	00e2      	lsls	r2, r4, #3
 80033e8:	4614      	mov	r4, r2
 80033ea:	461d      	mov	r5, r3
 80033ec:	4643      	mov	r3, r8
 80033ee:	18e3      	adds	r3, r4, r3
 80033f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80033f4:	464b      	mov	r3, r9
 80033f6:	eb45 0303 	adc.w	r3, r5, r3
 80033fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80033fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800340a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	f04f 0300 	mov.w	r3, #0
 8003416:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800341a:	4629      	mov	r1, r5
 800341c:	008b      	lsls	r3, r1, #2
 800341e:	4621      	mov	r1, r4
 8003420:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003424:	4621      	mov	r1, r4
 8003426:	008a      	lsls	r2, r1, #2
 8003428:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800342c:	f7fc fecc 	bl	80001c8 <__aeabi_uldivmod>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4b60      	ldr	r3, [pc, #384]	@ (80035b8 <UART_SetConfig+0x4e4>)
 8003436:	fba3 2302 	umull	r2, r3, r3, r2
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	011c      	lsls	r4, r3, #4
 800343e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003442:	2200      	movs	r2, #0
 8003444:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003448:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800344c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003450:	4642      	mov	r2, r8
 8003452:	464b      	mov	r3, r9
 8003454:	1891      	adds	r1, r2, r2
 8003456:	61b9      	str	r1, [r7, #24]
 8003458:	415b      	adcs	r3, r3
 800345a:	61fb      	str	r3, [r7, #28]
 800345c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003460:	4641      	mov	r1, r8
 8003462:	1851      	adds	r1, r2, r1
 8003464:	6139      	str	r1, [r7, #16]
 8003466:	4649      	mov	r1, r9
 8003468:	414b      	adcs	r3, r1
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003478:	4659      	mov	r1, fp
 800347a:	00cb      	lsls	r3, r1, #3
 800347c:	4651      	mov	r1, sl
 800347e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003482:	4651      	mov	r1, sl
 8003484:	00ca      	lsls	r2, r1, #3
 8003486:	4610      	mov	r0, r2
 8003488:	4619      	mov	r1, r3
 800348a:	4603      	mov	r3, r0
 800348c:	4642      	mov	r2, r8
 800348e:	189b      	adds	r3, r3, r2
 8003490:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003494:	464b      	mov	r3, r9
 8003496:	460a      	mov	r2, r1
 8003498:	eb42 0303 	adc.w	r3, r2, r3
 800349c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80034b8:	4649      	mov	r1, r9
 80034ba:	008b      	lsls	r3, r1, #2
 80034bc:	4641      	mov	r1, r8
 80034be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034c2:	4641      	mov	r1, r8
 80034c4:	008a      	lsls	r2, r1, #2
 80034c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80034ca:	f7fc fe7d 	bl	80001c8 <__aeabi_uldivmod>
 80034ce:	4602      	mov	r2, r0
 80034d0:	460b      	mov	r3, r1
 80034d2:	4611      	mov	r1, r2
 80034d4:	4b38      	ldr	r3, [pc, #224]	@ (80035b8 <UART_SetConfig+0x4e4>)
 80034d6:	fba3 2301 	umull	r2, r3, r3, r1
 80034da:	095b      	lsrs	r3, r3, #5
 80034dc:	2264      	movs	r2, #100	@ 0x64
 80034de:	fb02 f303 	mul.w	r3, r2, r3
 80034e2:	1acb      	subs	r3, r1, r3
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	3332      	adds	r3, #50	@ 0x32
 80034e8:	4a33      	ldr	r2, [pc, #204]	@ (80035b8 <UART_SetConfig+0x4e4>)
 80034ea:	fba2 2303 	umull	r2, r3, r2, r3
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034f4:	441c      	add	r4, r3
 80034f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034fa:	2200      	movs	r2, #0
 80034fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80034fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8003500:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003504:	4642      	mov	r2, r8
 8003506:	464b      	mov	r3, r9
 8003508:	1891      	adds	r1, r2, r2
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	415b      	adcs	r3, r3
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003514:	4641      	mov	r1, r8
 8003516:	1851      	adds	r1, r2, r1
 8003518:	6039      	str	r1, [r7, #0]
 800351a:	4649      	mov	r1, r9
 800351c:	414b      	adcs	r3, r1
 800351e:	607b      	str	r3, [r7, #4]
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800352c:	4659      	mov	r1, fp
 800352e:	00cb      	lsls	r3, r1, #3
 8003530:	4651      	mov	r1, sl
 8003532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003536:	4651      	mov	r1, sl
 8003538:	00ca      	lsls	r2, r1, #3
 800353a:	4610      	mov	r0, r2
 800353c:	4619      	mov	r1, r3
 800353e:	4603      	mov	r3, r0
 8003540:	4642      	mov	r2, r8
 8003542:	189b      	adds	r3, r3, r2
 8003544:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003546:	464b      	mov	r3, r9
 8003548:	460a      	mov	r2, r1
 800354a:	eb42 0303 	adc.w	r3, r2, r3
 800354e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	663b      	str	r3, [r7, #96]	@ 0x60
 800355a:	667a      	str	r2, [r7, #100]	@ 0x64
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003568:	4649      	mov	r1, r9
 800356a:	008b      	lsls	r3, r1, #2
 800356c:	4641      	mov	r1, r8
 800356e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003572:	4641      	mov	r1, r8
 8003574:	008a      	lsls	r2, r1, #2
 8003576:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800357a:	f7fc fe25 	bl	80001c8 <__aeabi_uldivmod>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	4b0d      	ldr	r3, [pc, #52]	@ (80035b8 <UART_SetConfig+0x4e4>)
 8003584:	fba3 1302 	umull	r1, r3, r3, r2
 8003588:	095b      	lsrs	r3, r3, #5
 800358a:	2164      	movs	r1, #100	@ 0x64
 800358c:	fb01 f303 	mul.w	r3, r1, r3
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	3332      	adds	r3, #50	@ 0x32
 8003596:	4a08      	ldr	r2, [pc, #32]	@ (80035b8 <UART_SetConfig+0x4e4>)
 8003598:	fba2 2303 	umull	r2, r3, r2, r3
 800359c:	095b      	lsrs	r3, r3, #5
 800359e:	f003 020f 	and.w	r2, r3, #15
 80035a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4422      	add	r2, r4
 80035aa:	609a      	str	r2, [r3, #8]
}
 80035ac:	bf00      	nop
 80035ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80035b2:	46bd      	mov	sp, r7
 80035b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035b8:	51eb851f 	.word	0x51eb851f

080035bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035bc:	b084      	sub	sp, #16
 80035be:	b580      	push	{r7, lr}
 80035c0:	b084      	sub	sp, #16
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	f107 001c 	add.w	r0, r7, #28
 80035ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035ce:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d123      	bne.n	800361e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035da:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80035ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80035fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003602:	2b01      	cmp	r3, #1
 8003604:	d105      	bne.n	8003612 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f001 fae8 	bl	8004be8 <USB_CoreReset>
 8003618:	4603      	mov	r3, r0
 800361a:	73fb      	strb	r3, [r7, #15]
 800361c:	e01b      	b.n	8003656 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f001 fadc 	bl	8004be8 <USB_CoreReset>
 8003630:	4603      	mov	r3, r0
 8003632:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003634:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003638:	2b00      	cmp	r3, #0
 800363a:	d106      	bne.n	800364a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003640:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	639a      	str	r2, [r3, #56]	@ 0x38
 8003648:	e005      	b.n	8003656 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800364e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003656:	7fbb      	ldrb	r3, [r7, #30]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d10b      	bne.n	8003674 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f043 0206 	orr.w	r2, r3, #6
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f043 0220 	orr.w	r2, r3, #32
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003674:	7bfb      	ldrb	r3, [r7, #15]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003680:	b004      	add	sp, #16
 8003682:	4770      	bx	lr

08003684 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	4613      	mov	r3, r2
 8003690:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003692:	79fb      	ldrb	r3, [r7, #7]
 8003694:	2b02      	cmp	r3, #2
 8003696:	d165      	bne.n	8003764 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	4a41      	ldr	r2, [pc, #260]	@ (80037a0 <USB_SetTurnaroundTime+0x11c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d906      	bls.n	80036ae <USB_SetTurnaroundTime+0x2a>
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4a40      	ldr	r2, [pc, #256]	@ (80037a4 <USB_SetTurnaroundTime+0x120>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d202      	bcs.n	80036ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80036a8:	230f      	movs	r3, #15
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	e062      	b.n	8003774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4a3c      	ldr	r2, [pc, #240]	@ (80037a4 <USB_SetTurnaroundTime+0x120>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d306      	bcc.n	80036c4 <USB_SetTurnaroundTime+0x40>
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	4a3b      	ldr	r2, [pc, #236]	@ (80037a8 <USB_SetTurnaroundTime+0x124>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d202      	bcs.n	80036c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80036be:	230e      	movs	r3, #14
 80036c0:	617b      	str	r3, [r7, #20]
 80036c2:	e057      	b.n	8003774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4a38      	ldr	r2, [pc, #224]	@ (80037a8 <USB_SetTurnaroundTime+0x124>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d306      	bcc.n	80036da <USB_SetTurnaroundTime+0x56>
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	4a37      	ldr	r2, [pc, #220]	@ (80037ac <USB_SetTurnaroundTime+0x128>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d202      	bcs.n	80036da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80036d4:	230d      	movs	r3, #13
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	e04c      	b.n	8003774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	4a33      	ldr	r2, [pc, #204]	@ (80037ac <USB_SetTurnaroundTime+0x128>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d306      	bcc.n	80036f0 <USB_SetTurnaroundTime+0x6c>
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	4a32      	ldr	r2, [pc, #200]	@ (80037b0 <USB_SetTurnaroundTime+0x12c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d802      	bhi.n	80036f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80036ea:	230c      	movs	r3, #12
 80036ec:	617b      	str	r3, [r7, #20]
 80036ee:	e041      	b.n	8003774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4a2f      	ldr	r2, [pc, #188]	@ (80037b0 <USB_SetTurnaroundTime+0x12c>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d906      	bls.n	8003706 <USB_SetTurnaroundTime+0x82>
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	4a2e      	ldr	r2, [pc, #184]	@ (80037b4 <USB_SetTurnaroundTime+0x130>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d802      	bhi.n	8003706 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003700:	230b      	movs	r3, #11
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	e036      	b.n	8003774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	4a2a      	ldr	r2, [pc, #168]	@ (80037b4 <USB_SetTurnaroundTime+0x130>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d906      	bls.n	800371c <USB_SetTurnaroundTime+0x98>
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	4a29      	ldr	r2, [pc, #164]	@ (80037b8 <USB_SetTurnaroundTime+0x134>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d802      	bhi.n	800371c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003716:	230a      	movs	r3, #10
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	e02b      	b.n	8003774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	4a26      	ldr	r2, [pc, #152]	@ (80037b8 <USB_SetTurnaroundTime+0x134>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d906      	bls.n	8003732 <USB_SetTurnaroundTime+0xae>
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	4a25      	ldr	r2, [pc, #148]	@ (80037bc <USB_SetTurnaroundTime+0x138>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d202      	bcs.n	8003732 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800372c:	2309      	movs	r3, #9
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	e020      	b.n	8003774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	4a21      	ldr	r2, [pc, #132]	@ (80037bc <USB_SetTurnaroundTime+0x138>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d306      	bcc.n	8003748 <USB_SetTurnaroundTime+0xc4>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	4a20      	ldr	r2, [pc, #128]	@ (80037c0 <USB_SetTurnaroundTime+0x13c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d802      	bhi.n	8003748 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003742:	2308      	movs	r3, #8
 8003744:	617b      	str	r3, [r7, #20]
 8003746:	e015      	b.n	8003774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4a1d      	ldr	r2, [pc, #116]	@ (80037c0 <USB_SetTurnaroundTime+0x13c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d906      	bls.n	800375e <USB_SetTurnaroundTime+0xda>
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4a1c      	ldr	r2, [pc, #112]	@ (80037c4 <USB_SetTurnaroundTime+0x140>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d202      	bcs.n	800375e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003758:	2307      	movs	r3, #7
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	e00a      	b.n	8003774 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800375e:	2306      	movs	r3, #6
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	e007      	b.n	8003774 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d102      	bne.n	8003770 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800376a:	2309      	movs	r3, #9
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	e001      	b.n	8003774 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003770:	2309      	movs	r3, #9
 8003772:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	029b      	lsls	r3, r3, #10
 8003788:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800378c:	431a      	orrs	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	371c      	adds	r7, #28
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	00d8acbf 	.word	0x00d8acbf
 80037a4:	00e4e1c0 	.word	0x00e4e1c0
 80037a8:	00f42400 	.word	0x00f42400
 80037ac:	01067380 	.word	0x01067380
 80037b0:	011a499f 	.word	0x011a499f
 80037b4:	01312cff 	.word	0x01312cff
 80037b8:	014ca43f 	.word	0x014ca43f
 80037bc:	016e3600 	.word	0x016e3600
 80037c0:	01a6ab1f 	.word	0x01a6ab1f
 80037c4:	01e84800 	.word	0x01e84800

080037c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f043 0201 	orr.w	r2, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f023 0201 	bic.w	r2, r3, #1
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	460b      	mov	r3, r1
 8003816:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003828:	78fb      	ldrb	r3, [r7, #3]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d115      	bne.n	800385a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800383a:	200a      	movs	r0, #10
 800383c:	f7fd f920 	bl	8000a80 <HAL_Delay>
      ms += 10U;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	330a      	adds	r3, #10
 8003844:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f001 f93f 	bl	8004aca <USB_GetMode>
 800384c:	4603      	mov	r3, r0
 800384e:	2b01      	cmp	r3, #1
 8003850:	d01e      	beq.n	8003890 <USB_SetCurrentMode+0x84>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2bc7      	cmp	r3, #199	@ 0xc7
 8003856:	d9f0      	bls.n	800383a <USB_SetCurrentMode+0x2e>
 8003858:	e01a      	b.n	8003890 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800385a:	78fb      	ldrb	r3, [r7, #3]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d115      	bne.n	800388c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800386c:	200a      	movs	r0, #10
 800386e:	f7fd f907 	bl	8000a80 <HAL_Delay>
      ms += 10U;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	330a      	adds	r3, #10
 8003876:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f001 f926 	bl	8004aca <USB_GetMode>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <USB_SetCurrentMode+0x84>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2bc7      	cmp	r3, #199	@ 0xc7
 8003888:	d9f0      	bls.n	800386c <USB_SetCurrentMode+0x60>
 800388a:	e001      	b.n	8003890 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e005      	b.n	800389c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2bc8      	cmp	r3, #200	@ 0xc8
 8003894:	d101      	bne.n	800389a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038a4:	b084      	sub	sp, #16
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b086      	sub	sp, #24
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80038b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80038b6:	2300      	movs	r3, #0
 80038b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80038be:	2300      	movs	r3, #0
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	e009      	b.n	80038d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	3340      	adds	r3, #64	@ 0x40
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	2200      	movs	r2, #0
 80038d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	3301      	adds	r3, #1
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	2b0e      	cmp	r3, #14
 80038dc:	d9f2      	bls.n	80038c4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80038de:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d11c      	bne.n	8003920 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038f4:	f043 0302 	orr.w	r3, r3, #2
 80038f8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038fe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800390a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003916:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	639a      	str	r2, [r3, #56]	@ 0x38
 800391e:	e00b      	b.n	8003938 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003924:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003930:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800393e:	461a      	mov	r2, r3
 8003940:	2300      	movs	r3, #0
 8003942:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003944:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003948:	2b01      	cmp	r3, #1
 800394a:	d10d      	bne.n	8003968 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800394c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003950:	2b00      	cmp	r3, #0
 8003952:	d104      	bne.n	800395e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003954:	2100      	movs	r1, #0
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f968 	bl	8003c2c <USB_SetDevSpeed>
 800395c:	e008      	b.n	8003970 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800395e:	2101      	movs	r1, #1
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f963 	bl	8003c2c <USB_SetDevSpeed>
 8003966:	e003      	b.n	8003970 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003968:	2103      	movs	r1, #3
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f95e 	bl	8003c2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003970:	2110      	movs	r1, #16
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f8fa 	bl	8003b6c <USB_FlushTxFifo>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f924 	bl	8003bd0 <USB_FlushRxFifo>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003998:	461a      	mov	r2, r3
 800399a:	2300      	movs	r3, #0
 800399c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039a4:	461a      	mov	r2, r3
 80039a6:	2300      	movs	r3, #0
 80039a8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039b0:	461a      	mov	r2, r3
 80039b2:	2300      	movs	r3, #0
 80039b4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039b6:	2300      	movs	r3, #0
 80039b8:	613b      	str	r3, [r7, #16]
 80039ba:	e043      	b.n	8003a44 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80039ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039d2:	d118      	bne.n	8003a06 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10a      	bne.n	80039f0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039e6:	461a      	mov	r2, r3
 80039e8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	e013      	b.n	8003a18 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039fc:	461a      	mov	r2, r3
 80039fe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003a02:	6013      	str	r3, [r2, #0]
 8003a04:	e008      	b.n	8003a18 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a12:	461a      	mov	r2, r3
 8003a14:	2300      	movs	r3, #0
 8003a16:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a24:	461a      	mov	r2, r3
 8003a26:	2300      	movs	r3, #0
 8003a28:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	015a      	lsls	r2, r3, #5
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a36:	461a      	mov	r2, r3
 8003a38:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	3301      	adds	r3, #1
 8003a42:	613b      	str	r3, [r7, #16]
 8003a44:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003a48:	461a      	mov	r2, r3
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d3b5      	bcc.n	80039bc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a50:	2300      	movs	r3, #0
 8003a52:	613b      	str	r3, [r7, #16]
 8003a54:	e043      	b.n	8003ade <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	015a      	lsls	r2, r3, #5
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a6c:	d118      	bne.n	8003aa0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10a      	bne.n	8003a8a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a80:	461a      	mov	r2, r3
 8003a82:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003a86:	6013      	str	r3, [r2, #0]
 8003a88:	e013      	b.n	8003ab2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a96:	461a      	mov	r2, r3
 8003a98:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	e008      	b.n	8003ab2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aac:	461a      	mov	r2, r3
 8003aae:	2300      	movs	r3, #0
 8003ab0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	015a      	lsls	r2, r3, #5
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003abe:	461a      	mov	r2, r3
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003ad6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	3301      	adds	r3, #1
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d3b5      	bcc.n	8003a56 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003af8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003afc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003b0a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b0c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d105      	bne.n	8003b20 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	f043 0210 	orr.w	r2, r3, #16
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699a      	ldr	r2, [r3, #24]
 8003b24:	4b10      	ldr	r3, [pc, #64]	@ (8003b68 <USB_DevInit+0x2c4>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b2c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	f043 0208 	orr.w	r2, r3, #8
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b40:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d107      	bne.n	8003b58 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b50:	f043 0304 	orr.w	r3, r3, #4
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b64:	b004      	add	sp, #16
 8003b66:	4770      	bx	lr
 8003b68:	803c3800 	.word	0x803c3800

08003b6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b86:	d901      	bls.n	8003b8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e01b      	b.n	8003bc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	daf2      	bge.n	8003b7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	019b      	lsls	r3, r3, #6
 8003b9c:	f043 0220 	orr.w	r2, r3, #32
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003bb0:	d901      	bls.n	8003bb6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e006      	b.n	8003bc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f003 0320 	and.w	r3, r3, #32
 8003bbe:	2b20      	cmp	r3, #32
 8003bc0:	d0f0      	beq.n	8003ba4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	3301      	adds	r3, #1
 8003be0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003be8:	d901      	bls.n	8003bee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e018      	b.n	8003c20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	daf2      	bge.n	8003bdc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2210      	movs	r2, #16
 8003bfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	3301      	adds	r3, #1
 8003c04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c0c:	d901      	bls.n	8003c12 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e006      	b.n	8003c20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f003 0310 	and.w	r3, r3, #16
 8003c1a:	2b10      	cmp	r3, #16
 8003c1c:	d0f0      	beq.n	8003c00 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	460b      	mov	r3, r1
 8003c36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	78fb      	ldrb	r3, [r7, #3]
 8003c46:	68f9      	ldr	r1, [r7, #12]
 8003c48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b087      	sub	sp, #28
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 0306 	and.w	r3, r3, #6
 8003c76:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d102      	bne.n	8003c84 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	75fb      	strb	r3, [r7, #23]
 8003c82:	e00a      	b.n	8003c9a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d002      	beq.n	8003c90 <USB_GetDevSpeed+0x32>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2b06      	cmp	r3, #6
 8003c8e:	d102      	bne.n	8003c96 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003c90:	2302      	movs	r3, #2
 8003c92:	75fb      	strb	r3, [r7, #23]
 8003c94:	e001      	b.n	8003c9a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003c96:	230f      	movs	r3, #15
 8003c98:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	371c      	adds	r7, #28
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	785b      	ldrb	r3, [r3, #1]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d13a      	bne.n	8003d3a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	f003 030f 	and.w	r3, r3, #15
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	68f9      	ldr	r1, [r7, #12]
 8003cde:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d155      	bne.n	8003da8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	015a      	lsls	r2, r3, #5
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4413      	add	r3, r2
 8003d04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	791b      	ldrb	r3, [r3, #4]
 8003d16:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d18:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	059b      	lsls	r3, r3, #22
 8003d1e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d20:	4313      	orrs	r3, r2
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	0151      	lsls	r1, r2, #5
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	440a      	add	r2, r1
 8003d2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d36:	6013      	str	r3, [r2, #0]
 8003d38:	e036      	b.n	8003da8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d40:	69da      	ldr	r2, [r3, #28]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d50:	041b      	lsls	r3, r3, #16
 8003d52:	68f9      	ldr	r1, [r7, #12]
 8003d54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d11a      	bne.n	8003da8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	791b      	ldrb	r3, [r3, #4]
 8003d8c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d8e:	430b      	orrs	r3, r1
 8003d90:	4313      	orrs	r3, r2
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	0151      	lsls	r1, r2, #5
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	440a      	add	r2, r1
 8003d9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003da2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003da6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
	...

08003db8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	785b      	ldrb	r3, [r3, #1]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d161      	bne.n	8003e98 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003de6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003dea:	d11f      	bne.n	8003e2c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	0151      	lsls	r1, r2, #5
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	440a      	add	r2, r1
 8003e02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e06:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003e0a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	0151      	lsls	r1, r2, #5
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	440a      	add	r2, r1
 8003e22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e26:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	f003 030f 	and.w	r3, r3, #15
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	43db      	mvns	r3, r3
 8003e46:	68f9      	ldr	r1, [r7, #12]
 8003e48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e56:	69da      	ldr	r2, [r3, #28]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	f003 030f 	and.w	r3, r3, #15
 8003e60:	2101      	movs	r1, #1
 8003e62:	fa01 f303 	lsl.w	r3, r1, r3
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	68f9      	ldr	r1, [r7, #12]
 8003e6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e70:	4013      	ands	r3, r2
 8003e72:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	015a      	lsls	r2, r3, #5
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	0159      	lsls	r1, r3, #5
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	440b      	add	r3, r1
 8003e8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4b35      	ldr	r3, [pc, #212]	@ (8003f68 <USB_DeactivateEndpoint+0x1b0>)
 8003e92:	4013      	ands	r3, r2
 8003e94:	600b      	str	r3, [r1, #0]
 8003e96:	e060      	b.n	8003f5a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	015a      	lsls	r2, r3, #5
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003eae:	d11f      	bne.n	8003ef0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	0151      	lsls	r1, r2, #5
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	440a      	add	r2, r1
 8003ec6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003eca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003ece:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	0151      	lsls	r1, r2, #5
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	440a      	add	r2, r1
 8003ee6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003eea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003eee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ef6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	f003 030f 	and.w	r3, r3, #15
 8003f00:	2101      	movs	r1, #1
 8003f02:	fa01 f303 	lsl.w	r3, r1, r3
 8003f06:	041b      	lsls	r3, r3, #16
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	68f9      	ldr	r1, [r7, #12]
 8003f0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f10:	4013      	ands	r3, r2
 8003f12:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f1a:	69da      	ldr	r2, [r3, #28]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	f003 030f 	and.w	r3, r3, #15
 8003f24:	2101      	movs	r1, #1
 8003f26:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2a:	041b      	lsls	r3, r3, #16
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	68f9      	ldr	r1, [r7, #12]
 8003f30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f34:	4013      	ands	r3, r2
 8003f36:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	0159      	lsls	r1, r3, #5
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	440b      	add	r3, r1
 8003f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f52:	4619      	mov	r1, r3
 8003f54:	4b05      	ldr	r3, [pc, #20]	@ (8003f6c <USB_DeactivateEndpoint+0x1b4>)
 8003f56:	4013      	ands	r3, r2
 8003f58:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	ec337800 	.word	0xec337800
 8003f6c:	eff37800 	.word	0xeff37800

08003f70 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08a      	sub	sp, #40	@ 0x28
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	785b      	ldrb	r3, [r3, #1]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	f040 817f 	bne.w	8004290 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d132      	bne.n	8004000 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	0151      	lsls	r1, r2, #5
 8003fac:	69fa      	ldr	r2, [r7, #28]
 8003fae:	440a      	add	r2, r1
 8003fb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fb4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003fb8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003fbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	015a      	lsls	r2, r3, #5
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	0151      	lsls	r1, r2, #5
 8003fd0:	69fa      	ldr	r2, [r7, #28]
 8003fd2:	440a      	add	r2, r1
 8003fd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fd8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003fdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	0151      	lsls	r1, r2, #5
 8003ff0:	69fa      	ldr	r2, [r7, #28]
 8003ff2:	440a      	add	r2, r1
 8003ff4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ff8:	0cdb      	lsrs	r3, r3, #19
 8003ffa:	04db      	lsls	r3, r3, #19
 8003ffc:	6113      	str	r3, [r2, #16]
 8003ffe:	e097      	b.n	8004130 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	4413      	add	r3, r2
 8004008:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	0151      	lsls	r1, r2, #5
 8004012:	69fa      	ldr	r2, [r7, #28]
 8004014:	440a      	add	r2, r1
 8004016:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800401a:	0cdb      	lsrs	r3, r3, #19
 800401c:	04db      	lsls	r3, r3, #19
 800401e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	0151      	lsls	r1, r2, #5
 8004032:	69fa      	ldr	r2, [r7, #28]
 8004034:	440a      	add	r2, r1
 8004036:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800403a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800403e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004042:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d11a      	bne.n	8004080 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	691a      	ldr	r2, [r3, #16]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	429a      	cmp	r2, r3
 8004054:	d903      	bls.n	800405e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	4413      	add	r3, r2
 8004066:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	0151      	lsls	r1, r2, #5
 8004070:	69fa      	ldr	r2, [r7, #28]
 8004072:	440a      	add	r2, r1
 8004074:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004078:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800407c:	6113      	str	r3, [r2, #16]
 800407e:	e044      	b.n	800410a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	691a      	ldr	r2, [r3, #16]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	4413      	add	r3, r2
 800408a:	1e5a      	subs	r2, r3, #1
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	fbb2 f3f3 	udiv	r3, r2, r3
 8004094:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	8afb      	ldrh	r3, [r7, #22]
 80040a6:	04d9      	lsls	r1, r3, #19
 80040a8:	4ba4      	ldr	r3, [pc, #656]	@ (800433c <USB_EPStartXfer+0x3cc>)
 80040aa:	400b      	ands	r3, r1
 80040ac:	69b9      	ldr	r1, [r7, #24]
 80040ae:	0148      	lsls	r0, r1, #5
 80040b0:	69f9      	ldr	r1, [r7, #28]
 80040b2:	4401      	add	r1, r0
 80040b4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80040b8:	4313      	orrs	r3, r2
 80040ba:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	791b      	ldrb	r3, [r3, #4]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d122      	bne.n	800410a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	0151      	lsls	r1, r2, #5
 80040d6:	69fa      	ldr	r2, [r7, #28]
 80040d8:	440a      	add	r2, r1
 80040da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040de:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80040e2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040f0:	691a      	ldr	r2, [r3, #16]
 80040f2:	8afb      	ldrh	r3, [r7, #22]
 80040f4:	075b      	lsls	r3, r3, #29
 80040f6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80040fa:	69b9      	ldr	r1, [r7, #24]
 80040fc:	0148      	lsls	r0, r1, #5
 80040fe:	69f9      	ldr	r1, [r7, #28]
 8004100:	4401      	add	r1, r0
 8004102:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004106:	4313      	orrs	r3, r2
 8004108:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	4413      	add	r3, r2
 8004112:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004120:	69b9      	ldr	r1, [r7, #24]
 8004122:	0148      	lsls	r0, r1, #5
 8004124:	69f9      	ldr	r1, [r7, #28]
 8004126:	4401      	add	r1, r0
 8004128:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800412c:	4313      	orrs	r3, r2
 800412e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004130:	79fb      	ldrb	r3, [r7, #7]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d14b      	bne.n	80041ce <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d009      	beq.n	8004152 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	4413      	add	r3, r2
 8004146:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800414a:	461a      	mov	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	791b      	ldrb	r3, [r3, #4]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d128      	bne.n	80041ac <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004166:	2b00      	cmp	r3, #0
 8004168:	d110      	bne.n	800418c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	4413      	add	r3, r2
 8004172:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	0151      	lsls	r1, r2, #5
 800417c:	69fa      	ldr	r2, [r7, #28]
 800417e:	440a      	add	r2, r1
 8004180:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004184:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	e00f      	b.n	80041ac <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	4413      	add	r3, r2
 8004194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	0151      	lsls	r1, r2, #5
 800419e:	69fa      	ldr	r2, [r7, #28]
 80041a0:	440a      	add	r2, r1
 80041a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041aa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	015a      	lsls	r2, r3, #5
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	4413      	add	r3, r2
 80041b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	0151      	lsls	r1, r2, #5
 80041be:	69fa      	ldr	r2, [r7, #28]
 80041c0:	440a      	add	r2, r1
 80041c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041c6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80041ca:	6013      	str	r3, [r2, #0]
 80041cc:	e166      	b.n	800449c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	0151      	lsls	r1, r2, #5
 80041e0:	69fa      	ldr	r2, [r7, #28]
 80041e2:	440a      	add	r2, r1
 80041e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041e8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80041ec:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	791b      	ldrb	r3, [r3, #4]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d015      	beq.n	8004222 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 814e 	beq.w	800449c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004206:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	2101      	movs	r1, #1
 8004212:	fa01 f303 	lsl.w	r3, r1, r3
 8004216:	69f9      	ldr	r1, [r7, #28]
 8004218:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800421c:	4313      	orrs	r3, r2
 800421e:	634b      	str	r3, [r1, #52]	@ 0x34
 8004220:	e13c      	b.n	800449c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800422e:	2b00      	cmp	r3, #0
 8004230:	d110      	bne.n	8004254 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	015a      	lsls	r2, r3, #5
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	4413      	add	r3, r2
 800423a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	0151      	lsls	r1, r2, #5
 8004244:	69fa      	ldr	r2, [r7, #28]
 8004246:	440a      	add	r2, r1
 8004248:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800424c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	e00f      	b.n	8004274 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	0151      	lsls	r1, r2, #5
 8004266:	69fa      	ldr	r2, [r7, #28]
 8004268:	440a      	add	r2, r1
 800426a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800426e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004272:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	68d9      	ldr	r1, [r3, #12]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	781a      	ldrb	r2, [r3, #0]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	b298      	uxth	r0, r3
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	4603      	mov	r3, r0
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 f9b9 	bl	8004600 <USB_WritePacket>
 800428e:	e105      	b.n	800449c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	4413      	add	r3, r2
 8004298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	0151      	lsls	r1, r2, #5
 80042a2:	69fa      	ldr	r2, [r7, #28]
 80042a4:	440a      	add	r2, r1
 80042a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042aa:	0cdb      	lsrs	r3, r3, #19
 80042ac:	04db      	lsls	r3, r3, #19
 80042ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	0151      	lsls	r1, r2, #5
 80042c2:	69fa      	ldr	r2, [r7, #28]
 80042c4:	440a      	add	r2, r1
 80042c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042ca:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80042ce:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80042d2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d132      	bne.n	8004340 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004308:	69b9      	ldr	r1, [r7, #24]
 800430a:	0148      	lsls	r0, r1, #5
 800430c:	69f9      	ldr	r1, [r7, #28]
 800430e:	4401      	add	r1, r0
 8004310:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004314:	4313      	orrs	r3, r2
 8004316:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	4413      	add	r3, r2
 8004320:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	0151      	lsls	r1, r2, #5
 800432a:	69fa      	ldr	r2, [r7, #28]
 800432c:	440a      	add	r2, r1
 800432e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004332:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004336:	6113      	str	r3, [r2, #16]
 8004338:	e062      	b.n	8004400 <USB_EPStartXfer+0x490>
 800433a:	bf00      	nop
 800433c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d123      	bne.n	8004390 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	4413      	add	r3, r2
 8004350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800435e:	69b9      	ldr	r1, [r7, #24]
 8004360:	0148      	lsls	r0, r1, #5
 8004362:	69f9      	ldr	r1, [r7, #28]
 8004364:	4401      	add	r1, r0
 8004366:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800436a:	4313      	orrs	r3, r2
 800436c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	4413      	add	r3, r2
 8004376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	0151      	lsls	r1, r2, #5
 8004380:	69fa      	ldr	r2, [r7, #28]
 8004382:	440a      	add	r2, r1
 8004384:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004388:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800438c:	6113      	str	r3, [r2, #16]
 800438e:	e037      	b.n	8004400 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	4413      	add	r3, r2
 800439a:	1e5a      	subs	r2, r3, #1
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	8afa      	ldrh	r2, [r7, #22]
 80043ac:	fb03 f202 	mul.w	r2, r3, r2
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	8afb      	ldrh	r3, [r7, #22]
 80043c4:	04d9      	lsls	r1, r3, #19
 80043c6:	4b38      	ldr	r3, [pc, #224]	@ (80044a8 <USB_EPStartXfer+0x538>)
 80043c8:	400b      	ands	r3, r1
 80043ca:	69b9      	ldr	r1, [r7, #24]
 80043cc:	0148      	lsls	r0, r1, #5
 80043ce:	69f9      	ldr	r1, [r7, #28]
 80043d0:	4401      	add	r1, r0
 80043d2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80043d6:	4313      	orrs	r3, r2
 80043d8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f0:	69b9      	ldr	r1, [r7, #24]
 80043f2:	0148      	lsls	r0, r1, #5
 80043f4:	69f9      	ldr	r1, [r7, #28]
 80043f6:	4401      	add	r1, r0
 80043f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80043fc:	4313      	orrs	r3, r2
 80043fe:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004400:	79fb      	ldrb	r3, [r7, #7]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d10d      	bne.n	8004422 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d009      	beq.n	8004422 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	68d9      	ldr	r1, [r3, #12]
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800441e:	460a      	mov	r2, r1
 8004420:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	791b      	ldrb	r3, [r3, #4]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d128      	bne.n	800447c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004436:	2b00      	cmp	r3, #0
 8004438:	d110      	bne.n	800445c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	0151      	lsls	r1, r2, #5
 800444c:	69fa      	ldr	r2, [r7, #28]
 800444e:	440a      	add	r2, r1
 8004450:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004454:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	e00f      	b.n	800447c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	4413      	add	r3, r2
 8004464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	0151      	lsls	r1, r2, #5
 800446e:	69fa      	ldr	r2, [r7, #28]
 8004470:	440a      	add	r2, r1
 8004472:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800447a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	4413      	add	r3, r2
 8004484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	0151      	lsls	r1, r2, #5
 800448e:	69fa      	ldr	r2, [r7, #28]
 8004490:	440a      	add	r2, r1
 8004492:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004496:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800449a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3720      	adds	r7, #32
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	1ff80000 	.word	0x1ff80000

080044ac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	785b      	ldrb	r3, [r3, #1]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d14a      	bne.n	8004560 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044e2:	f040 8086 	bne.w	80045f2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	7812      	ldrb	r2, [r2, #0]
 80044fa:	0151      	lsls	r1, r2, #5
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	440a      	add	r2, r1
 8004500:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004504:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004508:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	4413      	add	r3, r2
 8004514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	7812      	ldrb	r2, [r2, #0]
 800451e:	0151      	lsls	r1, r2, #5
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	440a      	add	r2, r1
 8004524:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004528:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800452c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	3301      	adds	r3, #1
 8004532:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f242 7210 	movw	r2, #10000	@ 0x2710
 800453a:	4293      	cmp	r3, r2
 800453c:	d902      	bls.n	8004544 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	75fb      	strb	r3, [r7, #23]
          break;
 8004542:	e056      	b.n	80045f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	4413      	add	r3, r2
 800454e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004558:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800455c:	d0e7      	beq.n	800452e <USB_EPStopXfer+0x82>
 800455e:	e048      	b.n	80045f2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	4413      	add	r3, r2
 800456a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004574:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004578:	d13b      	bne.n	80045f2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	4413      	add	r3, r2
 8004584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	7812      	ldrb	r2, [r2, #0]
 800458e:	0151      	lsls	r1, r2, #5
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	440a      	add	r2, r1
 8004594:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004598:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800459c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	015a      	lsls	r2, r3, #5
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	4413      	add	r3, r2
 80045a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	7812      	ldrb	r2, [r2, #0]
 80045b2:	0151      	lsls	r1, r2, #5
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	440a      	add	r2, r1
 80045b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80045c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	3301      	adds	r3, #1
 80045c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d902      	bls.n	80045d8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	75fb      	strb	r3, [r7, #23]
          break;
 80045d6:	e00c      	b.n	80045f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045f0:	d0e7      	beq.n	80045c2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80045f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	371c      	adds	r7, #28
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004600:	b480      	push	{r7}
 8004602:	b089      	sub	sp, #36	@ 0x24
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	4611      	mov	r1, r2
 800460c:	461a      	mov	r2, r3
 800460e:	460b      	mov	r3, r1
 8004610:	71fb      	strb	r3, [r7, #7]
 8004612:	4613      	mov	r3, r2
 8004614:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800461e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004622:	2b00      	cmp	r3, #0
 8004624:	d123      	bne.n	800466e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004626:	88bb      	ldrh	r3, [r7, #4]
 8004628:	3303      	adds	r3, #3
 800462a:	089b      	lsrs	r3, r3, #2
 800462c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800462e:	2300      	movs	r3, #0
 8004630:	61bb      	str	r3, [r7, #24]
 8004632:	e018      	b.n	8004666 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004634:	79fb      	ldrb	r3, [r7, #7]
 8004636:	031a      	lsls	r2, r3, #12
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	4413      	add	r3, r2
 800463c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004640:	461a      	mov	r2, r3
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	3301      	adds	r3, #1
 800464c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	3301      	adds	r3, #1
 8004652:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	3301      	adds	r3, #1
 8004658:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	3301      	adds	r3, #1
 800465e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	3301      	adds	r3, #1
 8004664:	61bb      	str	r3, [r7, #24]
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	429a      	cmp	r2, r3
 800466c:	d3e2      	bcc.n	8004634 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3724      	adds	r7, #36	@ 0x24
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800467c:	b480      	push	{r7}
 800467e:	b08b      	sub	sp, #44	@ 0x2c
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	4613      	mov	r3, r2
 8004688:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004692:	88fb      	ldrh	r3, [r7, #6]
 8004694:	089b      	lsrs	r3, r3, #2
 8004696:	b29b      	uxth	r3, r3
 8004698:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800469a:	88fb      	ldrh	r3, [r7, #6]
 800469c:	f003 0303 	and.w	r3, r3, #3
 80046a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80046a2:	2300      	movs	r3, #0
 80046a4:	623b      	str	r3, [r7, #32]
 80046a6:	e014      	b.n	80046d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80046b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b6:	3301      	adds	r3, #1
 80046b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	3301      	adds	r3, #1
 80046be:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80046c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c2:	3301      	adds	r3, #1
 80046c4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80046c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c8:	3301      	adds	r3, #1
 80046ca:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	3301      	adds	r3, #1
 80046d0:	623b      	str	r3, [r7, #32]
 80046d2:	6a3a      	ldr	r2, [r7, #32]
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d3e6      	bcc.n	80046a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80046da:	8bfb      	ldrh	r3, [r7, #30]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d01e      	beq.n	800471e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046ea:	461a      	mov	r2, r3
 80046ec:	f107 0310 	add.w	r3, r7, #16
 80046f0:	6812      	ldr	r2, [r2, #0]
 80046f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004700:	b2da      	uxtb	r2, r3
 8004702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004704:	701a      	strb	r2, [r3, #0]
      i++;
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	3301      	adds	r3, #1
 800470a:	623b      	str	r3, [r7, #32]
      pDest++;
 800470c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470e:	3301      	adds	r3, #1
 8004710:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004712:	8bfb      	ldrh	r3, [r7, #30]
 8004714:	3b01      	subs	r3, #1
 8004716:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004718:	8bfb      	ldrh	r3, [r7, #30]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1ea      	bne.n	80046f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800471e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004720:	4618      	mov	r0, r3
 8004722:	372c      	adds	r7, #44	@ 0x2c
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	785b      	ldrb	r3, [r3, #1]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d12c      	bne.n	80047a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	db12      	blt.n	8004780 <USB_EPSetStall+0x54>
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00f      	beq.n	8004780 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	0151      	lsls	r1, r2, #5
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	440a      	add	r2, r1
 8004776:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800477a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800477e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	0151      	lsls	r1, r2, #5
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	440a      	add	r2, r1
 8004796:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800479a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800479e:	6013      	str	r3, [r2, #0]
 80047a0:	e02b      	b.n	80047fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	db12      	blt.n	80047da <USB_EPSetStall+0xae>
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00f      	beq.n	80047da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	0151      	lsls	r1, r2, #5
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	440a      	add	r2, r1
 80047d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047d4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80047d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	0151      	lsls	r1, r2, #5
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	440a      	add	r2, r1
 80047f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80047f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	785b      	ldrb	r3, [r3, #1]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d128      	bne.n	8004876 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	0151      	lsls	r1, r2, #5
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	440a      	add	r2, r1
 800483a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800483e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004842:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	791b      	ldrb	r3, [r3, #4]
 8004848:	2b03      	cmp	r3, #3
 800484a:	d003      	beq.n	8004854 <USB_EPClearStall+0x4c>
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	791b      	ldrb	r3, [r3, #4]
 8004850:	2b02      	cmp	r3, #2
 8004852:	d138      	bne.n	80048c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4413      	add	r3, r2
 800485c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	0151      	lsls	r1, r2, #5
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	440a      	add	r2, r1
 800486a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800486e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004872:	6013      	str	r3, [r2, #0]
 8004874:	e027      	b.n	80048c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4413      	add	r3, r2
 800487e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	0151      	lsls	r1, r2, #5
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	440a      	add	r2, r1
 800488c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004890:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004894:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	791b      	ldrb	r3, [r3, #4]
 800489a:	2b03      	cmp	r3, #3
 800489c:	d003      	beq.n	80048a6 <USB_EPClearStall+0x9e>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	791b      	ldrb	r3, [r3, #4]
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d10f      	bne.n	80048c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	015a      	lsls	r2, r3, #5
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	4413      	add	r3, r2
 80048ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	0151      	lsls	r1, r2, #5
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	440a      	add	r2, r1
 80048bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	460b      	mov	r3, r1
 80048de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048f2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80048f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	78fb      	ldrb	r3, [r7, #3]
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004908:	68f9      	ldr	r1, [r7, #12]
 800490a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800490e:	4313      	orrs	r3, r2
 8004910:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800493a:	f023 0303 	bic.w	r3, r3, #3
 800493e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800494e:	f023 0302 	bic.w	r3, r3, #2
 8004952:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004962:	b480      	push	{r7}
 8004964:	b085      	sub	sp, #20
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800497c:	f023 0303 	bic.w	r3, r3, #3
 8004980:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004990:	f043 0302 	orr.w	r3, r3, #2
 8004994:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3714      	adds	r7, #20
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4013      	ands	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80049bc:	68fb      	ldr	r3, [r7, #12]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b085      	sub	sp, #20
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	4013      	ands	r3, r2
 80049ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	0c1b      	lsrs	r3, r3, #16
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b085      	sub	sp, #20
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	b29b      	uxth	r3, r3
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b085      	sub	sp, #20
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004a42:	78fb      	ldrb	r3, [r7, #3]
 8004a44:	015a      	lsls	r2, r3, #5
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	4413      	add	r3, r2
 8004a4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a60:	68bb      	ldr	r3, [r7, #8]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b087      	sub	sp, #28
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	460b      	mov	r3, r1
 8004a78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a90:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004a92:	78fb      	ldrb	r3, [r7, #3]
 8004a94:	f003 030f 	and.w	r3, r3, #15
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a9e:	01db      	lsls	r3, r3, #7
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004aa8:	78fb      	ldrb	r3, [r7, #3]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004abc:	68bb      	ldr	r3, [r7, #8]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	371c      	adds	r7, #28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b085      	sub	sp, #20
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b00:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004b04:	f023 0307 	bic.w	r3, r3, #7
 8004b08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	460b      	mov	r3, r1
 8004b36:	607a      	str	r2, [r7, #4]
 8004b38:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	333c      	adds	r3, #60	@ 0x3c
 8004b42:	3304      	adds	r3, #4
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	4a26      	ldr	r2, [pc, #152]	@ (8004be4 <USB_EP0_OutStart+0xb8>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d90a      	bls.n	8004b66 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b60:	d101      	bne.n	8004b66 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	e037      	b.n	8004bd6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	2300      	movs	r3, #0
 8004b70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b80:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b94:	f043 0318 	orr.w	r3, r3, #24
 8004b98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ba8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004bac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004bae:	7afb      	ldrb	r3, [r7, #11]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d10f      	bne.n	8004bd4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bba:	461a      	mov	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bce:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004bd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	371c      	adds	r7, #28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	4f54300a 	.word	0x4f54300a

08004be8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c00:	d901      	bls.n	8004c06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e01b      	b.n	8004c3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	daf2      	bge.n	8004bf4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	f043 0201 	orr.w	r2, r3, #1
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	3301      	adds	r3, #1
 8004c22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c2a:	d901      	bls.n	8004c30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e006      	b.n	8004c3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d0f0      	beq.n	8004c1e <USB_CoreReset+0x36>

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
	...

08004c4c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004c58:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004c5c:	f002 fc38 	bl	80074d0 <USBD_static_malloc>
 8004c60:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d109      	bne.n	8004c7c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	32b0      	adds	r2, #176	@ 0xb0
 8004c72:	2100      	movs	r1, #0
 8004c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004c78:	2302      	movs	r3, #2
 8004c7a:	e0d4      	b.n	8004e26 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004c7c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004c80:	2100      	movs	r1, #0
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f002 fc68 	bl	8007558 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	32b0      	adds	r2, #176	@ 0xb0
 8004c92:	68f9      	ldr	r1, [r7, #12]
 8004c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	32b0      	adds	r2, #176	@ 0xb0
 8004ca2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	7c1b      	ldrb	r3, [r3, #16]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d138      	bne.n	8004d26 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004cb4:	4b5e      	ldr	r3, [pc, #376]	@ (8004e30 <USBD_CDC_Init+0x1e4>)
 8004cb6:	7819      	ldrb	r1, [r3, #0]
 8004cb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f002 fae3 	bl	800728a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004cc4:	4b5a      	ldr	r3, [pc, #360]	@ (8004e30 <USBD_CDC_Init+0x1e4>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	f003 020f 	and.w	r2, r3, #15
 8004ccc:	6879      	ldr	r1, [r7, #4]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	440b      	add	r3, r1
 8004cd8:	3324      	adds	r3, #36	@ 0x24
 8004cda:	2201      	movs	r2, #1
 8004cdc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004cde:	4b55      	ldr	r3, [pc, #340]	@ (8004e34 <USBD_CDC_Init+0x1e8>)
 8004ce0:	7819      	ldrb	r1, [r3, #0]
 8004ce2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f002 face 	bl	800728a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004cee:	4b51      	ldr	r3, [pc, #324]	@ (8004e34 <USBD_CDC_Init+0x1e8>)
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	f003 020f 	and.w	r2, r3, #15
 8004cf6:	6879      	ldr	r1, [r7, #4]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	440b      	add	r3, r1
 8004d02:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004d06:	2201      	movs	r2, #1
 8004d08:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004d0a:	4b4b      	ldr	r3, [pc, #300]	@ (8004e38 <USBD_CDC_Init+0x1ec>)
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	f003 020f 	and.w	r2, r3, #15
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	3326      	adds	r3, #38	@ 0x26
 8004d20:	2210      	movs	r2, #16
 8004d22:	801a      	strh	r2, [r3, #0]
 8004d24:	e035      	b.n	8004d92 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004d26:	4b42      	ldr	r3, [pc, #264]	@ (8004e30 <USBD_CDC_Init+0x1e4>)
 8004d28:	7819      	ldrb	r1, [r3, #0]
 8004d2a:	2340      	movs	r3, #64	@ 0x40
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f002 faab 	bl	800728a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004d34:	4b3e      	ldr	r3, [pc, #248]	@ (8004e30 <USBD_CDC_Init+0x1e4>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	f003 020f 	and.w	r2, r3, #15
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	440b      	add	r3, r1
 8004d48:	3324      	adds	r3, #36	@ 0x24
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004d4e:	4b39      	ldr	r3, [pc, #228]	@ (8004e34 <USBD_CDC_Init+0x1e8>)
 8004d50:	7819      	ldrb	r1, [r3, #0]
 8004d52:	2340      	movs	r3, #64	@ 0x40
 8004d54:	2202      	movs	r2, #2
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f002 fa97 	bl	800728a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004d5c:	4b35      	ldr	r3, [pc, #212]	@ (8004e34 <USBD_CDC_Init+0x1e8>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	f003 020f 	and.w	r2, r3, #15
 8004d64:	6879      	ldr	r1, [r7, #4]
 8004d66:	4613      	mov	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	440b      	add	r3, r1
 8004d70:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004d74:	2201      	movs	r2, #1
 8004d76:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004d78:	4b2f      	ldr	r3, [pc, #188]	@ (8004e38 <USBD_CDC_Init+0x1ec>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	f003 020f 	and.w	r2, r3, #15
 8004d80:	6879      	ldr	r1, [r7, #4]
 8004d82:	4613      	mov	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	440b      	add	r3, r1
 8004d8c:	3326      	adds	r3, #38	@ 0x26
 8004d8e:	2210      	movs	r2, #16
 8004d90:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004d92:	4b29      	ldr	r3, [pc, #164]	@ (8004e38 <USBD_CDC_Init+0x1ec>)
 8004d94:	7819      	ldrb	r1, [r3, #0]
 8004d96:	2308      	movs	r3, #8
 8004d98:	2203      	movs	r2, #3
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f002 fa75 	bl	800728a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004da0:	4b25      	ldr	r3, [pc, #148]	@ (8004e38 <USBD_CDC_Init+0x1ec>)
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	f003 020f 	and.w	r2, r3, #15
 8004da8:	6879      	ldr	r1, [r7, #4]
 8004daa:	4613      	mov	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	440b      	add	r3, r1
 8004db4:	3324      	adds	r3, #36	@ 0x24
 8004db6:	2201      	movs	r2, #1
 8004db8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	33b0      	adds	r3, #176	@ 0xb0
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004df0:	2302      	movs	r3, #2
 8004df2:	e018      	b.n	8004e26 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	7c1b      	ldrb	r3, [r3, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10a      	bne.n	8004e12 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8004e34 <USBD_CDC_Init+0x1e8>)
 8004dfe:	7819      	ldrb	r1, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004e06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f002 fb2c 	bl	8007468 <USBD_LL_PrepareReceive>
 8004e10:	e008      	b.n	8004e24 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004e12:	4b08      	ldr	r3, [pc, #32]	@ (8004e34 <USBD_CDC_Init+0x1e8>)
 8004e14:	7819      	ldrb	r1, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004e1c:	2340      	movs	r3, #64	@ 0x40
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f002 fb22 	bl	8007468 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000093 	.word	0x20000093
 8004e34:	20000094 	.word	0x20000094
 8004e38:	20000095 	.word	0x20000095

08004e3c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	460b      	mov	r3, r1
 8004e46:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004e48:	4b3a      	ldr	r3, [pc, #232]	@ (8004f34 <USBD_CDC_DeInit+0xf8>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f002 fa41 	bl	80072d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004e54:	4b37      	ldr	r3, [pc, #220]	@ (8004f34 <USBD_CDC_DeInit+0xf8>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	f003 020f 	and.w	r2, r3, #15
 8004e5c:	6879      	ldr	r1, [r7, #4]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4413      	add	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	440b      	add	r3, r1
 8004e68:	3324      	adds	r3, #36	@ 0x24
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004e6e:	4b32      	ldr	r3, [pc, #200]	@ (8004f38 <USBD_CDC_DeInit+0xfc>)
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	4619      	mov	r1, r3
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f002 fa2e 	bl	80072d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8004f38 <USBD_CDC_DeInit+0xfc>)
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	f003 020f 	and.w	r2, r3, #15
 8004e82:	6879      	ldr	r1, [r7, #4]
 8004e84:	4613      	mov	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	440b      	add	r3, r1
 8004e8e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004e92:	2200      	movs	r2, #0
 8004e94:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004e96:	4b29      	ldr	r3, [pc, #164]	@ (8004f3c <USBD_CDC_DeInit+0x100>)
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f002 fa1a 	bl	80072d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004ea2:	4b26      	ldr	r3, [pc, #152]	@ (8004f3c <USBD_CDC_DeInit+0x100>)
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	f003 020f 	and.w	r2, r3, #15
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	3324      	adds	r3, #36	@ 0x24
 8004eb8:	2200      	movs	r2, #0
 8004eba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8004f3c <USBD_CDC_DeInit+0x100>)
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	f003 020f 	and.w	r2, r3, #15
 8004ec4:	6879      	ldr	r1, [r7, #4]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	440b      	add	r3, r1
 8004ed0:	3326      	adds	r3, #38	@ 0x26
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	32b0      	adds	r2, #176	@ 0xb0
 8004ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d01f      	beq.n	8004f28 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	33b0      	adds	r3, #176	@ 0xb0
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	32b0      	adds	r2, #176	@ 0xb0
 8004f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f002 faee 	bl	80074ec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	32b0      	adds	r2, #176	@ 0xb0
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	20000093 	.word	0x20000093
 8004f38:	20000094 	.word	0x20000094
 8004f3c:	20000095 	.word	0x20000095

08004f40 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	32b0      	adds	r2, #176	@ 0xb0
 8004f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f58:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f62:	2300      	movs	r3, #0
 8004f64:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e0bf      	b.n	80050f0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d050      	beq.n	800501e <USBD_CDC_Setup+0xde>
 8004f7c:	2b20      	cmp	r3, #32
 8004f7e:	f040 80af 	bne.w	80050e0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	88db      	ldrh	r3, [r3, #6]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d03a      	beq.n	8005000 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	b25b      	sxtb	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	da1b      	bge.n	8004fcc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	33b0      	adds	r3, #176	@ 0xb0
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004faa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	88d2      	ldrh	r2, [r2, #6]
 8004fb0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	88db      	ldrh	r3, [r3, #6]
 8004fb6:	2b07      	cmp	r3, #7
 8004fb8:	bf28      	it	cs
 8004fba:	2307      	movcs	r3, #7
 8004fbc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	89fa      	ldrh	r2, [r7, #14]
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f001 fd53 	bl	8006a70 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004fca:	e090      	b.n	80050ee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	785a      	ldrb	r2, [r3, #1]
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	88db      	ldrh	r3, [r3, #6]
 8004fda:	2b3f      	cmp	r3, #63	@ 0x3f
 8004fdc:	d803      	bhi.n	8004fe6 <USBD_CDC_Setup+0xa6>
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	88db      	ldrh	r3, [r3, #6]
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	e000      	b.n	8004fe8 <USBD_CDC_Setup+0xa8>
 8004fe6:	2240      	movs	r2, #64	@ 0x40
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004fee:	6939      	ldr	r1, [r7, #16]
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f001 fd65 	bl	8006ac8 <USBD_CtlPrepareRx>
      break;
 8004ffe:	e076      	b.n	80050ee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	33b0      	adds	r3, #176	@ 0xb0
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	7850      	ldrb	r0, [r2, #1]
 8005016:	2200      	movs	r2, #0
 8005018:	6839      	ldr	r1, [r7, #0]
 800501a:	4798      	blx	r3
      break;
 800501c:	e067      	b.n	80050ee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	785b      	ldrb	r3, [r3, #1]
 8005022:	2b0b      	cmp	r3, #11
 8005024:	d851      	bhi.n	80050ca <USBD_CDC_Setup+0x18a>
 8005026:	a201      	add	r2, pc, #4	@ (adr r2, 800502c <USBD_CDC_Setup+0xec>)
 8005028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502c:	0800505d 	.word	0x0800505d
 8005030:	080050d9 	.word	0x080050d9
 8005034:	080050cb 	.word	0x080050cb
 8005038:	080050cb 	.word	0x080050cb
 800503c:	080050cb 	.word	0x080050cb
 8005040:	080050cb 	.word	0x080050cb
 8005044:	080050cb 	.word	0x080050cb
 8005048:	080050cb 	.word	0x080050cb
 800504c:	080050cb 	.word	0x080050cb
 8005050:	080050cb 	.word	0x080050cb
 8005054:	08005087 	.word	0x08005087
 8005058:	080050b1 	.word	0x080050b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b03      	cmp	r3, #3
 8005066:	d107      	bne.n	8005078 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005068:	f107 030a 	add.w	r3, r7, #10
 800506c:	2202      	movs	r2, #2
 800506e:	4619      	mov	r1, r3
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f001 fcfd 	bl	8006a70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005076:	e032      	b.n	80050de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005078:	6839      	ldr	r1, [r7, #0]
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f001 fc7b 	bl	8006976 <USBD_CtlError>
            ret = USBD_FAIL;
 8005080:	2303      	movs	r3, #3
 8005082:	75fb      	strb	r3, [r7, #23]
          break;
 8005084:	e02b      	b.n	80050de <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b03      	cmp	r3, #3
 8005090:	d107      	bne.n	80050a2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005092:	f107 030d 	add.w	r3, r7, #13
 8005096:	2201      	movs	r2, #1
 8005098:	4619      	mov	r1, r3
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f001 fce8 	bl	8006a70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80050a0:	e01d      	b.n	80050de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80050a2:	6839      	ldr	r1, [r7, #0]
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f001 fc66 	bl	8006976 <USBD_CtlError>
            ret = USBD_FAIL;
 80050aa:	2303      	movs	r3, #3
 80050ac:	75fb      	strb	r3, [r7, #23]
          break;
 80050ae:	e016      	b.n	80050de <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b03      	cmp	r3, #3
 80050ba:	d00f      	beq.n	80050dc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80050bc:	6839      	ldr	r1, [r7, #0]
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f001 fc59 	bl	8006976 <USBD_CtlError>
            ret = USBD_FAIL;
 80050c4:	2303      	movs	r3, #3
 80050c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80050c8:	e008      	b.n	80050dc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80050ca:	6839      	ldr	r1, [r7, #0]
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f001 fc52 	bl	8006976 <USBD_CtlError>
          ret = USBD_FAIL;
 80050d2:	2303      	movs	r3, #3
 80050d4:	75fb      	strb	r3, [r7, #23]
          break;
 80050d6:	e002      	b.n	80050de <USBD_CDC_Setup+0x19e>
          break;
 80050d8:	bf00      	nop
 80050da:	e008      	b.n	80050ee <USBD_CDC_Setup+0x1ae>
          break;
 80050dc:	bf00      	nop
      }
      break;
 80050de:	e006      	b.n	80050ee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80050e0:	6839      	ldr	r1, [r7, #0]
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f001 fc47 	bl	8006976 <USBD_CtlError>
      ret = USBD_FAIL;
 80050e8:	2303      	movs	r3, #3
 80050ea:	75fb      	strb	r3, [r7, #23]
      break;
 80050ec:	bf00      	nop
  }

  return (uint8_t)ret;
 80050ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3718      	adds	r7, #24
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	460b      	mov	r3, r1
 8005102:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800510a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	32b0      	adds	r2, #176	@ 0xb0
 8005116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800511e:	2303      	movs	r3, #3
 8005120:	e065      	b.n	80051ee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	32b0      	adds	r2, #176	@ 0xb0
 800512c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005130:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005132:	78fb      	ldrb	r3, [r7, #3]
 8005134:	f003 020f 	and.w	r2, r3, #15
 8005138:	6879      	ldr	r1, [r7, #4]
 800513a:	4613      	mov	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	440b      	add	r3, r1
 8005144:	3318      	adds	r3, #24
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d02f      	beq.n	80051ac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800514c:	78fb      	ldrb	r3, [r7, #3]
 800514e:	f003 020f 	and.w	r2, r3, #15
 8005152:	6879      	ldr	r1, [r7, #4]
 8005154:	4613      	mov	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	440b      	add	r3, r1
 800515e:	3318      	adds	r3, #24
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	78fb      	ldrb	r3, [r7, #3]
 8005164:	f003 010f 	and.w	r1, r3, #15
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	460b      	mov	r3, r1
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	440b      	add	r3, r1
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4403      	add	r3, r0
 8005174:	331c      	adds	r3, #28
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	fbb2 f1f3 	udiv	r1, r2, r3
 800517c:	fb01 f303 	mul.w	r3, r1, r3
 8005180:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005182:	2b00      	cmp	r3, #0
 8005184:	d112      	bne.n	80051ac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005186:	78fb      	ldrb	r3, [r7, #3]
 8005188:	f003 020f 	and.w	r2, r3, #15
 800518c:	6879      	ldr	r1, [r7, #4]
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	440b      	add	r3, r1
 8005198:	3318      	adds	r3, #24
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800519e:	78f9      	ldrb	r1, [r7, #3]
 80051a0:	2300      	movs	r3, #0
 80051a2:	2200      	movs	r2, #0
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f002 f93e 	bl	8007426 <USBD_LL_Transmit>
 80051aa:	e01f      	b.n	80051ec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	33b0      	adds	r3, #176	@ 0xb0
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d010      	beq.n	80051ec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	33b0      	adds	r3, #176	@ 0xb0
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80051e8:	78fa      	ldrb	r2, [r7, #3]
 80051ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b084      	sub	sp, #16
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	460b      	mov	r3, r1
 8005200:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	32b0      	adds	r2, #176	@ 0xb0
 800520c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005210:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	32b0      	adds	r2, #176	@ 0xb0
 800521c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d101      	bne.n	8005228 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005224:	2303      	movs	r3, #3
 8005226:	e01a      	b.n	800525e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005228:	78fb      	ldrb	r3, [r7, #3]
 800522a:	4619      	mov	r1, r3
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f002 f93c 	bl	80074aa <USBD_LL_GetRxDataSize>
 8005232:	4602      	mov	r2, r0
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	33b0      	adds	r3, #176	@ 0xb0
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005258:	4611      	mov	r1, r2
 800525a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b084      	sub	sp, #16
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	32b0      	adds	r2, #176	@ 0xb0
 8005278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800527c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005284:	2303      	movs	r3, #3
 8005286:	e024      	b.n	80052d2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	33b0      	adds	r3, #176	@ 0xb0
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d019      	beq.n	80052d0 <USBD_CDC_EP0_RxReady+0x6a>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80052a2:	2bff      	cmp	r3, #255	@ 0xff
 80052a4:	d014      	beq.n	80052d0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	33b0      	adds	r3, #176	@ 0xb0
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80052be:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80052c6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	22ff      	movs	r2, #255	@ 0xff
 80052cc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80052e4:	2182      	movs	r1, #130	@ 0x82
 80052e6:	4818      	ldr	r0, [pc, #96]	@ (8005348 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80052e8:	f000 fd0f 	bl	8005d0a <USBD_GetEpDesc>
 80052ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80052ee:	2101      	movs	r1, #1
 80052f0:	4815      	ldr	r0, [pc, #84]	@ (8005348 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80052f2:	f000 fd0a 	bl	8005d0a <USBD_GetEpDesc>
 80052f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80052f8:	2181      	movs	r1, #129	@ 0x81
 80052fa:	4813      	ldr	r0, [pc, #76]	@ (8005348 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80052fc:	f000 fd05 	bl	8005d0a <USBD_GetEpDesc>
 8005300:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2210      	movs	r2, #16
 800530c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d006      	beq.n	8005322 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	2200      	movs	r2, #0
 8005318:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800531c:	711a      	strb	r2, [r3, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d006      	beq.n	8005336 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005330:	711a      	strb	r2, [r3, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2243      	movs	r2, #67	@ 0x43
 800533a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800533c:	4b02      	ldr	r3, [pc, #8]	@ (8005348 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800533e:	4618      	mov	r0, r3
 8005340:	3718      	adds	r7, #24
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	20000050 	.word	0x20000050

0800534c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005354:	2182      	movs	r1, #130	@ 0x82
 8005356:	4818      	ldr	r0, [pc, #96]	@ (80053b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005358:	f000 fcd7 	bl	8005d0a <USBD_GetEpDesc>
 800535c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800535e:	2101      	movs	r1, #1
 8005360:	4815      	ldr	r0, [pc, #84]	@ (80053b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005362:	f000 fcd2 	bl	8005d0a <USBD_GetEpDesc>
 8005366:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005368:	2181      	movs	r1, #129	@ 0x81
 800536a:	4813      	ldr	r0, [pc, #76]	@ (80053b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800536c:	f000 fccd 	bl	8005d0a <USBD_GetEpDesc>
 8005370:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2210      	movs	r2, #16
 800537c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d006      	beq.n	8005392 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	2200      	movs	r2, #0
 8005388:	711a      	strb	r2, [r3, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f042 0202 	orr.w	r2, r2, #2
 8005390:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d006      	beq.n	80053a6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	711a      	strb	r2, [r3, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f042 0202 	orr.w	r2, r2, #2
 80053a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2243      	movs	r2, #67	@ 0x43
 80053aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80053ac:	4b02      	ldr	r3, [pc, #8]	@ (80053b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20000050 	.word	0x20000050

080053bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80053c4:	2182      	movs	r1, #130	@ 0x82
 80053c6:	4818      	ldr	r0, [pc, #96]	@ (8005428 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80053c8:	f000 fc9f 	bl	8005d0a <USBD_GetEpDesc>
 80053cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80053ce:	2101      	movs	r1, #1
 80053d0:	4815      	ldr	r0, [pc, #84]	@ (8005428 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80053d2:	f000 fc9a 	bl	8005d0a <USBD_GetEpDesc>
 80053d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80053d8:	2181      	movs	r1, #129	@ 0x81
 80053da:	4813      	ldr	r0, [pc, #76]	@ (8005428 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80053dc:	f000 fc95 	bl	8005d0a <USBD_GetEpDesc>
 80053e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	2210      	movs	r2, #16
 80053ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d006      	beq.n	8005402 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053fc:	711a      	strb	r2, [r3, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d006      	beq.n	8005416 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005410:	711a      	strb	r2, [r3, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2243      	movs	r2, #67	@ 0x43
 800541a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800541c:	4b02      	ldr	r3, [pc, #8]	@ (8005428 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800541e:	4618      	mov	r0, r3
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20000050 	.word	0x20000050

0800542c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	220a      	movs	r2, #10
 8005438:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800543a:	4b03      	ldr	r3, [pc, #12]	@ (8005448 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800543c:	4618      	mov	r0, r3
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	2000000c 	.word	0x2000000c

0800544c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800545c:	2303      	movs	r3, #3
 800545e:	e009      	b.n	8005474 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	33b0      	adds	r3, #176	@ 0xb0
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	32b0      	adds	r2, #176	@ 0xb0
 8005496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800549a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e008      	b.n	80054b8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	371c      	adds	r7, #28
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	32b0      	adds	r2, #176	@ 0xb0
 80054d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e004      	b.n	80054f2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
	...

08005500 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	32b0      	adds	r2, #176	@ 0xb0
 8005512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005516:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	32b0      	adds	r2, #176	@ 0xb0
 8005522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d101      	bne.n	800552e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800552a:	2303      	movs	r3, #3
 800552c:	e018      	b.n	8005560 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	7c1b      	ldrb	r3, [r3, #16]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10a      	bne.n	800554c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005536:	4b0c      	ldr	r3, [pc, #48]	@ (8005568 <USBD_CDC_ReceivePacket+0x68>)
 8005538:	7819      	ldrb	r1, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005540:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f001 ff8f 	bl	8007468 <USBD_LL_PrepareReceive>
 800554a:	e008      	b.n	800555e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800554c:	4b06      	ldr	r3, [pc, #24]	@ (8005568 <USBD_CDC_ReceivePacket+0x68>)
 800554e:	7819      	ldrb	r1, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005556:	2340      	movs	r3, #64	@ 0x40
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f001 ff85 	bl	8007468 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	20000094 	.word	0x20000094

0800556c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	4613      	mov	r3, r2
 8005578:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005580:	2303      	movs	r3, #3
 8005582:	e01f      	b.n	80055c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	79fa      	ldrb	r2, [r7, #7]
 80055b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f001 fdff 	bl	80071bc <USBD_LL_Init>
 80055be:	4603      	mov	r3, r0
 80055c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80055c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3718      	adds	r7, #24
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80055d6:	2300      	movs	r3, #0
 80055d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e025      	b.n	8005630 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	32ae      	adds	r2, #174	@ 0xae
 80055f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00f      	beq.n	8005620 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	32ae      	adds	r2, #174	@ 0xae
 800560a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800560e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005610:	f107 020e 	add.w	r2, r7, #14
 8005614:	4610      	mov	r0, r2
 8005616:	4798      	blx	r3
 8005618:	4602      	mov	r2, r0
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f001 fe07 	bl	8007254 <USBD_LL_Start>
 8005646:	4603      	mov	r3, r0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005658:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800565a:	4618      	mov	r0, r3
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b084      	sub	sp, #16
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	460b      	mov	r3, r1
 8005670:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005672:	2300      	movs	r3, #0
 8005674:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800567c:	2b00      	cmp	r3, #0
 800567e:	d009      	beq.n	8005694 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	78fa      	ldrb	r2, [r7, #3]
 800568a:	4611      	mov	r1, r2
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	4798      	blx	r3
 8005690:	4603      	mov	r3, r0
 8005692:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005694:	7bfb      	ldrb	r3, [r7, #15]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b084      	sub	sp, #16
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	460b      	mov	r3, r1
 80056a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	78fa      	ldrb	r2, [r7, #3]
 80056b8:	4611      	mov	r1, r2
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	4798      	blx	r3
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d001      	beq.n	80056c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80056c4:	2303      	movs	r3, #3
 80056c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80056c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b084      	sub	sp, #16
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
 80056da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80056e2:	6839      	ldr	r1, [r7, #0]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f001 f90c 	bl	8006902 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80056f8:	461a      	mov	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005706:	f003 031f 	and.w	r3, r3, #31
 800570a:	2b02      	cmp	r3, #2
 800570c:	d01a      	beq.n	8005744 <USBD_LL_SetupStage+0x72>
 800570e:	2b02      	cmp	r3, #2
 8005710:	d822      	bhi.n	8005758 <USBD_LL_SetupStage+0x86>
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <USBD_LL_SetupStage+0x4a>
 8005716:	2b01      	cmp	r3, #1
 8005718:	d00a      	beq.n	8005730 <USBD_LL_SetupStage+0x5e>
 800571a:	e01d      	b.n	8005758 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005722:	4619      	mov	r1, r3
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 fb63 	bl	8005df0 <USBD_StdDevReq>
 800572a:	4603      	mov	r3, r0
 800572c:	73fb      	strb	r3, [r7, #15]
      break;
 800572e:	e020      	b.n	8005772 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005736:	4619      	mov	r1, r3
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 fbcb 	bl	8005ed4 <USBD_StdItfReq>
 800573e:	4603      	mov	r3, r0
 8005740:	73fb      	strb	r3, [r7, #15]
      break;
 8005742:	e016      	b.n	8005772 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800574a:	4619      	mov	r1, r3
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fc2d 	bl	8005fac <USBD_StdEPReq>
 8005752:	4603      	mov	r3, r0
 8005754:	73fb      	strb	r3, [r7, #15]
      break;
 8005756:	e00c      	b.n	8005772 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800575e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005762:	b2db      	uxtb	r3, r3
 8005764:	4619      	mov	r1, r3
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f001 fdd4 	bl	8007314 <USBD_LL_StallEP>
 800576c:	4603      	mov	r3, r0
 800576e:	73fb      	strb	r3, [r7, #15]
      break;
 8005770:	bf00      	nop
  }

  return ret;
 8005772:	7bfb      	ldrb	r3, [r7, #15]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	460b      	mov	r3, r1
 8005786:	607a      	str	r2, [r7, #4]
 8005788:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800578a:	2300      	movs	r3, #0
 800578c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800578e:	7afb      	ldrb	r3, [r7, #11]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d16e      	bne.n	8005872 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800579a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	f040 8098 	bne.w	80058d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d913      	bls.n	80057dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	1ad2      	subs	r2, r2, r3
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	68da      	ldr	r2, [r3, #12]
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	4293      	cmp	r3, r2
 80057cc:	bf28      	it	cs
 80057ce:	4613      	movcs	r3, r2
 80057d0:	461a      	mov	r2, r3
 80057d2:	6879      	ldr	r1, [r7, #4]
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f001 f994 	bl	8006b02 <USBD_CtlContinueRx>
 80057da:	e07d      	b.n	80058d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80057e2:	f003 031f 	and.w	r3, r3, #31
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d014      	beq.n	8005814 <USBD_LL_DataOutStage+0x98>
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d81d      	bhi.n	800582a <USBD_LL_DataOutStage+0xae>
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d002      	beq.n	80057f8 <USBD_LL_DataOutStage+0x7c>
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d003      	beq.n	80057fe <USBD_LL_DataOutStage+0x82>
 80057f6:	e018      	b.n	800582a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	75bb      	strb	r3, [r7, #22]
            break;
 80057fc:	e018      	b.n	8005830 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005804:	b2db      	uxtb	r3, r3
 8005806:	4619      	mov	r1, r3
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f000 fa64 	bl	8005cd6 <USBD_CoreFindIF>
 800580e:	4603      	mov	r3, r0
 8005810:	75bb      	strb	r3, [r7, #22]
            break;
 8005812:	e00d      	b.n	8005830 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800581a:	b2db      	uxtb	r3, r3
 800581c:	4619      	mov	r1, r3
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 fa66 	bl	8005cf0 <USBD_CoreFindEP>
 8005824:	4603      	mov	r3, r0
 8005826:	75bb      	strb	r3, [r7, #22]
            break;
 8005828:	e002      	b.n	8005830 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800582a:	2300      	movs	r3, #0
 800582c:	75bb      	strb	r3, [r7, #22]
            break;
 800582e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005830:	7dbb      	ldrb	r3, [r7, #22]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d119      	bne.n	800586a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b03      	cmp	r3, #3
 8005840:	d113      	bne.n	800586a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005842:	7dba      	ldrb	r2, [r7, #22]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	32ae      	adds	r2, #174	@ 0xae
 8005848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00b      	beq.n	800586a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005852:	7dba      	ldrb	r2, [r7, #22]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800585a:	7dba      	ldrb	r2, [r7, #22]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	32ae      	adds	r2, #174	@ 0xae
 8005860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f001 f95a 	bl	8006b24 <USBD_CtlSendStatus>
 8005870:	e032      	b.n	80058d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005872:	7afb      	ldrb	r3, [r7, #11]
 8005874:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005878:	b2db      	uxtb	r3, r3
 800587a:	4619      	mov	r1, r3
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 fa37 	bl	8005cf0 <USBD_CoreFindEP>
 8005882:	4603      	mov	r3, r0
 8005884:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005886:	7dbb      	ldrb	r3, [r7, #22]
 8005888:	2bff      	cmp	r3, #255	@ 0xff
 800588a:	d025      	beq.n	80058d8 <USBD_LL_DataOutStage+0x15c>
 800588c:	7dbb      	ldrb	r3, [r7, #22]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d122      	bne.n	80058d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b03      	cmp	r3, #3
 800589c:	d117      	bne.n	80058ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800589e:	7dba      	ldrb	r2, [r7, #22]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	32ae      	adds	r2, #174	@ 0xae
 80058a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00f      	beq.n	80058ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80058ae:	7dba      	ldrb	r2, [r7, #22]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80058b6:	7dba      	ldrb	r2, [r7, #22]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	32ae      	adds	r2, #174	@ 0xae
 80058bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	7afa      	ldrb	r2, [r7, #11]
 80058c4:	4611      	mov	r1, r2
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	4798      	blx	r3
 80058ca:	4603      	mov	r3, r0
 80058cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80058ce:	7dfb      	ldrb	r3, [r7, #23]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80058d4:	7dfb      	ldrb	r3, [r7, #23]
 80058d6:	e000      	b.n	80058da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3718      	adds	r7, #24
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b086      	sub	sp, #24
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	60f8      	str	r0, [r7, #12]
 80058ea:	460b      	mov	r3, r1
 80058ec:	607a      	str	r2, [r7, #4]
 80058ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80058f0:	7afb      	ldrb	r3, [r7, #11]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d16f      	bne.n	80059d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	3314      	adds	r3, #20
 80058fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005902:	2b02      	cmp	r3, #2
 8005904:	d15a      	bne.n	80059bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	689a      	ldr	r2, [r3, #8]
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	429a      	cmp	r2, r3
 8005910:	d914      	bls.n	800593c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	689a      	ldr	r2, [r3, #8]
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	1ad2      	subs	r2, r2, r3
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	461a      	mov	r2, r3
 8005926:	6879      	ldr	r1, [r7, #4]
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f001 f8bc 	bl	8006aa6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800592e:	2300      	movs	r3, #0
 8005930:	2200      	movs	r2, #0
 8005932:	2100      	movs	r1, #0
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f001 fd97 	bl	8007468 <USBD_LL_PrepareReceive>
 800593a:	e03f      	b.n	80059bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	68da      	ldr	r2, [r3, #12]
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	429a      	cmp	r2, r3
 8005946:	d11c      	bne.n	8005982 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005950:	429a      	cmp	r2, r3
 8005952:	d316      	bcc.n	8005982 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800595e:	429a      	cmp	r2, r3
 8005960:	d20f      	bcs.n	8005982 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005962:	2200      	movs	r2, #0
 8005964:	2100      	movs	r1, #0
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f001 f89d 	bl	8006aa6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005974:	2300      	movs	r3, #0
 8005976:	2200      	movs	r2, #0
 8005978:	2100      	movs	r1, #0
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f001 fd74 	bl	8007468 <USBD_LL_PrepareReceive>
 8005980:	e01c      	b.n	80059bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b03      	cmp	r3, #3
 800598c:	d10f      	bne.n	80059ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d009      	beq.n	80059ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80059ae:	2180      	movs	r1, #128	@ 0x80
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f001 fcaf 	bl	8007314 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f001 f8c7 	bl	8006b4a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d03a      	beq.n	8005a3c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f7ff fe42 	bl	8005650 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80059d4:	e032      	b.n	8005a3c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80059d6:	7afb      	ldrb	r3, [r7, #11]
 80059d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	4619      	mov	r1, r3
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 f985 	bl	8005cf0 <USBD_CoreFindEP>
 80059e6:	4603      	mov	r3, r0
 80059e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80059ea:	7dfb      	ldrb	r3, [r7, #23]
 80059ec:	2bff      	cmp	r3, #255	@ 0xff
 80059ee:	d025      	beq.n	8005a3c <USBD_LL_DataInStage+0x15a>
 80059f0:	7dfb      	ldrb	r3, [r7, #23]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d122      	bne.n	8005a3c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b03      	cmp	r3, #3
 8005a00:	d11c      	bne.n	8005a3c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005a02:	7dfa      	ldrb	r2, [r7, #23]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	32ae      	adds	r2, #174	@ 0xae
 8005a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d014      	beq.n	8005a3c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005a12:	7dfa      	ldrb	r2, [r7, #23]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005a1a:	7dfa      	ldrb	r2, [r7, #23]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	32ae      	adds	r2, #174	@ 0xae
 8005a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	7afa      	ldrb	r2, [r7, #11]
 8005a28:	4611      	mov	r1, r2
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	4798      	blx	r3
 8005a2e:	4603      	mov	r3, r0
 8005a30:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005a32:	7dbb      	ldrb	r3, [r7, #22]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d001      	beq.n	8005a3c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005a38:	7dbb      	ldrb	r3, [r7, #22]
 8005a3a:	e000      	b.n	8005a3e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3718      	adds	r7, #24
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b084      	sub	sp, #16
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d014      	beq.n	8005aac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00e      	beq.n	8005aac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	6852      	ldr	r2, [r2, #4]
 8005a9a:	b2d2      	uxtb	r2, r2
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	4798      	blx	r3
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d001      	beq.n	8005aac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005aac:	2340      	movs	r3, #64	@ 0x40
 8005aae:	2200      	movs	r2, #0
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f001 fbe9 	bl	800728a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2240      	movs	r2, #64	@ 0x40
 8005ac4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ac8:	2340      	movs	r3, #64	@ 0x40
 8005aca:	2200      	movs	r2, #0
 8005acc:	2180      	movs	r1, #128	@ 0x80
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f001 fbdb 	bl	800728a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2240      	movs	r2, #64	@ 0x40
 8005ade:	621a      	str	r2, [r3, #32]

  return ret;
 8005ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
 8005af2:	460b      	mov	r3, r1
 8005af4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	78fa      	ldrb	r2, [r7, #3]
 8005afa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d006      	beq.n	8005b2c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2204      	movs	r2, #4
 8005b30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b083      	sub	sp, #12
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	d106      	bne.n	8005b64 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b082      	sub	sp, #8
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	d110      	bne.n	8005ba8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00b      	beq.n	8005ba8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b96:	69db      	ldr	r3, [r3, #28]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d005      	beq.n	8005ba8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ba2:	69db      	ldr	r3, [r3, #28]
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3708      	adds	r7, #8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b082      	sub	sp, #8
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	460b      	mov	r3, r1
 8005bbc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	32ae      	adds	r2, #174	@ 0xae
 8005bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e01c      	b.n	8005c0e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b03      	cmp	r3, #3
 8005bde:	d115      	bne.n	8005c0c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	32ae      	adds	r2, #174	@ 0xae
 8005bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00b      	beq.n	8005c0c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	32ae      	adds	r2, #174	@ 0xae
 8005bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	78fa      	ldrb	r2, [r7, #3]
 8005c06:	4611      	mov	r1, r2
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b082      	sub	sp, #8
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
 8005c1e:	460b      	mov	r3, r1
 8005c20:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	32ae      	adds	r2, #174	@ 0xae
 8005c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e01c      	b.n	8005c72 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d115      	bne.n	8005c70 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	32ae      	adds	r2, #174	@ 0xae
 8005c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00b      	beq.n	8005c70 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	32ae      	adds	r2, #174	@ 0xae
 8005c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c68:	78fa      	ldrb	r2, [r7, #3]
 8005c6a:	4611      	mov	r1, r2
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3708      	adds	r7, #8
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b083      	sub	sp, #12
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00e      	beq.n	8005ccc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	6852      	ldr	r2, [r2, #4]
 8005cba:	b2d2      	uxtb	r2, r2
 8005cbc:	4611      	mov	r1, r2
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	4798      	blx	r3
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b083      	sub	sp, #12
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	460b      	mov	r3, r1
 8005ce0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005ce2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005cfc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b086      	sub	sp, #24
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	460b      	mov	r3, r1
 8005d14:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	885b      	ldrh	r3, [r3, #2]
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	7812      	ldrb	r2, [r2, #0]
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d91f      	bls.n	8005d70 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005d36:	e013      	b.n	8005d60 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005d38:	f107 030a 	add.w	r3, r7, #10
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	6978      	ldr	r0, [r7, #20]
 8005d40:	f000 f81b 	bl	8005d7a <USBD_GetNextDesc>
 8005d44:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	785b      	ldrb	r3, [r3, #1]
 8005d4a:	2b05      	cmp	r3, #5
 8005d4c:	d108      	bne.n	8005d60 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	789b      	ldrb	r3, [r3, #2]
 8005d56:	78fa      	ldrb	r2, [r7, #3]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d008      	beq.n	8005d6e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	885b      	ldrh	r3, [r3, #2]
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	897b      	ldrh	r3, [r7, #10]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d8e5      	bhi.n	8005d38 <USBD_GetEpDesc+0x2e>
 8005d6c:	e000      	b.n	8005d70 <USBD_GetEpDesc+0x66>
          break;
 8005d6e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005d70:	693b      	ldr	r3, [r7, #16]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3718      	adds	r7, #24
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b085      	sub	sp, #20
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
 8005d82:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	7812      	ldrb	r2, [r2, #0]
 8005d90:	4413      	add	r3, r2
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4413      	add	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005da4:	68fb      	ldr	r3, [r7, #12]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b087      	sub	sp, #28
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005dd0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005dd4:	021b      	lsls	r3, r3, #8
 8005dd6:	b21a      	sxth	r2, r3
 8005dd8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	b21b      	sxth	r3, r3
 8005de0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005de2:	89fb      	ldrh	r3, [r7, #14]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	371c      	adds	r7, #28
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005e06:	2b40      	cmp	r3, #64	@ 0x40
 8005e08:	d005      	beq.n	8005e16 <USBD_StdDevReq+0x26>
 8005e0a:	2b40      	cmp	r3, #64	@ 0x40
 8005e0c:	d857      	bhi.n	8005ebe <USBD_StdDevReq+0xce>
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00f      	beq.n	8005e32 <USBD_StdDevReq+0x42>
 8005e12:	2b20      	cmp	r3, #32
 8005e14:	d153      	bne.n	8005ebe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	32ae      	adds	r2, #174	@ 0xae
 8005e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	6839      	ldr	r1, [r7, #0]
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	4798      	blx	r3
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e30:	e04a      	b.n	8005ec8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	785b      	ldrb	r3, [r3, #1]
 8005e36:	2b09      	cmp	r3, #9
 8005e38:	d83b      	bhi.n	8005eb2 <USBD_StdDevReq+0xc2>
 8005e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e40 <USBD_StdDevReq+0x50>)
 8005e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e40:	08005e95 	.word	0x08005e95
 8005e44:	08005ea9 	.word	0x08005ea9
 8005e48:	08005eb3 	.word	0x08005eb3
 8005e4c:	08005e9f 	.word	0x08005e9f
 8005e50:	08005eb3 	.word	0x08005eb3
 8005e54:	08005e73 	.word	0x08005e73
 8005e58:	08005e69 	.word	0x08005e69
 8005e5c:	08005eb3 	.word	0x08005eb3
 8005e60:	08005e8b 	.word	0x08005e8b
 8005e64:	08005e7d 	.word	0x08005e7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005e68:	6839      	ldr	r1, [r7, #0]
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fa3c 	bl	80062e8 <USBD_GetDescriptor>
          break;
 8005e70:	e024      	b.n	8005ebc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005e72:	6839      	ldr	r1, [r7, #0]
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 fba1 	bl	80065bc <USBD_SetAddress>
          break;
 8005e7a:	e01f      	b.n	8005ebc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005e7c:	6839      	ldr	r1, [r7, #0]
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fbe0 	bl	8006644 <USBD_SetConfig>
 8005e84:	4603      	mov	r3, r0
 8005e86:	73fb      	strb	r3, [r7, #15]
          break;
 8005e88:	e018      	b.n	8005ebc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005e8a:	6839      	ldr	r1, [r7, #0]
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fc83 	bl	8006798 <USBD_GetConfig>
          break;
 8005e92:	e013      	b.n	8005ebc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005e94:	6839      	ldr	r1, [r7, #0]
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fcb4 	bl	8006804 <USBD_GetStatus>
          break;
 8005e9c:	e00e      	b.n	8005ebc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005e9e:	6839      	ldr	r1, [r7, #0]
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 fce3 	bl	800686c <USBD_SetFeature>
          break;
 8005ea6:	e009      	b.n	8005ebc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005ea8:	6839      	ldr	r1, [r7, #0]
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 fd07 	bl	80068be <USBD_ClrFeature>
          break;
 8005eb0:	e004      	b.n	8005ebc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005eb2:	6839      	ldr	r1, [r7, #0]
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fd5e 	bl	8006976 <USBD_CtlError>
          break;
 8005eba:	bf00      	nop
      }
      break;
 8005ebc:	e004      	b.n	8005ec8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005ebe:	6839      	ldr	r1, [r7, #0]
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fd58 	bl	8006976 <USBD_CtlError>
      break;
 8005ec6:	bf00      	nop
  }

  return ret;
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop

08005ed4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005eea:	2b40      	cmp	r3, #64	@ 0x40
 8005eec:	d005      	beq.n	8005efa <USBD_StdItfReq+0x26>
 8005eee:	2b40      	cmp	r3, #64	@ 0x40
 8005ef0:	d852      	bhi.n	8005f98 <USBD_StdItfReq+0xc4>
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <USBD_StdItfReq+0x26>
 8005ef6:	2b20      	cmp	r3, #32
 8005ef8:	d14e      	bne.n	8005f98 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	3b01      	subs	r3, #1
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d840      	bhi.n	8005f8a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	889b      	ldrh	r3, [r3, #4]
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d836      	bhi.n	8005f80 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	889b      	ldrh	r3, [r3, #4]
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	4619      	mov	r1, r3
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7ff fedb 	bl	8005cd6 <USBD_CoreFindIF>
 8005f20:	4603      	mov	r3, r0
 8005f22:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f24:	7bbb      	ldrb	r3, [r7, #14]
 8005f26:	2bff      	cmp	r3, #255	@ 0xff
 8005f28:	d01d      	beq.n	8005f66 <USBD_StdItfReq+0x92>
 8005f2a:	7bbb      	ldrb	r3, [r7, #14]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d11a      	bne.n	8005f66 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005f30:	7bba      	ldrb	r2, [r7, #14]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	32ae      	adds	r2, #174	@ 0xae
 8005f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00f      	beq.n	8005f60 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005f40:	7bba      	ldrb	r2, [r7, #14]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005f48:	7bba      	ldrb	r2, [r7, #14]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	32ae      	adds	r2, #174	@ 0xae
 8005f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	6839      	ldr	r1, [r7, #0]
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	4798      	blx	r3
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005f5e:	e004      	b.n	8005f6a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005f60:	2303      	movs	r3, #3
 8005f62:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005f64:	e001      	b.n	8005f6a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005f66:	2303      	movs	r3, #3
 8005f68:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	88db      	ldrh	r3, [r3, #6]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d110      	bne.n	8005f94 <USBD_StdItfReq+0xc0>
 8005f72:	7bfb      	ldrb	r3, [r7, #15]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10d      	bne.n	8005f94 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 fdd3 	bl	8006b24 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005f7e:	e009      	b.n	8005f94 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005f80:	6839      	ldr	r1, [r7, #0]
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fcf7 	bl	8006976 <USBD_CtlError>
          break;
 8005f88:	e004      	b.n	8005f94 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005f8a:	6839      	ldr	r1, [r7, #0]
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 fcf2 	bl	8006976 <USBD_CtlError>
          break;
 8005f92:	e000      	b.n	8005f96 <USBD_StdItfReq+0xc2>
          break;
 8005f94:	bf00      	nop
      }
      break;
 8005f96:	e004      	b.n	8005fa2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005f98:	6839      	ldr	r1, [r7, #0]
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fceb 	bl	8006976 <USBD_CtlError>
      break;
 8005fa0:	bf00      	nop
  }

  return ret;
 8005fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	889b      	ldrh	r3, [r3, #4]
 8005fbe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005fc8:	2b40      	cmp	r3, #64	@ 0x40
 8005fca:	d007      	beq.n	8005fdc <USBD_StdEPReq+0x30>
 8005fcc:	2b40      	cmp	r3, #64	@ 0x40
 8005fce:	f200 817f 	bhi.w	80062d0 <USBD_StdEPReq+0x324>
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d02a      	beq.n	800602c <USBD_StdEPReq+0x80>
 8005fd6:	2b20      	cmp	r3, #32
 8005fd8:	f040 817a 	bne.w	80062d0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005fdc:	7bbb      	ldrb	r3, [r7, #14]
 8005fde:	4619      	mov	r1, r3
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff fe85 	bl	8005cf0 <USBD_CoreFindEP>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005fea:	7b7b      	ldrb	r3, [r7, #13]
 8005fec:	2bff      	cmp	r3, #255	@ 0xff
 8005fee:	f000 8174 	beq.w	80062da <USBD_StdEPReq+0x32e>
 8005ff2:	7b7b      	ldrb	r3, [r7, #13]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f040 8170 	bne.w	80062da <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005ffa:	7b7a      	ldrb	r2, [r7, #13]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006002:	7b7a      	ldrb	r2, [r7, #13]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	32ae      	adds	r2, #174	@ 0xae
 8006008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 8163 	beq.w	80062da <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006014:	7b7a      	ldrb	r2, [r7, #13]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	32ae      	adds	r2, #174	@ 0xae
 800601a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	6839      	ldr	r1, [r7, #0]
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	4798      	blx	r3
 8006026:	4603      	mov	r3, r0
 8006028:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800602a:	e156      	b.n	80062da <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	785b      	ldrb	r3, [r3, #1]
 8006030:	2b03      	cmp	r3, #3
 8006032:	d008      	beq.n	8006046 <USBD_StdEPReq+0x9a>
 8006034:	2b03      	cmp	r3, #3
 8006036:	f300 8145 	bgt.w	80062c4 <USBD_StdEPReq+0x318>
 800603a:	2b00      	cmp	r3, #0
 800603c:	f000 809b 	beq.w	8006176 <USBD_StdEPReq+0x1ca>
 8006040:	2b01      	cmp	r3, #1
 8006042:	d03c      	beq.n	80060be <USBD_StdEPReq+0x112>
 8006044:	e13e      	b.n	80062c4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b02      	cmp	r3, #2
 8006050:	d002      	beq.n	8006058 <USBD_StdEPReq+0xac>
 8006052:	2b03      	cmp	r3, #3
 8006054:	d016      	beq.n	8006084 <USBD_StdEPReq+0xd8>
 8006056:	e02c      	b.n	80060b2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006058:	7bbb      	ldrb	r3, [r7, #14]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00d      	beq.n	800607a <USBD_StdEPReq+0xce>
 800605e:	7bbb      	ldrb	r3, [r7, #14]
 8006060:	2b80      	cmp	r3, #128	@ 0x80
 8006062:	d00a      	beq.n	800607a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006064:	7bbb      	ldrb	r3, [r7, #14]
 8006066:	4619      	mov	r1, r3
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f001 f953 	bl	8007314 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800606e:	2180      	movs	r1, #128	@ 0x80
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f001 f94f 	bl	8007314 <USBD_LL_StallEP>
 8006076:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006078:	e020      	b.n	80060bc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800607a:	6839      	ldr	r1, [r7, #0]
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 fc7a 	bl	8006976 <USBD_CtlError>
              break;
 8006082:	e01b      	b.n	80060bc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	885b      	ldrh	r3, [r3, #2]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10e      	bne.n	80060aa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800608c:	7bbb      	ldrb	r3, [r7, #14]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00b      	beq.n	80060aa <USBD_StdEPReq+0xfe>
 8006092:	7bbb      	ldrb	r3, [r7, #14]
 8006094:	2b80      	cmp	r3, #128	@ 0x80
 8006096:	d008      	beq.n	80060aa <USBD_StdEPReq+0xfe>
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	88db      	ldrh	r3, [r3, #6]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d104      	bne.n	80060aa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80060a0:	7bbb      	ldrb	r3, [r7, #14]
 80060a2:	4619      	mov	r1, r3
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f001 f935 	bl	8007314 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 fd3a 	bl	8006b24 <USBD_CtlSendStatus>

              break;
 80060b0:	e004      	b.n	80060bc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80060b2:	6839      	ldr	r1, [r7, #0]
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fc5e 	bl	8006976 <USBD_CtlError>
              break;
 80060ba:	bf00      	nop
          }
          break;
 80060bc:	e107      	b.n	80062ce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d002      	beq.n	80060d0 <USBD_StdEPReq+0x124>
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d016      	beq.n	80060fc <USBD_StdEPReq+0x150>
 80060ce:	e04b      	b.n	8006168 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060d0:	7bbb      	ldrb	r3, [r7, #14]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00d      	beq.n	80060f2 <USBD_StdEPReq+0x146>
 80060d6:	7bbb      	ldrb	r3, [r7, #14]
 80060d8:	2b80      	cmp	r3, #128	@ 0x80
 80060da:	d00a      	beq.n	80060f2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80060dc:	7bbb      	ldrb	r3, [r7, #14]
 80060de:	4619      	mov	r1, r3
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f001 f917 	bl	8007314 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80060e6:	2180      	movs	r1, #128	@ 0x80
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f001 f913 	bl	8007314 <USBD_LL_StallEP>
 80060ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80060f0:	e040      	b.n	8006174 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80060f2:	6839      	ldr	r1, [r7, #0]
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 fc3e 	bl	8006976 <USBD_CtlError>
              break;
 80060fa:	e03b      	b.n	8006174 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	885b      	ldrh	r3, [r3, #2]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d136      	bne.n	8006172 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006104:	7bbb      	ldrb	r3, [r7, #14]
 8006106:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800610a:	2b00      	cmp	r3, #0
 800610c:	d004      	beq.n	8006118 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800610e:	7bbb      	ldrb	r3, [r7, #14]
 8006110:	4619      	mov	r1, r3
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f001 f91d 	bl	8007352 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fd03 	bl	8006b24 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800611e:	7bbb      	ldrb	r3, [r7, #14]
 8006120:	4619      	mov	r1, r3
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7ff fde4 	bl	8005cf0 <USBD_CoreFindEP>
 8006128:	4603      	mov	r3, r0
 800612a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800612c:	7b7b      	ldrb	r3, [r7, #13]
 800612e:	2bff      	cmp	r3, #255	@ 0xff
 8006130:	d01f      	beq.n	8006172 <USBD_StdEPReq+0x1c6>
 8006132:	7b7b      	ldrb	r3, [r7, #13]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d11c      	bne.n	8006172 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006138:	7b7a      	ldrb	r2, [r7, #13]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006140:	7b7a      	ldrb	r2, [r7, #13]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	32ae      	adds	r2, #174	@ 0xae
 8006146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d010      	beq.n	8006172 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006150:	7b7a      	ldrb	r2, [r7, #13]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	32ae      	adds	r2, #174	@ 0xae
 8006156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	6839      	ldr	r1, [r7, #0]
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	4798      	blx	r3
 8006162:	4603      	mov	r3, r0
 8006164:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006166:	e004      	b.n	8006172 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006168:	6839      	ldr	r1, [r7, #0]
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fc03 	bl	8006976 <USBD_CtlError>
              break;
 8006170:	e000      	b.n	8006174 <USBD_StdEPReq+0x1c8>
              break;
 8006172:	bf00      	nop
          }
          break;
 8006174:	e0ab      	b.n	80062ce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b02      	cmp	r3, #2
 8006180:	d002      	beq.n	8006188 <USBD_StdEPReq+0x1dc>
 8006182:	2b03      	cmp	r3, #3
 8006184:	d032      	beq.n	80061ec <USBD_StdEPReq+0x240>
 8006186:	e097      	b.n	80062b8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006188:	7bbb      	ldrb	r3, [r7, #14]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d007      	beq.n	800619e <USBD_StdEPReq+0x1f2>
 800618e:	7bbb      	ldrb	r3, [r7, #14]
 8006190:	2b80      	cmp	r3, #128	@ 0x80
 8006192:	d004      	beq.n	800619e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006194:	6839      	ldr	r1, [r7, #0]
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fbed 	bl	8006976 <USBD_CtlError>
                break;
 800619c:	e091      	b.n	80062c2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800619e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	da0b      	bge.n	80061be <USBD_StdEPReq+0x212>
 80061a6:	7bbb      	ldrb	r3, [r7, #14]
 80061a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80061ac:	4613      	mov	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	3310      	adds	r3, #16
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	4413      	add	r3, r2
 80061ba:	3304      	adds	r3, #4
 80061bc:	e00b      	b.n	80061d6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80061be:	7bbb      	ldrb	r3, [r7, #14]
 80061c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061c4:	4613      	mov	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	4413      	add	r3, r2
 80061d4:	3304      	adds	r3, #4
 80061d6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2200      	movs	r2, #0
 80061dc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	2202      	movs	r2, #2
 80061e2:	4619      	mov	r1, r3
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fc43 	bl	8006a70 <USBD_CtlSendData>
              break;
 80061ea:	e06a      	b.n	80062c2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80061ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	da11      	bge.n	8006218 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80061f4:	7bbb      	ldrb	r3, [r7, #14]
 80061f6:	f003 020f 	and.w	r2, r3, #15
 80061fa:	6879      	ldr	r1, [r7, #4]
 80061fc:	4613      	mov	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	440b      	add	r3, r1
 8006206:	3324      	adds	r3, #36	@ 0x24
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d117      	bne.n	800623e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800620e:	6839      	ldr	r1, [r7, #0]
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fbb0 	bl	8006976 <USBD_CtlError>
                  break;
 8006216:	e054      	b.n	80062c2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006218:	7bbb      	ldrb	r3, [r7, #14]
 800621a:	f003 020f 	and.w	r2, r3, #15
 800621e:	6879      	ldr	r1, [r7, #4]
 8006220:	4613      	mov	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	440b      	add	r3, r1
 800622a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d104      	bne.n	800623e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006234:	6839      	ldr	r1, [r7, #0]
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fb9d 	bl	8006976 <USBD_CtlError>
                  break;
 800623c:	e041      	b.n	80062c2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800623e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006242:	2b00      	cmp	r3, #0
 8006244:	da0b      	bge.n	800625e <USBD_StdEPReq+0x2b2>
 8006246:	7bbb      	ldrb	r3, [r7, #14]
 8006248:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800624c:	4613      	mov	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	3310      	adds	r3, #16
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	4413      	add	r3, r2
 800625a:	3304      	adds	r3, #4
 800625c:	e00b      	b.n	8006276 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800625e:	7bbb      	ldrb	r3, [r7, #14]
 8006260:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006264:	4613      	mov	r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	4413      	add	r3, r2
 8006274:	3304      	adds	r3, #4
 8006276:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006278:	7bbb      	ldrb	r3, [r7, #14]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d002      	beq.n	8006284 <USBD_StdEPReq+0x2d8>
 800627e:	7bbb      	ldrb	r3, [r7, #14]
 8006280:	2b80      	cmp	r3, #128	@ 0x80
 8006282:	d103      	bne.n	800628c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2200      	movs	r2, #0
 8006288:	601a      	str	r2, [r3, #0]
 800628a:	e00e      	b.n	80062aa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800628c:	7bbb      	ldrb	r3, [r7, #14]
 800628e:	4619      	mov	r1, r3
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f001 f87d 	bl	8007390 <USBD_LL_IsStallEP>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d003      	beq.n	80062a4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2201      	movs	r2, #1
 80062a0:	601a      	str	r2, [r3, #0]
 80062a2:	e002      	b.n	80062aa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	2200      	movs	r2, #0
 80062a8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2202      	movs	r2, #2
 80062ae:	4619      	mov	r1, r3
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fbdd 	bl	8006a70 <USBD_CtlSendData>
              break;
 80062b6:	e004      	b.n	80062c2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80062b8:	6839      	ldr	r1, [r7, #0]
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fb5b 	bl	8006976 <USBD_CtlError>
              break;
 80062c0:	bf00      	nop
          }
          break;
 80062c2:	e004      	b.n	80062ce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80062c4:	6839      	ldr	r1, [r7, #0]
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 fb55 	bl	8006976 <USBD_CtlError>
          break;
 80062cc:	bf00      	nop
      }
      break;
 80062ce:	e005      	b.n	80062dc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80062d0:	6839      	ldr	r1, [r7, #0]
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fb4f 	bl	8006976 <USBD_CtlError>
      break;
 80062d8:	e000      	b.n	80062dc <USBD_StdEPReq+0x330>
      break;
 80062da:	bf00      	nop
  }

  return ret;
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
	...

080062e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80062f6:	2300      	movs	r3, #0
 80062f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	885b      	ldrh	r3, [r3, #2]
 8006302:	0a1b      	lsrs	r3, r3, #8
 8006304:	b29b      	uxth	r3, r3
 8006306:	3b01      	subs	r3, #1
 8006308:	2b06      	cmp	r3, #6
 800630a:	f200 8128 	bhi.w	800655e <USBD_GetDescriptor+0x276>
 800630e:	a201      	add	r2, pc, #4	@ (adr r2, 8006314 <USBD_GetDescriptor+0x2c>)
 8006310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006314:	08006331 	.word	0x08006331
 8006318:	08006349 	.word	0x08006349
 800631c:	08006389 	.word	0x08006389
 8006320:	0800655f 	.word	0x0800655f
 8006324:	0800655f 	.word	0x0800655f
 8006328:	080064ff 	.word	0x080064ff
 800632c:	0800652b 	.word	0x0800652b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	7c12      	ldrb	r2, [r2, #16]
 800633c:	f107 0108 	add.w	r1, r7, #8
 8006340:	4610      	mov	r0, r2
 8006342:	4798      	blx	r3
 8006344:	60f8      	str	r0, [r7, #12]
      break;
 8006346:	e112      	b.n	800656e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	7c1b      	ldrb	r3, [r3, #16]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10d      	bne.n	800636c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006358:	f107 0208 	add.w	r2, r7, #8
 800635c:	4610      	mov	r0, r2
 800635e:	4798      	blx	r3
 8006360:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	3301      	adds	r3, #1
 8006366:	2202      	movs	r2, #2
 8006368:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800636a:	e100      	b.n	800656e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006374:	f107 0208 	add.w	r2, r7, #8
 8006378:	4610      	mov	r0, r2
 800637a:	4798      	blx	r3
 800637c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	3301      	adds	r3, #1
 8006382:	2202      	movs	r2, #2
 8006384:	701a      	strb	r2, [r3, #0]
      break;
 8006386:	e0f2      	b.n	800656e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	885b      	ldrh	r3, [r3, #2]
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b05      	cmp	r3, #5
 8006390:	f200 80ac 	bhi.w	80064ec <USBD_GetDescriptor+0x204>
 8006394:	a201      	add	r2, pc, #4	@ (adr r2, 800639c <USBD_GetDescriptor+0xb4>)
 8006396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639a:	bf00      	nop
 800639c:	080063b5 	.word	0x080063b5
 80063a0:	080063e9 	.word	0x080063e9
 80063a4:	0800641d 	.word	0x0800641d
 80063a8:	08006451 	.word	0x08006451
 80063ac:	08006485 	.word	0x08006485
 80063b0:	080064b9 	.word	0x080064b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00b      	beq.n	80063d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	7c12      	ldrb	r2, [r2, #16]
 80063cc:	f107 0108 	add.w	r1, r7, #8
 80063d0:	4610      	mov	r0, r2
 80063d2:	4798      	blx	r3
 80063d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063d6:	e091      	b.n	80064fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063d8:	6839      	ldr	r1, [r7, #0]
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 facb 	bl	8006976 <USBD_CtlError>
            err++;
 80063e0:	7afb      	ldrb	r3, [r7, #11]
 80063e2:	3301      	adds	r3, #1
 80063e4:	72fb      	strb	r3, [r7, #11]
          break;
 80063e6:	e089      	b.n	80064fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00b      	beq.n	800640c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	7c12      	ldrb	r2, [r2, #16]
 8006400:	f107 0108 	add.w	r1, r7, #8
 8006404:	4610      	mov	r0, r2
 8006406:	4798      	blx	r3
 8006408:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800640a:	e077      	b.n	80064fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800640c:	6839      	ldr	r1, [r7, #0]
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fab1 	bl	8006976 <USBD_CtlError>
            err++;
 8006414:	7afb      	ldrb	r3, [r7, #11]
 8006416:	3301      	adds	r3, #1
 8006418:	72fb      	strb	r3, [r7, #11]
          break;
 800641a:	e06f      	b.n	80064fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00b      	beq.n	8006440 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	7c12      	ldrb	r2, [r2, #16]
 8006434:	f107 0108 	add.w	r1, r7, #8
 8006438:	4610      	mov	r0, r2
 800643a:	4798      	blx	r3
 800643c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800643e:	e05d      	b.n	80064fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006440:	6839      	ldr	r1, [r7, #0]
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 fa97 	bl	8006976 <USBD_CtlError>
            err++;
 8006448:	7afb      	ldrb	r3, [r7, #11]
 800644a:	3301      	adds	r3, #1
 800644c:	72fb      	strb	r3, [r7, #11]
          break;
 800644e:	e055      	b.n	80064fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00b      	beq.n	8006474 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	7c12      	ldrb	r2, [r2, #16]
 8006468:	f107 0108 	add.w	r1, r7, #8
 800646c:	4610      	mov	r0, r2
 800646e:	4798      	blx	r3
 8006470:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006472:	e043      	b.n	80064fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006474:	6839      	ldr	r1, [r7, #0]
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fa7d 	bl	8006976 <USBD_CtlError>
            err++;
 800647c:	7afb      	ldrb	r3, [r7, #11]
 800647e:	3301      	adds	r3, #1
 8006480:	72fb      	strb	r3, [r7, #11]
          break;
 8006482:	e03b      	b.n	80064fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800648a:	695b      	ldr	r3, [r3, #20]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00b      	beq.n	80064a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	7c12      	ldrb	r2, [r2, #16]
 800649c:	f107 0108 	add.w	r1, r7, #8
 80064a0:	4610      	mov	r0, r2
 80064a2:	4798      	blx	r3
 80064a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064a6:	e029      	b.n	80064fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064a8:	6839      	ldr	r1, [r7, #0]
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fa63 	bl	8006976 <USBD_CtlError>
            err++;
 80064b0:	7afb      	ldrb	r3, [r7, #11]
 80064b2:	3301      	adds	r3, #1
 80064b4:	72fb      	strb	r3, [r7, #11]
          break;
 80064b6:	e021      	b.n	80064fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00b      	beq.n	80064dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	7c12      	ldrb	r2, [r2, #16]
 80064d0:	f107 0108 	add.w	r1, r7, #8
 80064d4:	4610      	mov	r0, r2
 80064d6:	4798      	blx	r3
 80064d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064da:	e00f      	b.n	80064fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fa49 	bl	8006976 <USBD_CtlError>
            err++;
 80064e4:	7afb      	ldrb	r3, [r7, #11]
 80064e6:	3301      	adds	r3, #1
 80064e8:	72fb      	strb	r3, [r7, #11]
          break;
 80064ea:	e007      	b.n	80064fc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80064ec:	6839      	ldr	r1, [r7, #0]
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fa41 	bl	8006976 <USBD_CtlError>
          err++;
 80064f4:	7afb      	ldrb	r3, [r7, #11]
 80064f6:	3301      	adds	r3, #1
 80064f8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80064fa:	bf00      	nop
      }
      break;
 80064fc:	e037      	b.n	800656e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	7c1b      	ldrb	r3, [r3, #16]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d109      	bne.n	800651a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800650c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800650e:	f107 0208 	add.w	r2, r7, #8
 8006512:	4610      	mov	r0, r2
 8006514:	4798      	blx	r3
 8006516:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006518:	e029      	b.n	800656e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800651a:	6839      	ldr	r1, [r7, #0]
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 fa2a 	bl	8006976 <USBD_CtlError>
        err++;
 8006522:	7afb      	ldrb	r3, [r7, #11]
 8006524:	3301      	adds	r3, #1
 8006526:	72fb      	strb	r3, [r7, #11]
      break;
 8006528:	e021      	b.n	800656e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	7c1b      	ldrb	r3, [r3, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10d      	bne.n	800654e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800653a:	f107 0208 	add.w	r2, r7, #8
 800653e:	4610      	mov	r0, r2
 8006540:	4798      	blx	r3
 8006542:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	3301      	adds	r3, #1
 8006548:	2207      	movs	r2, #7
 800654a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800654c:	e00f      	b.n	800656e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800654e:	6839      	ldr	r1, [r7, #0]
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fa10 	bl	8006976 <USBD_CtlError>
        err++;
 8006556:	7afb      	ldrb	r3, [r7, #11]
 8006558:	3301      	adds	r3, #1
 800655a:	72fb      	strb	r3, [r7, #11]
      break;
 800655c:	e007      	b.n	800656e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800655e:	6839      	ldr	r1, [r7, #0]
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fa08 	bl	8006976 <USBD_CtlError>
      err++;
 8006566:	7afb      	ldrb	r3, [r7, #11]
 8006568:	3301      	adds	r3, #1
 800656a:	72fb      	strb	r3, [r7, #11]
      break;
 800656c:	bf00      	nop
  }

  if (err != 0U)
 800656e:	7afb      	ldrb	r3, [r7, #11]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d11e      	bne.n	80065b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	88db      	ldrh	r3, [r3, #6]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d016      	beq.n	80065aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800657c:	893b      	ldrh	r3, [r7, #8]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00e      	beq.n	80065a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	88da      	ldrh	r2, [r3, #6]
 8006586:	893b      	ldrh	r3, [r7, #8]
 8006588:	4293      	cmp	r3, r2
 800658a:	bf28      	it	cs
 800658c:	4613      	movcs	r3, r2
 800658e:	b29b      	uxth	r3, r3
 8006590:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006592:	893b      	ldrh	r3, [r7, #8]
 8006594:	461a      	mov	r2, r3
 8006596:	68f9      	ldr	r1, [r7, #12]
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 fa69 	bl	8006a70 <USBD_CtlSendData>
 800659e:	e009      	b.n	80065b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80065a0:	6839      	ldr	r1, [r7, #0]
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f9e7 	bl	8006976 <USBD_CtlError>
 80065a8:	e004      	b.n	80065b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 faba 	bl	8006b24 <USBD_CtlSendStatus>
 80065b0:	e000      	b.n	80065b4 <USBD_GetDescriptor+0x2cc>
    return;
 80065b2:	bf00      	nop
  }
}
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop

080065bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	889b      	ldrh	r3, [r3, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d131      	bne.n	8006632 <USBD_SetAddress+0x76>
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	88db      	ldrh	r3, [r3, #6]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d12d      	bne.n	8006632 <USBD_SetAddress+0x76>
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	885b      	ldrh	r3, [r3, #2]
 80065da:	2b7f      	cmp	r3, #127	@ 0x7f
 80065dc:	d829      	bhi.n	8006632 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	885b      	ldrh	r3, [r3, #2]
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b03      	cmp	r3, #3
 80065f4:	d104      	bne.n	8006600 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f9bc 	bl	8006976 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065fe:	e01d      	b.n	800663c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	7bfa      	ldrb	r2, [r7, #15]
 8006604:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006608:	7bfb      	ldrb	r3, [r7, #15]
 800660a:	4619      	mov	r1, r3
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 feeb 	bl	80073e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fa86 	bl	8006b24 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006618:	7bfb      	ldrb	r3, [r7, #15]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d004      	beq.n	8006628 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2202      	movs	r2, #2
 8006622:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006626:	e009      	b.n	800663c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006630:	e004      	b.n	800663c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006632:	6839      	ldr	r1, [r7, #0]
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 f99e 	bl	8006976 <USBD_CtlError>
  }
}
 800663a:	bf00      	nop
 800663c:	bf00      	nop
 800663e:	3710      	adds	r7, #16
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800664e:	2300      	movs	r3, #0
 8006650:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	885b      	ldrh	r3, [r3, #2]
 8006656:	b2da      	uxtb	r2, r3
 8006658:	4b4e      	ldr	r3, [pc, #312]	@ (8006794 <USBD_SetConfig+0x150>)
 800665a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800665c:	4b4d      	ldr	r3, [pc, #308]	@ (8006794 <USBD_SetConfig+0x150>)
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d905      	bls.n	8006670 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006664:	6839      	ldr	r1, [r7, #0]
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f985 	bl	8006976 <USBD_CtlError>
    return USBD_FAIL;
 800666c:	2303      	movs	r3, #3
 800666e:	e08c      	b.n	800678a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b02      	cmp	r3, #2
 800667a:	d002      	beq.n	8006682 <USBD_SetConfig+0x3e>
 800667c:	2b03      	cmp	r3, #3
 800667e:	d029      	beq.n	80066d4 <USBD_SetConfig+0x90>
 8006680:	e075      	b.n	800676e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006682:	4b44      	ldr	r3, [pc, #272]	@ (8006794 <USBD_SetConfig+0x150>)
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d020      	beq.n	80066cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800668a:	4b42      	ldr	r3, [pc, #264]	@ (8006794 <USBD_SetConfig+0x150>)
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	461a      	mov	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006694:	4b3f      	ldr	r3, [pc, #252]	@ (8006794 <USBD_SetConfig+0x150>)
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	4619      	mov	r1, r3
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7fe ffe3 	bl	8005666 <USBD_SetClassConfig>
 80066a0:	4603      	mov	r3, r0
 80066a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d008      	beq.n	80066bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80066aa:	6839      	ldr	r1, [r7, #0]
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f962 	bl	8006976 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2202      	movs	r2, #2
 80066b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80066ba:	e065      	b.n	8006788 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fa31 	bl	8006b24 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2203      	movs	r2, #3
 80066c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80066ca:	e05d      	b.n	8006788 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 fa29 	bl	8006b24 <USBD_CtlSendStatus>
      break;
 80066d2:	e059      	b.n	8006788 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80066d4:	4b2f      	ldr	r3, [pc, #188]	@ (8006794 <USBD_SetConfig+0x150>)
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d112      	bne.n	8006702 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2202      	movs	r2, #2
 80066e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80066e4:	4b2b      	ldr	r3, [pc, #172]	@ (8006794 <USBD_SetConfig+0x150>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	461a      	mov	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80066ee:	4b29      	ldr	r3, [pc, #164]	@ (8006794 <USBD_SetConfig+0x150>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7fe ffd2 	bl	800569e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fa12 	bl	8006b24 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006700:	e042      	b.n	8006788 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006702:	4b24      	ldr	r3, [pc, #144]	@ (8006794 <USBD_SetConfig+0x150>)
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	461a      	mov	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	429a      	cmp	r2, r3
 800670e:	d02a      	beq.n	8006766 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	b2db      	uxtb	r3, r3
 8006716:	4619      	mov	r1, r3
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7fe ffc0 	bl	800569e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800671e:	4b1d      	ldr	r3, [pc, #116]	@ (8006794 <USBD_SetConfig+0x150>)
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	461a      	mov	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006728:	4b1a      	ldr	r3, [pc, #104]	@ (8006794 <USBD_SetConfig+0x150>)
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	4619      	mov	r1, r3
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7fe ff99 	bl	8005666 <USBD_SetClassConfig>
 8006734:	4603      	mov	r3, r0
 8006736:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006738:	7bfb      	ldrb	r3, [r7, #15]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00f      	beq.n	800675e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800673e:	6839      	ldr	r1, [r7, #0]
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f918 	bl	8006976 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	b2db      	uxtb	r3, r3
 800674c:	4619      	mov	r1, r3
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7fe ffa5 	bl	800569e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2202      	movs	r2, #2
 8006758:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800675c:	e014      	b.n	8006788 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f9e0 	bl	8006b24 <USBD_CtlSendStatus>
      break;
 8006764:	e010      	b.n	8006788 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f9dc 	bl	8006b24 <USBD_CtlSendStatus>
      break;
 800676c:	e00c      	b.n	8006788 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800676e:	6839      	ldr	r1, [r7, #0]
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 f900 	bl	8006976 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006776:	4b07      	ldr	r3, [pc, #28]	@ (8006794 <USBD_SetConfig+0x150>)
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f7fe ff8e 	bl	800569e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006782:	2303      	movs	r3, #3
 8006784:	73fb      	strb	r3, [r7, #15]
      break;
 8006786:	bf00      	nop
  }

  return ret;
 8006788:	7bfb      	ldrb	r3, [r7, #15]
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	200001b8 	.word	0x200001b8

08006798 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	88db      	ldrh	r3, [r3, #6]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d004      	beq.n	80067b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80067aa:	6839      	ldr	r1, [r7, #0]
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f8e2 	bl	8006976 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80067b2:	e023      	b.n	80067fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b02      	cmp	r3, #2
 80067be:	dc02      	bgt.n	80067c6 <USBD_GetConfig+0x2e>
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	dc03      	bgt.n	80067cc <USBD_GetConfig+0x34>
 80067c4:	e015      	b.n	80067f2 <USBD_GetConfig+0x5a>
 80067c6:	2b03      	cmp	r3, #3
 80067c8:	d00b      	beq.n	80067e2 <USBD_GetConfig+0x4a>
 80067ca:	e012      	b.n	80067f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3308      	adds	r3, #8
 80067d6:	2201      	movs	r2, #1
 80067d8:	4619      	mov	r1, r3
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f948 	bl	8006a70 <USBD_CtlSendData>
        break;
 80067e0:	e00c      	b.n	80067fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	3304      	adds	r3, #4
 80067e6:	2201      	movs	r2, #1
 80067e8:	4619      	mov	r1, r3
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f940 	bl	8006a70 <USBD_CtlSendData>
        break;
 80067f0:	e004      	b.n	80067fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80067f2:	6839      	ldr	r1, [r7, #0]
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f8be 	bl	8006976 <USBD_CtlError>
        break;
 80067fa:	bf00      	nop
}
 80067fc:	bf00      	nop
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006814:	b2db      	uxtb	r3, r3
 8006816:	3b01      	subs	r3, #1
 8006818:	2b02      	cmp	r3, #2
 800681a:	d81e      	bhi.n	800685a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	88db      	ldrh	r3, [r3, #6]
 8006820:	2b02      	cmp	r3, #2
 8006822:	d004      	beq.n	800682e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006824:	6839      	ldr	r1, [r7, #0]
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f8a5 	bl	8006976 <USBD_CtlError>
        break;
 800682c:	e01a      	b.n	8006864 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800683a:	2b00      	cmp	r3, #0
 800683c:	d005      	beq.n	800684a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	f043 0202 	orr.w	r2, r3, #2
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	330c      	adds	r3, #12
 800684e:	2202      	movs	r2, #2
 8006850:	4619      	mov	r1, r3
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f90c 	bl	8006a70 <USBD_CtlSendData>
      break;
 8006858:	e004      	b.n	8006864 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800685a:	6839      	ldr	r1, [r7, #0]
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 f88a 	bl	8006976 <USBD_CtlError>
      break;
 8006862:	bf00      	nop
  }
}
 8006864:	bf00      	nop
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	885b      	ldrh	r3, [r3, #2]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d107      	bne.n	800688e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f94c 	bl	8006b24 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800688c:	e013      	b.n	80068b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	885b      	ldrh	r3, [r3, #2]
 8006892:	2b02      	cmp	r3, #2
 8006894:	d10b      	bne.n	80068ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	889b      	ldrh	r3, [r3, #4]
 800689a:	0a1b      	lsrs	r3, r3, #8
 800689c:	b29b      	uxth	r3, r3
 800689e:	b2da      	uxtb	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f93c 	bl	8006b24 <USBD_CtlSendStatus>
}
 80068ac:	e003      	b.n	80068b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80068ae:	6839      	ldr	r1, [r7, #0]
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f860 	bl	8006976 <USBD_CtlError>
}
 80068b6:	bf00      	nop
 80068b8:	3708      	adds	r7, #8
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b082      	sub	sp, #8
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	3b01      	subs	r3, #1
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d80b      	bhi.n	80068ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	885b      	ldrh	r3, [r3, #2]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d10c      	bne.n	80068f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f91c 	bl	8006b24 <USBD_CtlSendStatus>
      }
      break;
 80068ec:	e004      	b.n	80068f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80068ee:	6839      	ldr	r1, [r7, #0]
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f840 	bl	8006976 <USBD_CtlError>
      break;
 80068f6:	e000      	b.n	80068fa <USBD_ClrFeature+0x3c>
      break;
 80068f8:	bf00      	nop
  }
}
 80068fa:	bf00      	nop
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b084      	sub	sp, #16
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
 800690a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	781a      	ldrb	r2, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	3301      	adds	r3, #1
 800691c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	781a      	ldrb	r2, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	3301      	adds	r3, #1
 800692a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f7ff fa40 	bl	8005db2 <SWAPBYTE>
 8006932:	4603      	mov	r3, r0
 8006934:	461a      	mov	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	3301      	adds	r3, #1
 800693e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3301      	adds	r3, #1
 8006944:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f7ff fa33 	bl	8005db2 <SWAPBYTE>
 800694c:	4603      	mov	r3, r0
 800694e:	461a      	mov	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	3301      	adds	r3, #1
 8006958:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	3301      	adds	r3, #1
 800695e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f7ff fa26 	bl	8005db2 <SWAPBYTE>
 8006966:	4603      	mov	r3, r0
 8006968:	461a      	mov	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	80da      	strh	r2, [r3, #6]
}
 800696e:	bf00      	nop
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b082      	sub	sp, #8
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006980:	2180      	movs	r1, #128	@ 0x80
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fcc6 	bl	8007314 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006988:	2100      	movs	r1, #0
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fcc2 	bl	8007314 <USBD_LL_StallEP>
}
 8006990:	bf00      	nop
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80069a4:	2300      	movs	r3, #0
 80069a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d042      	beq.n	8006a34 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80069b2:	6938      	ldr	r0, [r7, #16]
 80069b4:	f000 f842 	bl	8006a3c <USBD_GetLen>
 80069b8:	4603      	mov	r3, r0
 80069ba:	3301      	adds	r3, #1
 80069bc:	005b      	lsls	r3, r3, #1
 80069be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069c2:	d808      	bhi.n	80069d6 <USBD_GetString+0x3e>
 80069c4:	6938      	ldr	r0, [r7, #16]
 80069c6:	f000 f839 	bl	8006a3c <USBD_GetLen>
 80069ca:	4603      	mov	r3, r0
 80069cc:	3301      	adds	r3, #1
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	005b      	lsls	r3, r3, #1
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	e001      	b.n	80069da <USBD_GetString+0x42>
 80069d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80069de:	7dfb      	ldrb	r3, [r7, #23]
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	4413      	add	r3, r2
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	7812      	ldrb	r2, [r2, #0]
 80069e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80069ea:	7dfb      	ldrb	r3, [r7, #23]
 80069ec:	3301      	adds	r3, #1
 80069ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80069f0:	7dfb      	ldrb	r3, [r7, #23]
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	4413      	add	r3, r2
 80069f6:	2203      	movs	r2, #3
 80069f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80069fa:	7dfb      	ldrb	r3, [r7, #23]
 80069fc:	3301      	adds	r3, #1
 80069fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006a00:	e013      	b.n	8006a2a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006a02:	7dfb      	ldrb	r3, [r7, #23]
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	4413      	add	r3, r2
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	7812      	ldrb	r2, [r2, #0]
 8006a0c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	3301      	adds	r3, #1
 8006a12:	613b      	str	r3, [r7, #16]
    idx++;
 8006a14:	7dfb      	ldrb	r3, [r7, #23]
 8006a16:	3301      	adds	r3, #1
 8006a18:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006a1a:	7dfb      	ldrb	r3, [r7, #23]
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	4413      	add	r3, r2
 8006a20:	2200      	movs	r2, #0
 8006a22:	701a      	strb	r2, [r3, #0]
    idx++;
 8006a24:	7dfb      	ldrb	r3, [r7, #23]
 8006a26:	3301      	adds	r3, #1
 8006a28:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1e7      	bne.n	8006a02 <USBD_GetString+0x6a>
 8006a32:	e000      	b.n	8006a36 <USBD_GetString+0x9e>
    return;
 8006a34:	bf00      	nop
  }
}
 8006a36:	3718      	adds	r7, #24
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006a44:	2300      	movs	r3, #0
 8006a46:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006a4c:	e005      	b.n	8006a5a <USBD_GetLen+0x1e>
  {
    len++;
 8006a4e:	7bfb      	ldrb	r3, [r7, #15]
 8006a50:	3301      	adds	r3, #1
 8006a52:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	3301      	adds	r3, #1
 8006a58:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1f5      	bne.n	8006a4e <USBD_GetLen+0x12>
  }

  return len;
 8006a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3714      	adds	r7, #20
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	2100      	movs	r1, #0
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f000 fcc5 	bl	8007426 <USBD_LL_Transmit>

  return USBD_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b084      	sub	sp, #16
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	60f8      	str	r0, [r7, #12]
 8006aae:	60b9      	str	r1, [r7, #8]
 8006ab0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f000 fcb4 	bl	8007426 <USBD_LL_Transmit>

  return USBD_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2203      	movs	r2, #3
 8006ad8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	2100      	movs	r1, #0
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 fcb8 	bl	8007468 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b084      	sub	sp, #16
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	60f8      	str	r0, [r7, #12]
 8006b0a:	60b9      	str	r1, [r7, #8]
 8006b0c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	2100      	movs	r1, #0
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 fca7 	bl	8007468 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2204      	movs	r2, #4
 8006b30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006b34:	2300      	movs	r3, #0
 8006b36:	2200      	movs	r2, #0
 8006b38:	2100      	movs	r1, #0
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fc73 	bl	8007426 <USBD_LL_Transmit>

  return USBD_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b082      	sub	sp, #8
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2205      	movs	r2, #5
 8006b56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	2100      	movs	r1, #0
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fc81 	bl	8007468 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3708      	adds	r7, #8
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006b74:	2200      	movs	r2, #0
 8006b76:	4912      	ldr	r1, [pc, #72]	@ (8006bc0 <MX_USB_DEVICE_Init+0x50>)
 8006b78:	4812      	ldr	r0, [pc, #72]	@ (8006bc4 <MX_USB_DEVICE_Init+0x54>)
 8006b7a:	f7fe fcf7 	bl	800556c <USBD_Init>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d001      	beq.n	8006b88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006b84:	f7f9 fdd6 	bl	8000734 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006b88:	490f      	ldr	r1, [pc, #60]	@ (8006bc8 <MX_USB_DEVICE_Init+0x58>)
 8006b8a:	480e      	ldr	r0, [pc, #56]	@ (8006bc4 <MX_USB_DEVICE_Init+0x54>)
 8006b8c:	f7fe fd1e 	bl	80055cc <USBD_RegisterClass>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006b96:	f7f9 fdcd 	bl	8000734 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006b9a:	490c      	ldr	r1, [pc, #48]	@ (8006bcc <MX_USB_DEVICE_Init+0x5c>)
 8006b9c:	4809      	ldr	r0, [pc, #36]	@ (8006bc4 <MX_USB_DEVICE_Init+0x54>)
 8006b9e:	f7fe fc55 	bl	800544c <USBD_CDC_RegisterInterface>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d001      	beq.n	8006bac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006ba8:	f7f9 fdc4 	bl	8000734 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006bac:	4805      	ldr	r0, [pc, #20]	@ (8006bc4 <MX_USB_DEVICE_Init+0x54>)
 8006bae:	f7fe fd43 	bl	8005638 <USBD_Start>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d001      	beq.n	8006bbc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006bb8:	f7f9 fdbc 	bl	8000734 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006bbc:	bf00      	nop
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	200000ac 	.word	0x200000ac
 8006bc4:	200001bc 	.word	0x200001bc
 8006bc8:	20000018 	.word	0x20000018
 8006bcc:	20000098 	.word	0x20000098

08006bd0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	4905      	ldr	r1, [pc, #20]	@ (8006bec <CDC_Init_FS+0x1c>)
 8006bd8:	4805      	ldr	r0, [pc, #20]	@ (8006bf0 <CDC_Init_FS+0x20>)
 8006bda:	f7fe fc51 	bl	8005480 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006bde:	4905      	ldr	r1, [pc, #20]	@ (8006bf4 <CDC_Init_FS+0x24>)
 8006be0:	4803      	ldr	r0, [pc, #12]	@ (8006bf0 <CDC_Init_FS+0x20>)
 8006be2:	f7fe fc6f 	bl	80054c4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006be6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	20000c98 	.word	0x20000c98
 8006bf0:	200001bc 	.word	0x200001bc
 8006bf4:	20000498 	.word	0x20000498

08006bf8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006bfc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	4603      	mov	r3, r0
 8006c10:	6039      	str	r1, [r7, #0]
 8006c12:	71fb      	strb	r3, [r7, #7]
 8006c14:	4613      	mov	r3, r2
 8006c16:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006c18:	79fb      	ldrb	r3, [r7, #7]
 8006c1a:	2b23      	cmp	r3, #35	@ 0x23
 8006c1c:	d84a      	bhi.n	8006cb4 <CDC_Control_FS+0xac>
 8006c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c24 <CDC_Control_FS+0x1c>)
 8006c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c24:	08006cb5 	.word	0x08006cb5
 8006c28:	08006cb5 	.word	0x08006cb5
 8006c2c:	08006cb5 	.word	0x08006cb5
 8006c30:	08006cb5 	.word	0x08006cb5
 8006c34:	08006cb5 	.word	0x08006cb5
 8006c38:	08006cb5 	.word	0x08006cb5
 8006c3c:	08006cb5 	.word	0x08006cb5
 8006c40:	08006cb5 	.word	0x08006cb5
 8006c44:	08006cb5 	.word	0x08006cb5
 8006c48:	08006cb5 	.word	0x08006cb5
 8006c4c:	08006cb5 	.word	0x08006cb5
 8006c50:	08006cb5 	.word	0x08006cb5
 8006c54:	08006cb5 	.word	0x08006cb5
 8006c58:	08006cb5 	.word	0x08006cb5
 8006c5c:	08006cb5 	.word	0x08006cb5
 8006c60:	08006cb5 	.word	0x08006cb5
 8006c64:	08006cb5 	.word	0x08006cb5
 8006c68:	08006cb5 	.word	0x08006cb5
 8006c6c:	08006cb5 	.word	0x08006cb5
 8006c70:	08006cb5 	.word	0x08006cb5
 8006c74:	08006cb5 	.word	0x08006cb5
 8006c78:	08006cb5 	.word	0x08006cb5
 8006c7c:	08006cb5 	.word	0x08006cb5
 8006c80:	08006cb5 	.word	0x08006cb5
 8006c84:	08006cb5 	.word	0x08006cb5
 8006c88:	08006cb5 	.word	0x08006cb5
 8006c8c:	08006cb5 	.word	0x08006cb5
 8006c90:	08006cb5 	.word	0x08006cb5
 8006c94:	08006cb5 	.word	0x08006cb5
 8006c98:	08006cb5 	.word	0x08006cb5
 8006c9c:	08006cb5 	.word	0x08006cb5
 8006ca0:	08006cb5 	.word	0x08006cb5
 8006ca4:	08006cb5 	.word	0x08006cb5
 8006ca8:	08006cb5 	.word	0x08006cb5
 8006cac:	08006cb5 	.word	0x08006cb5
 8006cb0:	08006cb5 	.word	0x08006cb5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006cb4:	bf00      	nop
  }

  return (USBD_OK);
 8006cb6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006cce:	6879      	ldr	r1, [r7, #4]
 8006cd0:	4805      	ldr	r0, [pc, #20]	@ (8006ce8 <CDC_Receive_FS+0x24>)
 8006cd2:	f7fe fbf7 	bl	80054c4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006cd6:	4804      	ldr	r0, [pc, #16]	@ (8006ce8 <CDC_Receive_FS+0x24>)
 8006cd8:	f7fe fc12 	bl	8005500 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006cdc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3708      	adds	r7, #8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	200001bc 	.word	0x200001bc

08006cec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b087      	sub	sp, #28
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006cfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	371c      	adds	r7, #28
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
	...

08006d10 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	4603      	mov	r3, r0
 8006d18:	6039      	str	r1, [r7, #0]
 8006d1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	2212      	movs	r2, #18
 8006d20:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006d22:	4b03      	ldr	r3, [pc, #12]	@ (8006d30 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	200000c8 	.word	0x200000c8

08006d34 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	6039      	str	r1, [r7, #0]
 8006d3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	2204      	movs	r2, #4
 8006d44:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006d46:	4b03      	ldr	r3, [pc, #12]	@ (8006d54 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr
 8006d54:	200000dc 	.word	0x200000dc

08006d58 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	6039      	str	r1, [r7, #0]
 8006d62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d64:	79fb      	ldrb	r3, [r7, #7]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d105      	bne.n	8006d76 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	4907      	ldr	r1, [pc, #28]	@ (8006d8c <USBD_FS_ProductStrDescriptor+0x34>)
 8006d6e:	4808      	ldr	r0, [pc, #32]	@ (8006d90 <USBD_FS_ProductStrDescriptor+0x38>)
 8006d70:	f7ff fe12 	bl	8006998 <USBD_GetString>
 8006d74:	e004      	b.n	8006d80 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	4904      	ldr	r1, [pc, #16]	@ (8006d8c <USBD_FS_ProductStrDescriptor+0x34>)
 8006d7a:	4805      	ldr	r0, [pc, #20]	@ (8006d90 <USBD_FS_ProductStrDescriptor+0x38>)
 8006d7c:	f7ff fe0c 	bl	8006998 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d80:	4b02      	ldr	r3, [pc, #8]	@ (8006d8c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	20001498 	.word	0x20001498
 8006d90:	080075c8 	.word	0x080075c8

08006d94 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	6039      	str	r1, [r7, #0]
 8006d9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	4904      	ldr	r1, [pc, #16]	@ (8006db4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006da4:	4804      	ldr	r0, [pc, #16]	@ (8006db8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006da6:	f7ff fdf7 	bl	8006998 <USBD_GetString>
  return USBD_StrDesc;
 8006daa:	4b02      	ldr	r3, [pc, #8]	@ (8006db4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3708      	adds	r7, #8
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	20001498 	.word	0x20001498
 8006db8:	080075e0 	.word	0x080075e0

08006dbc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	6039      	str	r1, [r7, #0]
 8006dc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	221a      	movs	r2, #26
 8006dcc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006dce:	f000 f843 	bl	8006e58 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006dd2:	4b02      	ldr	r3, [pc, #8]	@ (8006ddc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	200000e0 	.word	0x200000e0

08006de0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	4603      	mov	r3, r0
 8006de8:	6039      	str	r1, [r7, #0]
 8006dea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006dec:	79fb      	ldrb	r3, [r7, #7]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d105      	bne.n	8006dfe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	4907      	ldr	r1, [pc, #28]	@ (8006e14 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006df6:	4808      	ldr	r0, [pc, #32]	@ (8006e18 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006df8:	f7ff fdce 	bl	8006998 <USBD_GetString>
 8006dfc:	e004      	b.n	8006e08 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	4904      	ldr	r1, [pc, #16]	@ (8006e14 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006e02:	4805      	ldr	r0, [pc, #20]	@ (8006e18 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006e04:	f7ff fdc8 	bl	8006998 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e08:	4b02      	ldr	r3, [pc, #8]	@ (8006e14 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	20001498 	.word	0x20001498
 8006e18:	080075f4 	.word	0x080075f4

08006e1c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	4603      	mov	r3, r0
 8006e24:	6039      	str	r1, [r7, #0]
 8006e26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e28:	79fb      	ldrb	r3, [r7, #7]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d105      	bne.n	8006e3a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e2e:	683a      	ldr	r2, [r7, #0]
 8006e30:	4907      	ldr	r1, [pc, #28]	@ (8006e50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e32:	4808      	ldr	r0, [pc, #32]	@ (8006e54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e34:	f7ff fdb0 	bl	8006998 <USBD_GetString>
 8006e38:	e004      	b.n	8006e44 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	4904      	ldr	r1, [pc, #16]	@ (8006e50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e3e:	4805      	ldr	r0, [pc, #20]	@ (8006e54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e40:	f7ff fdaa 	bl	8006998 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e44:	4b02      	ldr	r3, [pc, #8]	@ (8006e50 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	20001498 	.word	0x20001498
 8006e54:	08007600 	.word	0x08007600

08006e58 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8006e9c <Get_SerialNum+0x44>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006e64:	4b0e      	ldr	r3, [pc, #56]	@ (8006ea0 <Get_SerialNum+0x48>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8006ea4 <Get_SerialNum+0x4c>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4413      	add	r3, r2
 8006e76:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d009      	beq.n	8006e92 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006e7e:	2208      	movs	r2, #8
 8006e80:	4909      	ldr	r1, [pc, #36]	@ (8006ea8 <Get_SerialNum+0x50>)
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f000 f814 	bl	8006eb0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006e88:	2204      	movs	r2, #4
 8006e8a:	4908      	ldr	r1, [pc, #32]	@ (8006eac <Get_SerialNum+0x54>)
 8006e8c:	68b8      	ldr	r0, [r7, #8]
 8006e8e:	f000 f80f 	bl	8006eb0 <IntToUnicode>
  }
}
 8006e92:	bf00      	nop
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	1fff7a10 	.word	0x1fff7a10
 8006ea0:	1fff7a14 	.word	0x1fff7a14
 8006ea4:	1fff7a18 	.word	0x1fff7a18
 8006ea8:	200000e2 	.word	0x200000e2
 8006eac:	200000f2 	.word	0x200000f2

08006eb0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	75fb      	strb	r3, [r7, #23]
 8006ec6:	e027      	b.n	8006f18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	0f1b      	lsrs	r3, r3, #28
 8006ecc:	2b09      	cmp	r3, #9
 8006ece:	d80b      	bhi.n	8006ee8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	0f1b      	lsrs	r3, r3, #28
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	7dfb      	ldrb	r3, [r7, #23]
 8006ed8:	005b      	lsls	r3, r3, #1
 8006eda:	4619      	mov	r1, r3
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	440b      	add	r3, r1
 8006ee0:	3230      	adds	r2, #48	@ 0x30
 8006ee2:	b2d2      	uxtb	r2, r2
 8006ee4:	701a      	strb	r2, [r3, #0]
 8006ee6:	e00a      	b.n	8006efe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	0f1b      	lsrs	r3, r3, #28
 8006eec:	b2da      	uxtb	r2, r3
 8006eee:	7dfb      	ldrb	r3, [r7, #23]
 8006ef0:	005b      	lsls	r3, r3, #1
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	440b      	add	r3, r1
 8006ef8:	3237      	adds	r2, #55	@ 0x37
 8006efa:	b2d2      	uxtb	r2, r2
 8006efc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	011b      	lsls	r3, r3, #4
 8006f02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006f04:	7dfb      	ldrb	r3, [r7, #23]
 8006f06:	005b      	lsls	r3, r3, #1
 8006f08:	3301      	adds	r3, #1
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	2200      	movs	r2, #0
 8006f10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006f12:	7dfb      	ldrb	r3, [r7, #23]
 8006f14:	3301      	adds	r3, #1
 8006f16:	75fb      	strb	r3, [r7, #23]
 8006f18:	7dfa      	ldrb	r2, [r7, #23]
 8006f1a:	79fb      	ldrb	r3, [r7, #7]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d3d3      	bcc.n	8006ec8 <IntToUnicode+0x18>
  }
}
 8006f20:	bf00      	nop
 8006f22:	bf00      	nop
 8006f24:	371c      	adds	r7, #28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
	...

08006f30 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b08a      	sub	sp, #40	@ 0x28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f38:	f107 0314 	add.w	r3, r7, #20
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	605a      	str	r2, [r3, #4]
 8006f42:	609a      	str	r2, [r3, #8]
 8006f44:	60da      	str	r2, [r3, #12]
 8006f46:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f50:	d13a      	bne.n	8006fc8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f52:	2300      	movs	r3, #0
 8006f54:	613b      	str	r3, [r7, #16]
 8006f56:	4b1e      	ldr	r3, [pc, #120]	@ (8006fd0 <HAL_PCD_MspInit+0xa0>)
 8006f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f5a:	4a1d      	ldr	r2, [pc, #116]	@ (8006fd0 <HAL_PCD_MspInit+0xa0>)
 8006f5c:	f043 0301 	orr.w	r3, r3, #1
 8006f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8006f62:	4b1b      	ldr	r3, [pc, #108]	@ (8006fd0 <HAL_PCD_MspInit+0xa0>)
 8006f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f66:	f003 0301 	and.w	r3, r3, #1
 8006f6a:	613b      	str	r3, [r7, #16]
 8006f6c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006f6e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f74:	2302      	movs	r3, #2
 8006f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006f80:	230a      	movs	r3, #10
 8006f82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f84:	f107 0314 	add.w	r3, r7, #20
 8006f88:	4619      	mov	r1, r3
 8006f8a:	4812      	ldr	r0, [pc, #72]	@ (8006fd4 <HAL_PCD_MspInit+0xa4>)
 8006f8c:	f7f9 feae 	bl	8000cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006f90:	4b0f      	ldr	r3, [pc, #60]	@ (8006fd0 <HAL_PCD_MspInit+0xa0>)
 8006f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f94:	4a0e      	ldr	r2, [pc, #56]	@ (8006fd0 <HAL_PCD_MspInit+0xa0>)
 8006f96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f9a:	6353      	str	r3, [r2, #52]	@ 0x34
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	60fb      	str	r3, [r7, #12]
 8006fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8006fd0 <HAL_PCD_MspInit+0xa0>)
 8006fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8006fd0 <HAL_PCD_MspInit+0xa0>)
 8006fa6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006faa:	6453      	str	r3, [r2, #68]	@ 0x44
 8006fac:	4b08      	ldr	r3, [pc, #32]	@ (8006fd0 <HAL_PCD_MspInit+0xa0>)
 8006fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fb4:	60fb      	str	r3, [r7, #12]
 8006fb6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006fb8:	2200      	movs	r2, #0
 8006fba:	2100      	movs	r1, #0
 8006fbc:	2043      	movs	r0, #67	@ 0x43
 8006fbe:	f7f9 fe5e 	bl	8000c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006fc2:	2043      	movs	r0, #67	@ 0x43
 8006fc4:	f7f9 fe77 	bl	8000cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006fc8:	bf00      	nop
 8006fca:	3728      	adds	r7, #40	@ 0x28
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	40023800 	.word	0x40023800
 8006fd4:	40020000 	.word	0x40020000

08006fd8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006fec:	4619      	mov	r1, r3
 8006fee:	4610      	mov	r0, r2
 8006ff0:	f7fe fb6f 	bl	80056d2 <USBD_LL_SetupStage>
}
 8006ff4:	bf00      	nop
 8006ff6:	3708      	adds	r7, #8
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	460b      	mov	r3, r1
 8007006:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800700e:	78fa      	ldrb	r2, [r7, #3]
 8007010:	6879      	ldr	r1, [r7, #4]
 8007012:	4613      	mov	r3, r2
 8007014:	00db      	lsls	r3, r3, #3
 8007016:	4413      	add	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	440b      	add	r3, r1
 800701c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	78fb      	ldrb	r3, [r7, #3]
 8007024:	4619      	mov	r1, r3
 8007026:	f7fe fba9 	bl	800577c <USBD_LL_DataOutStage>
}
 800702a:	bf00      	nop
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b082      	sub	sp, #8
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
 800703a:	460b      	mov	r3, r1
 800703c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007044:	78fa      	ldrb	r2, [r7, #3]
 8007046:	6879      	ldr	r1, [r7, #4]
 8007048:	4613      	mov	r3, r2
 800704a:	00db      	lsls	r3, r3, #3
 800704c:	4413      	add	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	440b      	add	r3, r1
 8007052:	3320      	adds	r3, #32
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	78fb      	ldrb	r3, [r7, #3]
 8007058:	4619      	mov	r1, r3
 800705a:	f7fe fc42 	bl	80058e2 <USBD_LL_DataInStage>
}
 800705e:	bf00      	nop
 8007060:	3708      	adds	r7, #8
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b082      	sub	sp, #8
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007074:	4618      	mov	r0, r3
 8007076:	f7fe fd7c 	bl	8005b72 <USBD_LL_SOF>
}
 800707a:	bf00      	nop
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b084      	sub	sp, #16
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800708a:	2301      	movs	r3, #1
 800708c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	79db      	ldrb	r3, [r3, #7]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d102      	bne.n	800709c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007096:	2300      	movs	r3, #0
 8007098:	73fb      	strb	r3, [r7, #15]
 800709a:	e008      	b.n	80070ae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	79db      	ldrb	r3, [r3, #7]
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d102      	bne.n	80070aa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80070a4:	2301      	movs	r3, #1
 80070a6:	73fb      	strb	r3, [r7, #15]
 80070a8:	e001      	b.n	80070ae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80070aa:	f7f9 fb43 	bl	8000734 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80070b4:	7bfa      	ldrb	r2, [r7, #15]
 80070b6:	4611      	mov	r1, r2
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fe fd16 	bl	8005aea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7fe fcbe 	bl	8005a46 <USBD_LL_Reset>
}
 80070ca:	bf00      	nop
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
	...

080070d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7fe fd11 	bl	8005b0a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	6812      	ldr	r2, [r2, #0]
 80070f6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80070fa:	f043 0301 	orr.w	r3, r3, #1
 80070fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	7adb      	ldrb	r3, [r3, #11]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d005      	beq.n	8007114 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007108:	4b04      	ldr	r3, [pc, #16]	@ (800711c <HAL_PCD_SuspendCallback+0x48>)
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	4a03      	ldr	r2, [pc, #12]	@ (800711c <HAL_PCD_SuspendCallback+0x48>)
 800710e:	f043 0306 	orr.w	r3, r3, #6
 8007112:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007114:	bf00      	nop
 8007116:	3708      	adds	r7, #8
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	e000ed00 	.word	0xe000ed00

08007120 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800712e:	4618      	mov	r0, r3
 8007130:	f7fe fd07 	bl	8005b42 <USBD_LL_Resume>
}
 8007134:	bf00      	nop
 8007136:	3708      	adds	r7, #8
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	460b      	mov	r3, r1
 8007146:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800714e:	78fa      	ldrb	r2, [r7, #3]
 8007150:	4611      	mov	r1, r2
 8007152:	4618      	mov	r0, r3
 8007154:	f7fe fd5f 	bl	8005c16 <USBD_LL_IsoOUTIncomplete>
}
 8007158:	bf00      	nop
 800715a:	3708      	adds	r7, #8
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	460b      	mov	r3, r1
 800716a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007172:	78fa      	ldrb	r2, [r7, #3]
 8007174:	4611      	mov	r1, r2
 8007176:	4618      	mov	r0, r3
 8007178:	f7fe fd1b 	bl	8005bb2 <USBD_LL_IsoINIncomplete>
}
 800717c:	bf00      	nop
 800717e:	3708      	adds	r7, #8
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007192:	4618      	mov	r0, r3
 8007194:	f7fe fd71 	bl	8005c7a <USBD_LL_DevConnected>
}
 8007198:	bf00      	nop
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7fe fd6e 	bl	8005c90 <USBD_LL_DevDisconnected>
}
 80071b4:	bf00      	nop
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d13c      	bne.n	8007246 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80071cc:	4a20      	ldr	r2, [pc, #128]	@ (8007250 <USBD_LL_Init+0x94>)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a1e      	ldr	r2, [pc, #120]	@ (8007250 <USBD_LL_Init+0x94>)
 80071d8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80071dc:	4b1c      	ldr	r3, [pc, #112]	@ (8007250 <USBD_LL_Init+0x94>)
 80071de:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80071e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80071e4:	4b1a      	ldr	r3, [pc, #104]	@ (8007250 <USBD_LL_Init+0x94>)
 80071e6:	2204      	movs	r2, #4
 80071e8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80071ea:	4b19      	ldr	r3, [pc, #100]	@ (8007250 <USBD_LL_Init+0x94>)
 80071ec:	2202      	movs	r2, #2
 80071ee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80071f0:	4b17      	ldr	r3, [pc, #92]	@ (8007250 <USBD_LL_Init+0x94>)
 80071f2:	2200      	movs	r2, #0
 80071f4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80071f6:	4b16      	ldr	r3, [pc, #88]	@ (8007250 <USBD_LL_Init+0x94>)
 80071f8:	2202      	movs	r2, #2
 80071fa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80071fc:	4b14      	ldr	r3, [pc, #80]	@ (8007250 <USBD_LL_Init+0x94>)
 80071fe:	2200      	movs	r2, #0
 8007200:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007202:	4b13      	ldr	r3, [pc, #76]	@ (8007250 <USBD_LL_Init+0x94>)
 8007204:	2200      	movs	r2, #0
 8007206:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007208:	4b11      	ldr	r3, [pc, #68]	@ (8007250 <USBD_LL_Init+0x94>)
 800720a:	2200      	movs	r2, #0
 800720c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800720e:	4b10      	ldr	r3, [pc, #64]	@ (8007250 <USBD_LL_Init+0x94>)
 8007210:	2200      	movs	r2, #0
 8007212:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007214:	4b0e      	ldr	r3, [pc, #56]	@ (8007250 <USBD_LL_Init+0x94>)
 8007216:	2200      	movs	r2, #0
 8007218:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800721a:	480d      	ldr	r0, [pc, #52]	@ (8007250 <USBD_LL_Init+0x94>)
 800721c:	f7fa f860 	bl	80012e0 <HAL_PCD_Init>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007226:	f7f9 fa85 	bl	8000734 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800722a:	2180      	movs	r1, #128	@ 0x80
 800722c:	4808      	ldr	r0, [pc, #32]	@ (8007250 <USBD_LL_Init+0x94>)
 800722e:	f7fb fa8c 	bl	800274a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007232:	2240      	movs	r2, #64	@ 0x40
 8007234:	2100      	movs	r1, #0
 8007236:	4806      	ldr	r0, [pc, #24]	@ (8007250 <USBD_LL_Init+0x94>)
 8007238:	f7fb fa40 	bl	80026bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800723c:	2280      	movs	r2, #128	@ 0x80
 800723e:	2101      	movs	r1, #1
 8007240:	4803      	ldr	r0, [pc, #12]	@ (8007250 <USBD_LL_Init+0x94>)
 8007242:	f7fb fa3b 	bl	80026bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20001698 	.word	0x20001698

08007254 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007260:	2300      	movs	r3, #0
 8007262:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800726a:	4618      	mov	r0, r3
 800726c:	f7fa f947 	bl	80014fe <HAL_PCD_Start>
 8007270:	4603      	mov	r3, r0
 8007272:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007274:	7bfb      	ldrb	r3, [r7, #15]
 8007276:	4618      	mov	r0, r3
 8007278:	f000 f942 	bl	8007500 <USBD_Get_USB_Status>
 800727c:	4603      	mov	r3, r0
 800727e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007280:	7bbb      	ldrb	r3, [r7, #14]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	4608      	mov	r0, r1
 8007294:	4611      	mov	r1, r2
 8007296:	461a      	mov	r2, r3
 8007298:	4603      	mov	r3, r0
 800729a:	70fb      	strb	r3, [r7, #3]
 800729c:	460b      	mov	r3, r1
 800729e:	70bb      	strb	r3, [r7, #2]
 80072a0:	4613      	mov	r3, r2
 80072a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072a4:	2300      	movs	r3, #0
 80072a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072a8:	2300      	movs	r3, #0
 80072aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80072b2:	78bb      	ldrb	r3, [r7, #2]
 80072b4:	883a      	ldrh	r2, [r7, #0]
 80072b6:	78f9      	ldrb	r1, [r7, #3]
 80072b8:	f7fa fe1b 	bl	8001ef2 <HAL_PCD_EP_Open>
 80072bc:	4603      	mov	r3, r0
 80072be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072c0:	7bfb      	ldrb	r3, [r7, #15]
 80072c2:	4618      	mov	r0, r3
 80072c4:	f000 f91c 	bl	8007500 <USBD_Get_USB_Status>
 80072c8:	4603      	mov	r3, r0
 80072ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b084      	sub	sp, #16
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	460b      	mov	r3, r1
 80072e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072e6:	2300      	movs	r3, #0
 80072e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80072f0:	78fa      	ldrb	r2, [r7, #3]
 80072f2:	4611      	mov	r1, r2
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7fa fe66 	bl	8001fc6 <HAL_PCD_EP_Close>
 80072fa:	4603      	mov	r3, r0
 80072fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072fe:	7bfb      	ldrb	r3, [r7, #15]
 8007300:	4618      	mov	r0, r3
 8007302:	f000 f8fd 	bl	8007500 <USBD_Get_USB_Status>
 8007306:	4603      	mov	r3, r0
 8007308:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800730a:	7bbb      	ldrb	r3, [r7, #14]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	460b      	mov	r3, r1
 800731e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800732e:	78fa      	ldrb	r2, [r7, #3]
 8007330:	4611      	mov	r1, r2
 8007332:	4618      	mov	r0, r3
 8007334:	f7fa ff1e 	bl	8002174 <HAL_PCD_EP_SetStall>
 8007338:	4603      	mov	r3, r0
 800733a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800733c:	7bfb      	ldrb	r3, [r7, #15]
 800733e:	4618      	mov	r0, r3
 8007340:	f000 f8de 	bl	8007500 <USBD_Get_USB_Status>
 8007344:	4603      	mov	r3, r0
 8007346:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007348:	7bbb      	ldrb	r3, [r7, #14]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	460b      	mov	r3, r1
 800735c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800735e:	2300      	movs	r3, #0
 8007360:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007362:	2300      	movs	r3, #0
 8007364:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800736c:	78fa      	ldrb	r2, [r7, #3]
 800736e:	4611      	mov	r1, r2
 8007370:	4618      	mov	r0, r3
 8007372:	f7fa ff62 	bl	800223a <HAL_PCD_EP_ClrStall>
 8007376:	4603      	mov	r3, r0
 8007378:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800737a:	7bfb      	ldrb	r3, [r7, #15]
 800737c:	4618      	mov	r0, r3
 800737e:	f000 f8bf 	bl	8007500 <USBD_Get_USB_Status>
 8007382:	4603      	mov	r3, r0
 8007384:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007386:	7bbb      	ldrb	r3, [r7, #14]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	460b      	mov	r3, r1
 800739a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80073a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80073a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	da0b      	bge.n	80073c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80073ac:	78fb      	ldrb	r3, [r7, #3]
 80073ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80073b2:	68f9      	ldr	r1, [r7, #12]
 80073b4:	4613      	mov	r3, r2
 80073b6:	00db      	lsls	r3, r3, #3
 80073b8:	4413      	add	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	440b      	add	r3, r1
 80073be:	3316      	adds	r3, #22
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	e00b      	b.n	80073dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80073c4:	78fb      	ldrb	r3, [r7, #3]
 80073c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80073ca:	68f9      	ldr	r1, [r7, #12]
 80073cc:	4613      	mov	r3, r2
 80073ce:	00db      	lsls	r3, r3, #3
 80073d0:	4413      	add	r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	440b      	add	r3, r1
 80073d6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80073da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3714      	adds	r7, #20
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	460b      	mov	r3, r1
 80073f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073f4:	2300      	movs	r3, #0
 80073f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007402:	78fa      	ldrb	r2, [r7, #3]
 8007404:	4611      	mov	r1, r2
 8007406:	4618      	mov	r0, r3
 8007408:	f7fa fd4f 	bl	8001eaa <HAL_PCD_SetAddress>
 800740c:	4603      	mov	r3, r0
 800740e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007410:	7bfb      	ldrb	r3, [r7, #15]
 8007412:	4618      	mov	r0, r3
 8007414:	f000 f874 	bl	8007500 <USBD_Get_USB_Status>
 8007418:	4603      	mov	r3, r0
 800741a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800741c:	7bbb      	ldrb	r3, [r7, #14]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b086      	sub	sp, #24
 800742a:	af00      	add	r7, sp, #0
 800742c:	60f8      	str	r0, [r7, #12]
 800742e:	607a      	str	r2, [r7, #4]
 8007430:	603b      	str	r3, [r7, #0]
 8007432:	460b      	mov	r3, r1
 8007434:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007444:	7af9      	ldrb	r1, [r7, #11]
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	f7fa fe59 	bl	8002100 <HAL_PCD_EP_Transmit>
 800744e:	4603      	mov	r3, r0
 8007450:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007452:	7dfb      	ldrb	r3, [r7, #23]
 8007454:	4618      	mov	r0, r3
 8007456:	f000 f853 	bl	8007500 <USBD_Get_USB_Status>
 800745a:	4603      	mov	r3, r0
 800745c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800745e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3718      	adds	r7, #24
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	607a      	str	r2, [r7, #4]
 8007472:	603b      	str	r3, [r7, #0]
 8007474:	460b      	mov	r3, r1
 8007476:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007478:	2300      	movs	r3, #0
 800747a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800747c:	2300      	movs	r3, #0
 800747e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007486:	7af9      	ldrb	r1, [r7, #11]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	f7fa fde5 	bl	800205a <HAL_PCD_EP_Receive>
 8007490:	4603      	mov	r3, r0
 8007492:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007494:	7dfb      	ldrb	r3, [r7, #23]
 8007496:	4618      	mov	r0, r3
 8007498:	f000 f832 	bl	8007500 <USBD_Get_USB_Status>
 800749c:	4603      	mov	r3, r0
 800749e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80074a0:	7dbb      	ldrb	r3, [r7, #22]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3718      	adds	r7, #24
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b082      	sub	sp, #8
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
 80074b2:	460b      	mov	r3, r1
 80074b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80074bc:	78fa      	ldrb	r2, [r7, #3]
 80074be:	4611      	mov	r1, r2
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7fa fe05 	bl	80020d0 <HAL_PCD_EP_GetRxCount>
 80074c6:	4603      	mov	r3, r0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80074d8:	4b03      	ldr	r3, [pc, #12]	@ (80074e8 <USBD_static_malloc+0x18>)
}
 80074da:	4618      	mov	r0, r3
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	20001b7c 	.word	0x20001b7c

080074ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]

}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	4603      	mov	r3, r0
 8007508:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800750a:	2300      	movs	r3, #0
 800750c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800750e:	79fb      	ldrb	r3, [r7, #7]
 8007510:	2b03      	cmp	r3, #3
 8007512:	d817      	bhi.n	8007544 <USBD_Get_USB_Status+0x44>
 8007514:	a201      	add	r2, pc, #4	@ (adr r2, 800751c <USBD_Get_USB_Status+0x1c>)
 8007516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751a:	bf00      	nop
 800751c:	0800752d 	.word	0x0800752d
 8007520:	08007533 	.word	0x08007533
 8007524:	08007539 	.word	0x08007539
 8007528:	0800753f 	.word	0x0800753f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800752c:	2300      	movs	r3, #0
 800752e:	73fb      	strb	r3, [r7, #15]
    break;
 8007530:	e00b      	b.n	800754a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007532:	2303      	movs	r3, #3
 8007534:	73fb      	strb	r3, [r7, #15]
    break;
 8007536:	e008      	b.n	800754a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007538:	2301      	movs	r3, #1
 800753a:	73fb      	strb	r3, [r7, #15]
    break;
 800753c:	e005      	b.n	800754a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800753e:	2303      	movs	r3, #3
 8007540:	73fb      	strb	r3, [r7, #15]
    break;
 8007542:	e002      	b.n	800754a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007544:	2303      	movs	r3, #3
 8007546:	73fb      	strb	r3, [r7, #15]
    break;
 8007548:	bf00      	nop
  }
  return usb_status;
 800754a:	7bfb      	ldrb	r3, [r7, #15]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3714      	adds	r7, #20
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <memset>:
 8007558:	4402      	add	r2, r0
 800755a:	4603      	mov	r3, r0
 800755c:	4293      	cmp	r3, r2
 800755e:	d100      	bne.n	8007562 <memset+0xa>
 8007560:	4770      	bx	lr
 8007562:	f803 1b01 	strb.w	r1, [r3], #1
 8007566:	e7f9      	b.n	800755c <memset+0x4>

08007568 <__libc_init_array>:
 8007568:	b570      	push	{r4, r5, r6, lr}
 800756a:	4d0d      	ldr	r5, [pc, #52]	@ (80075a0 <__libc_init_array+0x38>)
 800756c:	4c0d      	ldr	r4, [pc, #52]	@ (80075a4 <__libc_init_array+0x3c>)
 800756e:	1b64      	subs	r4, r4, r5
 8007570:	10a4      	asrs	r4, r4, #2
 8007572:	2600      	movs	r6, #0
 8007574:	42a6      	cmp	r6, r4
 8007576:	d109      	bne.n	800758c <__libc_init_array+0x24>
 8007578:	4d0b      	ldr	r5, [pc, #44]	@ (80075a8 <__libc_init_array+0x40>)
 800757a:	4c0c      	ldr	r4, [pc, #48]	@ (80075ac <__libc_init_array+0x44>)
 800757c:	f000 f818 	bl	80075b0 <_init>
 8007580:	1b64      	subs	r4, r4, r5
 8007582:	10a4      	asrs	r4, r4, #2
 8007584:	2600      	movs	r6, #0
 8007586:	42a6      	cmp	r6, r4
 8007588:	d105      	bne.n	8007596 <__libc_init_array+0x2e>
 800758a:	bd70      	pop	{r4, r5, r6, pc}
 800758c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007590:	4798      	blx	r3
 8007592:	3601      	adds	r6, #1
 8007594:	e7ee      	b.n	8007574 <__libc_init_array+0xc>
 8007596:	f855 3b04 	ldr.w	r3, [r5], #4
 800759a:	4798      	blx	r3
 800759c:	3601      	adds	r6, #1
 800759e:	e7f2      	b.n	8007586 <__libc_init_array+0x1e>
 80075a0:	08007630 	.word	0x08007630
 80075a4:	08007630 	.word	0x08007630
 80075a8:	08007630 	.word	0x08007630
 80075ac:	08007634 	.word	0x08007634

080075b0 <_init>:
 80075b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b2:	bf00      	nop
 80075b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075b6:	bc08      	pop	{r3}
 80075b8:	469e      	mov	lr, r3
 80075ba:	4770      	bx	lr

080075bc <_fini>:
 80075bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075be:	bf00      	nop
 80075c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075c2:	bc08      	pop	{r3}
 80075c4:	469e      	mov	lr, r3
 80075c6:	4770      	bx	lr
